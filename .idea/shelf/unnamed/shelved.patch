Index: src/groovycia2/XMLUpdater.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/XMLUpdater.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/XMLUpdater.java	(revision )
@@ -1,89 +1,127 @@
-package groovycia2;
+/*     */ package groovycia2;
+/*     */ 
+/*     */ import java.io.BufferedReader;
+/*     */ import java.io.FileOutputStream;
+/*     */ import java.net.URI;
+/*     */ import java.net.URL;
+/*     */ import java.nio.channels.FileChannel;
+/*     */ import java.nio.channels.ReadableByteChannel;
+/*     */ import java.security.CodeSource;
+/*     */ import java.security.ProtectionDomain;
+/*     */ import java.util.logging.Level;
+/*     */ 
+/*     */ public class XMLUpdater
+/*     */ {
+/*  15 */   private final String updateSite = "http://ptrk25.github.io/GroovyFX/database/check.txt";
+/*  16 */   private final String updateURL = "http://ptrk25.github.io/GroovyFX/database/community.xml";
+/*  17 */   private final String update3DSDB = "http://3dsdb.com/xml.php";
+/*     */   
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */   public boolean checkForUpdates()
+/*     */   {
+/*  25 */     if ((PropertiesHandler.getProperties("disablecommunityxml") != null) && 
+/*  26 */       (PropertiesHandler.getProperties("disablecommunityxml").equals("yes"))) {
+/*  27 */       return false;
+/*     */     }
+/*  29 */     DebugLogger.log("Checking for Community XML update...", Level.INFO);
+/*     */     try {
+/*  31 */       BufferedReader in = new BufferedReader(new java.io.InputStreamReader(new URL("http://ptrk25.github.io/GroovyFX/database/check.txt").openStream()));
+/*  32 */       String content = "";
+/*     */       String inputLine;
+/*  34 */       while ((inputLine = in.readLine()) != null) {
+/*  35 */         content = inputLine;
+/*     */       }
+/*  37 */       String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
+/*  38 */       path = path.substring(1, path.lastIndexOf("/")) + "/";
+/*     */       
+/*  40 */       if (!new java.io.File(path + "community.xml").exists()) {
+/*  41 */         PropertiesHandler.setProperties(content, "communityxmlversion");
+/*  42 */         PropertiesHandler.saveProperties();
+/*  43 */         return true;
+/*     */       }
+/*     */       String xmlversion;
+/*  46 */       if (PropertiesHandler.getProperties("communityxmlversion") != null) {
+/*  47 */         xmlversion = PropertiesHandler.getProperties("communityxmlversion");
+/*     */       } else {
+/*  49 */         PropertiesHandler.setProperties(content, "communityxmlversion");
+/*  50 */         PropertiesHandler.saveProperties();
+/*  51 */         return true;
+/*     */       }
+/*     */       String xmlversion;
+/*  54 */       if (xmlversion.equals(content)) {
+/*  55 */         DebugLogger.log("No update found!", Level.INFO);
+/*  56 */         return false;
+/*     */       }
+/*  58 */       PropertiesHandler.setProperties(content, "communityxmlversion");
+/*  59 */       PropertiesHandler.saveProperties();
+/*  60 */       return true;
+/*     */     }
+/*     */     catch (Exception e)
+/*     */     {
+/*  64 */       DebugLogger.log("Error while searching for updates!", Level.WARNING);
+/*     */     }
+/*  66 */     return false;
+/*     */   }
+/*     */   
+/*     */   public boolean update3DSDB()
+/*     */   {
+/*  71 */     if ((PropertiesHandler.getProperties("disable3dsxml") != null) && 
+/*  72 */       (PropertiesHandler.getProperties("disable3dsxml").equals("yes"))) {
+/*  73 */       return false;
+/*     */     }
+/*     */     try {
+/*  76 */       DebugLogger.log("Updating 3DS XML...", Level.INFO);
+/*  77 */       String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
+/*  78 */       path = path.substring(1, path.lastIndexOf("/")) + "/";
+/*  79 */       if (!DetectOS.isWindows()) {
+/*  80 */         path = "/" + path;
+/*     */       }
+/*  82 */       DebugLogger.log(path, Level.INFO);
+/*  83 */       ReadableByteChannel in = java.nio.channels.Channels.newChannel(new URL("http://3dsdb.com/xml.php").openStream());
+/*  84 */       FileChannel out = new FileOutputStream(path + "3dsdb.xml").getChannel();
+/*     */       
+/*  86 */       out.transferFrom(in, 0L, Long.MAX_VALUE);
+/*  87 */       in.close();
+/*  88 */       out.close();
+/*     */       
+/*  90 */       DebugLogger.log("3DSDB XML Update successful!", Level.INFO);
+/*  91 */       return true;
+/*     */     }
+/*     */     catch (Exception e) {
+/*  94 */       DebugLogger.log("3DSDB XML Update failed!", Level.INFO); }
+/*  95 */     return false;
+/*     */   }
+/*     */   
+/*     */   public boolean updateCommunity()
+/*     */   {
+/*     */     try {
+/* 101 */       DebugLogger.log("Updating Community XML...", Level.INFO);
+/* 102 */       String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
+/* 103 */       path = path.substring(1, path.lastIndexOf("/")) + "/";
+/* 104 */       if (!DetectOS.isWindows())
+/* 105 */         path = "/" + path;
+/* 106 */       DebugLogger.log(path, Level.INFO);
+/* 107 */       ReadableByteChannel in = java.nio.channels.Channels.newChannel(new URL("http://ptrk25.github.io/GroovyFX/database/community.xml").openStream());
+/* 108 */       FileChannel out = new FileOutputStream(path + "community.xml").getChannel();
+/*     */       
+/* 110 */       out.transferFrom(in, 0L, Long.MAX_VALUE);
+/* 111 */       in.close();
+/* 112 */       out.close();
+/*     */       
+/* 114 */       DebugLogger.log("Community XML Update successful!", Level.INFO);
+/* 115 */       return true;
+/*     */     }
+/*     */     catch (Exception e) {
+/* 118 */       DebugLogger.log("Community XML Update failed!", Level.INFO); }
+/* 119 */     return false;
+/*     */   }
+/*     */ }
 
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.InputStreamReader;
-import java.net.URL;
-import java.nio.channels.Channels;
-import java.nio.channels.FileChannel;
-import java.nio.channels.ReadableByteChannel;
-import java.util.logging.Level;
 
-public class XMLUpdater {
-
-    private final String updateSite = "http://ptrk25.github.io/GroovyFX/database/check.txt";
-    private final String updateURL = "http://ptrk25.github.io/GroovyFX/database/community.xml";
-
-    public XMLUpdater(){
-
-    }
-
-    public boolean checkForUpdates(){
-
-        if(PropertiesHandler.getProperties("disablexml") != null)
-            if(PropertiesHandler.getProperties("disablexml").equals("yes"))
-                return false;
-
-        DebugLogger.log("Checking for XML update...", Level.INFO);
-        try{
-            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(updateSite).openStream()));
-            String inputLine, content = "", xmlversion;
-
-            while((inputLine = in.readLine()) != null){
-                content = inputLine;
-            }
-            String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-            path = path.substring(1, path.lastIndexOf("/")) + "/";
-
-            if(!new File(path+"community.xml").exists()){
-                PropertiesHandler.setProperties(content, "xmlversion");
-                PropertiesHandler.saveProperties();
-                return true;
-            }
-
-            if(PropertiesHandler.getProperties("xmlversion") != null){
-                xmlversion = PropertiesHandler.getProperties("xmlversion");
-            }else{
-                PropertiesHandler.setProperties(content, "xmlversion");
-                PropertiesHandler.saveProperties();
-                return true;
-            }
-
-            if(xmlversion.equals(content)){
-                DebugLogger.log("No update found!", Level.INFO);
-                return false;
-            }else{
-                PropertiesHandler.setProperties(content, "xmlversion");
-                PropertiesHandler.saveProperties();
-                return true;
-            }
-
-        }catch (Exception e){
-            DebugLogger.log("Error while searching for updates!", Level.WARNING);
-        }
-        return false;
-    }
-
-    public boolean update(){
-        try{
-            DebugLogger.log("Updating XML...", Level.INFO);
-            String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-            path = path.substring(1, path.lastIndexOf("/")) + "/";
-            ReadableByteChannel in = Channels.newChannel(new URL(updateURL).openStream());
-            FileChannel out = new FileOutputStream((path+"community.xml")).getChannel();
-
-            out.transferFrom(in, 0, Long.MAX_VALUE);
-            in.close();
-            out.close();
-
-            DebugLogger.log("XML Update successful!", Level.INFO);
-            return true;
-
-        }catch(Exception e){
-            DebugLogger.log("XML Update failed!", Level.INFO);
-            return false;
-        }
-    }
-
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\XMLUpdater.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/gui/Settings.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/gui/Settings.fxml	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/gui/Settings.fxml	(revision )
@@ -29,8 +29,6 @@
                               <Font size="18.0" />
                            </font>
                         </Label>
-                        <Button fx:id="btnGenUpdateCommunityXML" layoutX="14.0" layoutY="248.0" mnemonicParsing="false" onAction="#btnGenClickedUpdateCommunityXML" prefHeight="25.0" prefWidth="392.0" text="Update community.xml" />
-                        <Button fx:id="btnGenUpdateNintendoXML" disable="true" layoutX="14.0" layoutY="280.0" mnemonicParsing="false" onAction="#btnGenClickedUpdateNintendoXML" prefHeight="25.0" prefWidth="393.0" text="Update nintendo.xml" />
                         <Separator layoutY="49.0" prefHeight="3.0" prefWidth="419.0" />
                         <Separator layoutY="174.0" prefHeight="3.0" prefWidth="419.0" />
                         <CheckBox fx:id="chbxGenDisableXML" layoutX="14.0" layoutY="218.0" mnemonicParsing="false" onAction="#chbxGenClickedDisableXML" text="Disable auto-update (community.xml)" />
@@ -41,6 +39,7 @@
                         </Label>
                         <CheckBox fx:id="chbxGenNameForTID" layoutX="14.0" layoutY="76.0" mnemonicParsing="false" onAction="#chbxGenClickedNameForTID" text="Create CIAs using this format: [Region] - [Name] [Title ID][Type].cia" />
                         <CheckBox fx:id="chbxGenNoIndvFolders" layoutX="14.0" layoutY="102.0" mnemonicParsing="false" onAction="#chbxGenClickedNoIndvFolders" text="Disable creating CIAs in individual folders" />
+                        <CheckBox fx:id="chbxGenDisable3DSXML" layoutX="14.0" layoutY="246.0" mnemonicParsing="false" onAction="#chbxGenClickedDisable3DSXML" text="Disable auto-update (3dsdb.xml)" />
                      </children>
                   </AnchorPane>
               </content>
@@ -90,25 +89,6 @@
                   </AnchorPane>
             </content>
           </Tab>
-            <Tab closable="false" disable="true" text="SocketPunch">
-              <content>
-                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
-                     <children>
-                        <CheckBox layoutX="14.0" layoutY="70.0" mnemonicParsing="false" text="Set default IP Address" />
-                        <Label layoutX="152.0" layoutY="14.0" text="SocketPunch">
-                           <font>
-                              <Font size="18.0" />
-                           </font>
-                        </Label>
-                        <Separator layoutY="49.0" prefHeight="3.0" prefWidth="419.0" />
-                        <TextField layoutX="14.0" layoutY="101.0" prefHeight="25.0" prefWidth="393.0" />
-                        <CheckBox layoutX="14.0" layoutY="149.0" mnemonicParsing="false" text="Set default input folder" />
-                        <TextField layoutX="14.0" layoutY="180.0" prefHeight="25.0" prefWidth="309.0" />
-                        <Button layoutX="335.0" layoutY="180.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="72.0" text="Select" />
-                     </children>
-                  </AnchorPane>
-              </content>
-            </Tab>
             <Tab closable="false" text="About">
               <content>
                 <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
@@ -179,6 +159,6 @@
       <Button fx:id="btnOK" layoutX="254.0" layoutY="435.0" mnemonicParsing="false" onAction="#btnClickedOK" prefHeight="25.0" prefWidth="72.0" text="OK" />
       <Button fx:id="btnCancel" layoutX="333.0" layoutY="435.0" mnemonicParsing="false" onAction="#btnClickedCancel" prefHeight="25.0" prefWidth="72.0" text="Cancel" />
       <Separator layoutY="76.0" prefHeight="3.0" prefWidth="419.0" />
-      <Label layoutX="14.0" layoutY="439.0" text="Version pre-2.01" />
+      <Label layoutX="14.0" layoutY="439.0" text="Version dev-2.1" />
    </children>
 </AnchorPane>
Index: src/groovycia2/CustomXMLHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/CustomXMLHandler.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/CustomXMLHandler.java	(revision )
@@ -1,32 +1,57 @@
-package groovycia2;
+/*    */ package groovycia2;
+/*    */ 
+/*    */ import java.io.File;
+/*    */ import java.io.StringWriter;
+/*    */ import java.net.URLDecoder;
+/*    */ 
+/*    */ public class CustomXMLHandler
+/*    */ {
+/*    */   private static String decodedPathCommunity;
+/*    */   private static String decodedPath3DSDB;
+/*    */   
+/*    */   public static String getCommunityPath()
+/*    */   {
+/*    */     try
+/*    */     {
+/* 16 */       String path = Main.class.getProtectionDomain().getCodeSource().getLocation().getPath();
+/* 17 */       path = URLDecoder.decode(path, "UTF-8");
+/*    */       
+/* 19 */       decodedPathCommunity = path.substring(0, path.lastIndexOf("/")) + "/community.xml";
+/*    */       
+/* 21 */       if (new File(decodedPathCommunity).exists()) {
+/* 22 */         return decodedPathCommunity;
+/*    */       }
+/*    */     }
+/*    */     catch (Exception e) {
+/* 26 */       StringWriter errors = new StringWriter();
+/* 27 */       e.printStackTrace(new java.io.PrintWriter(errors));
+/* 28 */       DebugLogger.log(errors.toString(), java.util.logging.Level.SEVERE);
+/*    */     }
+/* 30 */     return null;
+/*    */   }
+/*    */   
+/*    */   public static String get3DSDBPath() {
+/*    */     try {
+/* 35 */       String path = Main.class.getProtectionDomain().getCodeSource().getLocation().getPath();
+/* 36 */       path = URLDecoder.decode(path, "UTF-8");
+/*    */       
+/* 38 */       decodedPath3DSDB = path.substring(0, path.lastIndexOf("/")) + "/3dsdb.xml";
+/*    */       
+/* 40 */       if (new File(decodedPath3DSDB).exists()) {
+/* 41 */         return decodedPath3DSDB;
+/*    */       }
+/*    */     }
+/*    */     catch (Exception e) {
+/* 45 */       StringWriter errors = new StringWriter();
+/* 46 */       e.printStackTrace(new java.io.PrintWriter(errors));
+/* 47 */       DebugLogger.log(errors.toString(), java.util.logging.Level.SEVERE);
+/*    */     }
+/* 49 */     return null;
+/*    */   }
+/*    */ }
 
-import java.io.File;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.net.URLDecoder;
-import java.util.logging.Level;
 
-public class CustomXMLHandler {
-
-    private static String decodedPathCommunity;
-
-    public static String getCommunityPath(){
-        try{
-            String path = Main.class.getProtectionDomain().getCodeSource().getLocation().getPath();
-            path = URLDecoder.decode(path, "UTF-8");
-
-            decodedPathCommunity = path.substring(0, path.lastIndexOf("/")) + "/community.xml";
-
-            if (new File(decodedPathCommunity).exists()) {
-                return decodedPathCommunity;
-            }
-
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-        return null;
-    }
-
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\CustomXMLHandler.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/HTTPDownloadUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/HTTPDownloadUtil.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/HTTPDownloadUtil.java	(revision )
@@ -1,82 +1,88 @@
-package groovycia2;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.URL;
+/*    */ package groovycia2;
+/*    */ 
+/*    */ import java.io.IOException;
+/*    */ import java.io.InputStream;
+/*    */ import java.net.HttpURLConnection;
+/*    */ import java.net.URL;
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */ public class HTTPDownloadUtil
+/*    */ {
+/*    */   private HttpURLConnection httpConn;
+/*    */   private InputStream inputStream;
+/*    */   private String fileName;
+/*    */   private int contentLength;
+/*    */   
+/*    */   public void downloadFile(String fileURL)
+/*    */     throws IOException
+/*    */   {
+/* 33 */     URL url = new URL(fileURL);
+/* 34 */     this.httpConn = ((HttpURLConnection)url.openConnection());
+/* 35 */     int responseCode = this.httpConn.getResponseCode();
+/*    */     
+/*    */ 
+/* 38 */     if (responseCode == 200) {
+/* 39 */       String disposition = this.httpConn.getHeaderField("Content-Disposition");
+/*    */       
+/* 41 */       this.contentLength = this.httpConn.getContentLength();
+/*    */       
+/* 43 */       if (disposition != null)
+/*    */       {
+/* 45 */         int index = disposition.indexOf("filename=");
+/* 46 */         if (index > 0) {
+/* 47 */           this.fileName = disposition.substring(index + 10, disposition
+/* 48 */             .length() - 1);
+/*    */         }
+/*    */       }
+/*    */       else {
+/* 52 */         this.fileName = fileURL.substring(fileURL.lastIndexOf("/") + 1, fileURL
+/* 53 */           .length());
+/*    */       }
+/*    */       
+/*    */ 
+/* 57 */       this.inputStream = this.httpConn.getInputStream();
+/*    */     }
+/*    */     else {
+/* 60 */       throw new IOException("No file to download. Server replied HTTP code: " + responseCode);
+/*    */     }
+/*    */   }
+/*    */   
+/*    */   public void disconnect()
+/*    */     throws IOException
+/*    */   {
+/* 67 */     this.inputStream.close();
+/* 68 */     this.httpConn.disconnect();
+/*    */   }
+/*    */   
+/*    */   public String getFileName() {
+/* 72 */     return this.fileName;
+/*    */   }
+/*    */   
+/*    */   public int getContentLength() {
+/* 76 */     return this.contentLength;
+/*    */   }
+/*    */   
+/*    */   public InputStream getInputStream() {
+/* 80 */     return this.inputStream;
+/*    */   }
+/*    */ }
 
-/**
- * A utility that downloads a file from a URL.
- *
- * @author www.codejava.net
- *
- */
-public class HTTPDownloadUtil {
- 
-    private HttpURLConnection httpConn;
- 
-    /**
-     * hold input stream of HttpURLConnection
-     */
-    private InputStream inputStream;
- 
-    private String fileName;
-    private int contentLength;
- 
-    /**
-     * Downloads a file from a URL
-     *
-     * @param fileURL
-     *            HTTP URL of the file to be downloaded
-     * @throws IOException
-     */
-    public void downloadFile(String fileURL) throws IOException {
-        URL url = new URL(fileURL);
-        httpConn = (HttpURLConnection) url.openConnection();
-        int responseCode = httpConn.getResponseCode();
- 
-        // always check HTTP response code first
-        if (responseCode == HttpURLConnection.HTTP_OK) {
-            String disposition = httpConn.getHeaderField("Content-Disposition");
-            //String contentType = httpConn.getContentType();
-            contentLength = httpConn.getContentLength();
- 
-            if (disposition != null) {
-                // extracts file name from header field
-                int index = disposition.indexOf("filename=");
-                if (index > 0) {
-                    fileName = disposition.substring(index + 10,
-                            disposition.length() - 1);
-                }
-            } else {
-                // extracts file name from URL
-                fileName = fileURL.substring(fileURL.lastIndexOf("/") + 1,
-                        fileURL.length());
-            }
- 
-            // opens input stream from the HTTP connection
-            inputStream = httpConn.getInputStream();
- 
-        } else {
-            throw new IOException(
-                    "No file to download. Server replied HTTP code: "
-                            + responseCode);
-        }
-    }
- 
-    public void disconnect() throws IOException {
-        inputStream.close();
-        httpConn.disconnect();
-    }
- 
-    public String getFileName() {
-        return this.fileName;
-    }
- 
-    public int getContentLength() {
-        return this.contentLength;
-    }
- 
-    public InputStream getInputStream() {
-        return this.inputStream;
-    }
-}
\ No newline at end of file
+
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\HTTPDownloadUtil.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/ConvertingTools.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/ConvertingTools.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/ConvertingTools.java	(revision )
@@ -1,99 +1,104 @@
-package groovycia2;
+/*    */ package groovycia2;
+/*    */ 
+/*    */ import java.util.ArrayList;
+/*    */ import java.util.HashSet;
+/*    */ 
+/*    */ public class ConvertingTools
+/*    */ {
+/*  8 */   protected static final char[] hexArray = "0123456789ABCDEF".toCharArray();
+/*    */   
+/*    */ 
+/*    */ 
+/*    */   public static int indexOf(byte[] data, byte[] pattern, int startPos)
+/*    */   {
+/* 14 */     int[] failure = computeFailure(pattern);
+/*    */     
+/* 16 */     int j = 0;
+/* 17 */     if (data.length == 0) { return -1;
+/*    */     }
+/* 19 */     for (int i = startPos; i < data.length; i++) {
+/* 20 */       while ((j > 0) && (pattern[j] != data[i])) {
+/* 21 */         j = failure[(j - 1)];
+/*    */       }
+/* 23 */       if (pattern[j] == data[i]) j++;
+/* 24 */       if (j == pattern.length) {
+/* 25 */         return i - pattern.length + 1;
+/*    */       }
+/*    */     }
+/* 28 */     return -1;
+/*    */   }
+/*    */   
+/*    */ 
+/*    */ 
+/*    */ 
+/*    */   private static int[] computeFailure(byte[] pattern)
+/*    */   {
+/* 36 */     int[] failure = new int[pattern.length];
+/*    */     
+/* 38 */     int j = 0;
+/* 39 */     for (int i = 1; i < pattern.length; i++) {
+/* 40 */       while ((j > 0) && (pattern[j] != pattern[i])) {
+/* 41 */         j = failure[(j - 1)];
+/*    */       }
+/* 43 */       if (pattern[j] == pattern[i]) {
+/* 44 */         j++;
+/*    */       }
+/* 46 */       failure[i] = j;
+/*    */     }
+/*    */     
+/* 49 */     return failure;
+/*    */   }
+/*    */   
+/*    */   public static byte[] hexStringToByteArray(String s) {
+/* 53 */     int len = s.length();
+/* 54 */     byte[] data = new byte[len / 2];
+/* 55 */     for (int i = 0; i < len; i += 2)
+/*    */     {
+/* 57 */       data[(i / 2)] = ((byte)((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16)));
+/*    */     }
+/* 59 */     return data;
+/*    */   }
+/*    */   
+/* 62 */   public static String bytesToHex(byte[] bytes) { char[] hexChars = new char[bytes.length * 2];
+/* 63 */     for (int j = 0; j < bytes.length; j++) {
+/* 64 */       int v = bytes[j] & 0xFF;
+/* 65 */       hexChars[(j * 2)] = hexArray[(v >>> 4)];
+/* 66 */       hexChars[(j * 2 + 1)] = hexArray[(v & 0xF)];
+/*    */     }
+/* 68 */     return new String(hexChars);
+/*    */   }
+/*    */   
+/*    */ 
+/*    */   public static ArrayList<String> removeDuplicates(ArrayList<String> list)
+/*    */   {
+/* 74 */     ArrayList<String> result = new ArrayList();
+/*    */     
+/*    */ 
+/* 77 */     HashSet<String> set = new HashSet();
+/*    */     
+/*    */ 
+/* 80 */     for (String item : list)
+/*    */     {
+/* 82 */       if (!set.contains(item)) {
+/* 83 */         result.add(item);
+/* 84 */         set.add(item);
+/*    */       }
+/*    */     }
+/* 87 */     return result;
+/*    */   }
+/*    */   
+/*    */   public static byte[] connectByteArray(byte[] b1, byte[] b2, byte[] b3) {
+/* 91 */     byte[] add = new byte[b1.length + b2.length + b3.length];
+/*    */     
+/* 93 */     System.arraycopy(b1, 0, add, 0, b1.length);
+/* 94 */     System.arraycopy(b2, 0, add, b1.length, b2.length);
+/* 95 */     System.arraycopy(b3, 0, add, b1.length + b2.length, b3.length);
+/* 96 */     return add;
+/*    */   }
+/*    */ }
 
-import java.util.ArrayList;
-import java.util.HashSet;
 
-public class ConvertingTools {
-	
-	final protected static char[] hexArray = "0123456789ABCDEF".toCharArray();
-	
-	/**
-     * Finds the first occurrence of the pattern in the text.
-     */
-    public static int indexOf(byte[] data, byte[] pattern, int startPos) {
-        int[] failure = computeFailure(pattern);
-
-        int j = 0;
-        if (data.length == 0) return -1;
-
-        for (int i = startPos; i < data.length; i++) {
-            while (j > 0 && pattern[j] != data[i]) {
-                j = failure[j - 1];
-            }
-            if (pattern[j] == data[i]) { j++; }
-            if (j == pattern.length) {
-                return i - pattern.length + 1;
-            }
-        }
-        return -1;
-    }
-
-    /**
-     * Computes the failure function using a boot-strapping process,
-     * where the pattern is matched against itself.
-     */
-    private static int[] computeFailure(byte[] pattern) {
-        int[] failure = new int[pattern.length];
-
-        int j = 0;
-        for (int i = 1; i < pattern.length; i++) {
-            while (j > 0 && pattern[j] != pattern[i]) {
-                j = failure[j - 1];
-            }
-            if (pattern[j] == pattern[i]) {
-                j++;
-            }
-            failure[i] = j;
-        }
-
-        return failure;
-    }
-    
-    public static byte[] hexStringToByteArray(String s) {
-        int len = s.length();
-        byte[] data = new byte[len / 2];
-        for (int i = 0; i < len; i += 2) {
-            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
-                                 + Character.digit(s.charAt(i+1), 16));
-        }
-        return data;
-    }
-    public static String bytesToHex(byte[] bytes) {
-        char[] hexChars = new char[bytes.length * 2];
-        for ( int j = 0; j < bytes.length; j++ ) {
-            int v = bytes[j] & 0xFF;
-            hexChars[j * 2] = hexArray[v >>> 4];
-            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
-        }
-        return new String(hexChars);
-    }
-    
-    public static ArrayList<String> removeDuplicates(ArrayList<String> list) {
-
-    	// Store unique items in result.
-    	ArrayList<String> result = new ArrayList<>();
-
-    	// Record encountered Strings in HashSet.
-    	HashSet<String> set = new HashSet<>();
-
-    	// Loop over argument list.
-    	for (String item : list) {
-    	    // If String is not is set, add it to the list and the set.
-    	    if (!set.contains(item)) {
-    		result.add(item);
-    		set.add(item);
-    	    }
-    	}
-    	return result;
-    }
-    
-    public static byte[] connectByteArray(byte[] b1, byte[] b2, byte[] b3){
-    	byte[] add = new byte[b1.length + b2.length + b3.length];
-    	
-    	System.arraycopy(b1, 0, add, 0, b1.length);
-    	System.arraycopy(b2, 0, add, b1.length, b2.length);
-    	System.arraycopy(b3, 0, add, b1.length+b2.length, b3.length);
-    	return add;
-    }
-
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\ConvertingTools.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/XMLHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/XMLHandler.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/XMLHandler.java	(revision )
@@ -1,119 +1,247 @@
-package groovycia2;
+/*     */ package groovycia2;
+/*     */ 
+/*     */ import java.io.File;
+/*     */ import java.io.PrintWriter;
+/*     */ import java.io.StringWriter;
+/*     */ import java.util.Iterator;
+/*     */ import java.util.logging.Level;
+/*     */ import javafx.collections.FXCollections;
+/*     */ import javafx.collections.ObservableList;
+/*     */ import javax.xml.parsers.DocumentBuilder;
+/*     */ import javax.xml.parsers.DocumentBuilderFactory;
+/*     */ import org.w3c.dom.Document;
+/*     */ import org.w3c.dom.Element;
+/*     */ import org.w3c.dom.Node;
+/*     */ import org.w3c.dom.NodeList;
+/*     */ 
+/*     */ public class XMLHandler
+/*     */ {
+/*     */   private ObservableList<Ticket> ticketlist;
+/*     */   
+/*     */   public XMLHandler(ObservableList<Ticket> ticketlist)
+/*     */   {
+/*  23 */     this.ticketlist = ticketlist;
+/*     */   }
+/*     */   
+/*     */   public void setTicketList(ObservableList<Ticket> ticketlist) {
+/*  27 */     this.ticketlist = ticketlist;
+/*     */   }
+/*     */   
+/*     */   public ObservableList<Ticket> readCommunityXMLFile(boolean isDBV) {
+/*  31 */     DebugLogger.log("Reading community database...", Level.INFO);
+/*     */     try {
+/*  33 */       if (CustomXMLHandler.getCommunityPath() == null) {
+/*  34 */         DebugLogger.log("No community database found!", Level.WARNING);
+/*  35 */         return null;
+/*     */       }
+/*     */       
+/*  38 */       File xmlFile = new File(CustomXMLHandler.getCommunityPath());
+/*  39 */       DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
+/*  40 */       DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
+/*  41 */       Document doc = dBuilder.parse(xmlFile);
+/*     */       
+/*  43 */       doc.getDocumentElement().normalize();
+/*     */       
+/*  45 */       NodeList nList = doc.getElementsByTagName("Ticket");
+/*     */       
+/*  47 */       Ticket[] tickets = new Ticket[0];
+/*     */       
+/*  49 */       if (!isDBV) {
+/*  50 */         tickets = new Ticket[this.ticketlist.size()];
+/*     */       }
+/*  52 */       ObservableList<Ticket> tickets1 = FXCollections.observableArrayList();
+/*     */       
+/*  54 */       for (int temp = 0; temp < nList.getLength(); temp++)
+/*     */       {
+/*  56 */         Node nNode = nList.item(temp);
+/*     */         
+/*  58 */         if (nNode.getNodeType() == 1)
+/*     */         {
+/*  60 */           Element eElement = (Element)nNode;
+/*     */           
+/*  62 */           String name = eElement.getElementsByTagName("name").item(0).getTextContent();
+/*  63 */           String region = eElement.getElementsByTagName("region").item(0).getTextContent();
+/*  64 */           String serial = eElement.getElementsByTagName("serial").item(0).getTextContent();
+/*  65 */           String titleid = eElement.getElementsByTagName("titleid").item(0).getTextContent().toLowerCase();
+/*     */           
+/*  67 */           int i = 0;
+/*     */           
+/*  69 */           if (!isDBV) {
+/*  70 */             for (Ticket tiktik : this.ticketlist)
+/*     */             {
+/*  72 */               if ((tiktik.getTitleID().toLowerCase().contains(titleid)) && (titleid.length() > 1)) {
+/*  73 */                 if (region.equals("WLD"))
+/*  74 */                   region = "ALL";
+/*  75 */                 tiktik.setName(name);
+/*  76 */                 tiktik.setRegion(region);
+/*  77 */                 tiktik.setSerial(serial);
+/*  78 */                 tickets[i] = tiktik;
+/*  79 */                 i++;
+/*     */               } else {
+/*  81 */                 tickets[i] = tiktik;
+/*  82 */                 i++;
+/*     */               }
+/*     */             }
+/*     */           } else {
+/*  86 */             Ticket tiktik = new Ticket();
+/*  87 */             if (region.equals("WLD"))
+/*  88 */               region = "ALL";
+/*  89 */             tiktik.setName(name);
+/*  90 */             tiktik.setRegion(region);
+/*  91 */             tiktik.setSerial(serial);
+/*  92 */             tiktik.setTitleID(titleid.toUpperCase());
+/*  93 */             tickets1.add(tiktik);
+/*     */           }
+/*     */         }
+/*     */       }
+/*     */       
+/*     */ 
+/*     */ 
+/* 100 */       DebugLogger.log("Database processed!", Level.INFO);
+/*     */       
+/* 102 */       if (!isDBV) {
+/* 103 */         ObservableList<Ticket> ticketlist = FXCollections.observableArrayList(tickets);
+/* 104 */         ticketlist.removeAll(java.util.Collections.singleton(null));
+/* 105 */         return ticketlist;
+/*     */       }
+/* 107 */       this.ticketlist = tickets1;
+/* 108 */       return tickets1;
+/*     */ 
+/*     */     }
+/*     */     catch (Exception e)
+/*     */     {
+/* 113 */       StringWriter errors = new StringWriter();
+/* 114 */       e.printStackTrace(new PrintWriter(errors));
+/* 115 */       DebugLogger.log(errors.toString(), Level.SEVERE);
+/*     */     }
+/* 117 */     return null;
+/*     */   }
+/*     */   
+/*     */   public ObservableList<Ticket> read3DSDBXMLFile(boolean isDBV) {
+/* 121 */     DebugLogger.log("Reading 3DSDB Database...", Level.INFO);
+/*     */     try
+/*     */     {
+/* 124 */       if (CustomXMLHandler.get3DSDBPath() == null) {
+/* 125 */         DebugLogger.log("No 3DSDB database found!", Level.WARNING);
+/* 126 */         return null;
+/*     */       }
+/*     */       
+/* 129 */       File xmlFile = new File(CustomXMLHandler.get3DSDBPath());
+/* 130 */       DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
+/* 131 */       DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
+/* 132 */       Document doc = dBuilder.parse(xmlFile);
+/*     */       
+/* 134 */       doc.getDocumentElement().normalize();
+/*     */       
+/* 136 */       NodeList nList = doc.getElementsByTagName("release");
+/*     */       
+/* 138 */       Ticket[] tickets = new Ticket[0];
+/*     */       
+/* 140 */       if (!isDBV) {
+/* 141 */         tickets = new Ticket[this.ticketlist.size()];
+/*     */       }
+/* 143 */       ObservableList<Ticket> tickets1 = FXCollections.observableArrayList();
+/*     */       Node nNode;
+/* 145 */       String name; String region; String serial; String titleid; for (int temp = 0; temp < nList.getLength(); temp++)
+/*     */       {
+/* 147 */         nNode = nList.item(temp);
+/*     */         
+/* 149 */         if (nNode.getNodeType() == 1)
+/*     */         {
+/* 151 */           Element eElement = (Element)nNode;
+/*     */           
+/* 153 */           name = eElement.getElementsByTagName("name").item(0).getTextContent();
+/* 154 */           region = eElement.getElementsByTagName("region").item(0).getTextContent();
+/* 155 */           serial = eElement.getElementsByTagName("serial").item(0).getTextContent();
+/* 156 */           titleid = eElement.getElementsByTagName("titleid").item(0).getTextContent().toLowerCase();
+/*     */           
+/* 158 */           int i = 0;
+/*     */           
+/* 160 */           if (!isDBV) {
+/* 161 */             for (Ticket tiktik : this.ticketlist)
+/*     */             {
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/* 176 */               if ((tiktik.getTitleID().toLowerCase().contains(titleid)) && (titleid.length() > 1)) {
+/* 177 */                 if (tiktik.getName().length() < 1) {
+/* 178 */                   if (region.equals("WLD"))
+/* 179 */                     region = "ALL";
+/* 180 */                   tiktik.setName(name);
+/* 181 */                   tiktik.setRegion(region);
+/* 182 */                   tiktik.setSerial(serial);
+/*     */                   
+/* 184 */                   tickets[i] = tiktik;
+/* 185 */                   i++;
+/*     */                 }
+/*     */               } else {
+/* 188 */                 tickets[i] = tiktik;
+/* 189 */                 i++;
+/*     */               }
+/*     */               
+/*     */             }
+/*     */           } else {
+/* 194 */             for (Ticket tiktik : this.ticketlist) {
+/* 195 */               if ((tiktik.getTitleID().toLowerCase().contains(titleid)) && 
+/* 196 */                 (tiktik.getName().length() < 1)) {
+/* 197 */                 if (region.equals("WLD"))
+/* 198 */                   region = "ALL";
+/* 199 */                 tiktik.setName(name);
+/* 200 */                 tiktik.setRegion(region);
+/* 201 */                 tiktik.setSerial(serial);
+/* 202 */                 tickets1.add(tiktik);
+/*     */               }
+/*     */             }
+/*     */           }
+/*     */         }
+/*     */       }
+/*     */       
+/*     */ 
+/*     */ 
+/*     */ 
+/* 212 */       if (!isDBV) {
+/* 213 */         ObservableList<Ticket> ticketlist = FXCollections.observableArrayList(tickets);
+/* 214 */         ticketlist.removeAll(java.util.Collections.singleton(null));
+/* 215 */         return ticketlist;
+/*     */       }
+/* 217 */       ObservableList<Ticket> ticketlist2 = FXCollections.observableArrayList(tickets);
+/*     */       
+/*     */ 
+/* 220 */       for (Ticket tiktik : this.ticketlist) {
+/* 221 */         name = tickets1.iterator(); for (;;) { if (!name.hasNext()) break label625; Ticket tiktik2 = (Ticket)name.next();
+/* 222 */           if (tiktik.getTitleID().equals(tiktik2.getTitleID())) {
+/* 223 */             ticketlist2.add(tiktik2);
+/* 224 */             break;
+/*     */           }
+/*     */         }
+/* 227 */         ticketlist2.add(tiktik);
+/*     */       }
+/*     */       label625:
+/* 230 */       this.ticketlist = ticketlist2;
+/* 231 */       return ticketlist2;
+/*     */     }
+/*     */     catch (Exception e)
+/*     */     {
+/* 235 */       StringWriter errors = new StringWriter();
+/* 236 */       e.printStackTrace(new PrintWriter(errors));
+/* 237 */       DebugLogger.log(errors.toString(), Level.SEVERE);
+/*     */     }
+/* 239 */     return null;
+/*     */   }
+/*     */ }
 
-import javafx.collections.FXCollections;
-import javafx.collections.ObservableList;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
 
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import java.io.File;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.Collections;
-import java.util.logging.Level;
-
-public class XMLHandler {
-
-    private ObservableList<Ticket> ticketlist;
-
-    public XMLHandler(ObservableList<Ticket> ticketlist){
-        this.ticketlist = ticketlist;
-    }
-
-    public void setTicketList(ObservableList<Ticket> ticketlist){
-        this.ticketlist = ticketlist;
-    }
-
-    public ObservableList<Ticket> readCommunityXMLFile(boolean isDBV){
-        DebugLogger.log("Reading community database...", Level.INFO);
-        try{
-            if(CustomXMLHandler.getCommunityPath() == null){
-                DebugLogger.log("No community database found!", Level.WARNING);
-                return null;
-            }
-
-            File xmlFile = new File(CustomXMLHandler.getCommunityPath());
-            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
-            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
-            Document doc = dBuilder.parse(xmlFile);
-
-            doc.getDocumentElement().normalize();
-
-            NodeList nList = doc.getElementsByTagName("Ticket");
-
-            Ticket tickets[] = new Ticket[0];
-
-            if(!isDBV)
-                tickets = new Ticket[ticketlist.size()];
-
-            ObservableList<Ticket> tickets1 = FXCollections.observableArrayList();
-
-            for (int temp = 0; temp < nList.getLength(); temp++) {
-
-                Node nNode = nList.item(temp);
-
-                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
-
-                    Element eElement = (Element) nNode;
-
-                    String name = eElement.getElementsByTagName("name").item(0).getTextContent();
-                    String region = eElement.getElementsByTagName("region").item(0).getTextContent();
-                    String serial = eElement.getElementsByTagName("serial").item(0).getTextContent();
-                    String titleid = eElement.getElementsByTagName("titleid").item(0).getTextContent().toLowerCase();
-
-                    int i = 0;
-
-                    if(!isDBV){
-                        for(Ticket tiktik:ticketlist){
-
-                            if(tiktik.getTitleID().toLowerCase().contains(titleid) && titleid.length() > 1){
-                                if(region.equals("WLD"))
-                                    region = "ALL";
-                                tiktik.setName(name);
-                                tiktik.setRegion(region);
-                                tiktik.setSerial(serial);
-                                tickets[i] = tiktik;
-                                i++;
-                            }else{
-                                tickets[i] = tiktik;
-                                i++;
-                            }
-                        }
-                    }else{
-                        Ticket tiktik = new Ticket();
-                        if(region.equals("WLD"))
-                            region = "ALL";
-                        tiktik.setName(name);
-                        tiktik.setRegion(region);
-                        tiktik.setSerial(serial);
-                        tiktik.setTitleID(titleid.toUpperCase());
-                        tickets1.add(tiktik);
-                        //i++;
-                    }
-
-                }
-            }
-
-            DebugLogger.log("Database processed!", Level.INFO);
-
-            if(!isDBV){
-                ObservableList<Ticket> ticketlist = FXCollections.observableArrayList(tickets);
-                ticketlist.removeAll(Collections.singleton(null));
-                return ticketlist;
-            }else {
-                return tickets1;
-            }
-
-
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-        return null;
-    }
-
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\XMLHandler.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/RebuildCIAController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/RebuildCIAController.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/RebuildCIAController.java	(revision )
@@ -1,22 +1,27 @@
-package groovycia2;
+/*    */ package groovycia2;
+/*    */ 
+/*    */ import javafx.fxml.FXML;
+/*    */ import javafx.scene.control.Label;
+/*    */ import javafx.scene.control.ProgressBar;
+/*    */ 
+/*    */ public class RebuildCIAController
+/*    */ {
+/*    */   @FXML
+/*    */   public Label labelStatus;
+/*    */   @FXML
+/*    */   private ProgressBar progressBar1;
+/*    */   
+/*    */   public void setInput(String path)
+/*    */   {
+/* 16 */     Downloader dl = new Downloader(null, path, true);
+/* 17 */     dl.setComponents(this.labelStatus, null, null, null, null, null, null, null, this.progressBar1, null, null);
+/* 18 */     dl.setDownload(false);
+/* 19 */     dl.start();
+/*    */   }
+/*    */ }
 
-import javafx.fxml.FXML;
-import javafx.scene.control.Label;
-import javafx.scene.control.ProgressBar;
 
-public class RebuildCIAController {
-
-    @FXML
-    public Label labelStatus;
-
-    @FXML
-    private ProgressBar progressBar1;
-
-    public void setInput(String path){
-        Downloader dl = new Downloader(null, path, true);
-        dl.setComponents(labelStatus, null, null, null, null, null, null, null, progressBar1, null, null);
-        dl.setDownload(false);
-        dl.start();
-    }
-
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\RebuildCIAController.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/Main.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/Main.java	(revision )
@@ -1,124 +1,133 @@
-package groovycia2;
-
-import javafx.application.Application;
-import javafx.event.EventHandler;
+/*     */ package groovycia2;
+/*     */ 
+/*     */ import java.io.PrintWriter;
+/*     */ import java.io.StringWriter;
+/*     */ import java.util.Optional;
+/*     */ import java.util.logging.Level;
+/*     */ import javafx.collections.ObservableList;
+/*     */ import javafx.event.EventHandler;
 import javafx.fxml.FXMLLoader;
-import javafx.scene.Parent;
-import javafx.scene.Scene;
-import javafx.scene.control.Alert;
-import javafx.scene.control.ButtonType;
-import javafx.scene.control.Label;
-import javafx.scene.control.TextArea;
-import javafx.scene.image.Image;
-import javafx.scene.layout.GridPane;
-import javafx.scene.layout.Priority;
-import javafx.stage.Stage;
-import javafx.stage.WindowEvent;
+/*     */ import javafx.scene.Parent;
+/*     */ import javafx.scene.Scene;
+/*     */ import javafx.scene.control.Alert;
+/*     */ import javafx.scene.control.Alert.AlertType;
+/*     */ import javafx.scene.control.ButtonType;
+/*     */ import javafx.scene.control.DialogPane;
+/*     */ import javafx.scene.control.Label;
+/*     */ import javafx.scene.control.TextArea;
+/*     */ import javafx.scene.image.Image;
+/*     */ import javafx.scene.layout.GridPane;
+/*     */ import javafx.scene.layout.Priority;
+/*     */ import javafx.stage.Stage;
+/*     */ import javafx.stage.WindowEvent;
+/*     */ 
+/*     */ public class Main extends javafx.application.Application
+/*     */ {
+/*     */   public void start(Stage primaryStage) throws Exception
+/*     */   {
+/*  27 */     DebugLogger.init();
+/*     */     
+/*  29 */     Updater updater = new Updater();
+/*     */     
+/*  33 */     if (updater.checkForUpdates()) {
+/*  34 */       Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
+/*  35 */       Stage stage2 = (Stage)alert.getDialogPane().getScene().getWindow();
+/*  36 */       stage2.getIcons().add(new Image("/resources/gciaicon.png"));
+/*  37 */       alert.setTitle("Update");
+/*  38 */       alert.setHeaderText("New update found!");
+/*  39 */       alert.setContentText("New update found! Do you want to update now?");
+/*     */       
+/*  41 */       Label label = new Label("Changelog:");
+/*     */       
+/*  43 */       TextArea textArea = new TextArea(updater.getChangelog());
+/*  44 */       textArea.setEditable(false);
+/*  45 */       textArea.setWrapText(true);
+/*     */       
+/*  47 */       textArea.setMaxWidth(Double.MAX_VALUE);
+/*  48 */       textArea.setMaxHeight(Double.MAX_VALUE);
+/*  49 */       GridPane.setVgrow(textArea, Priority.ALWAYS);
+/*  50 */       GridPane.setHgrow(textArea, Priority.ALWAYS);
+/*     */       
+/*  52 */       GridPane expContent = new GridPane();
+/*  53 */       expContent.setMaxWidth(Double.MAX_VALUE);
+/*  54 */       expContent.add(label, 0, 0);
+/*  55 */       expContent.add(textArea, 0, 1);
+/*  56 */       alert.getDialogPane().setExpandableContent(expContent);
+/*  57 */       alert.getDialogPane().setExpanded(true);
+/*     */       
+/*  59 */       alert.initOwner(null);
+/*     */       
+/*  61 */       ButtonType Yes = new ButtonType("Yes");
+/*  62 */       ButtonType No = new ButtonType("No");
+/*  63 */       alert.getButtonTypes().setAll(new ButtonType[] { Yes, No });
+/*     */       
+/*  65 */       Optional<ButtonType> result = alert.showAndWait();
+/*     */       
+/*  67 */       if (result.get() == Yes) {
+/*  68 */         if (updater.update()) {
+/*  69 */           Alert alert2 = new Alert(Alert.AlertType.INFORMATION);
+/*  70 */           Stage stage = (Stage)alert2.getDialogPane().getScene().getWindow();
+/*  71 */           stage.getIcons().add(new Image("/resources/gciaicon.png"));
+/*  72 */           alert2.setTitle("Update");
+/*  73 */           alert2.setHeaderText("Update");
+/*  74 */           alert2.setContentText("Update successful! Please open \"CDN-FX.exe\"");
+/*  75 */           alert2.initOwner(null);
+/*  76 */           alert2.showAndWait();
+/*  77 */           System.exit(0);
+/*     */         } else {
+/*  79 */           Alert alert2 = new Alert(Alert.AlertType.INFORMATION);
+/*  80 */           Stage stage = (Stage)alert2.getDialogPane().getScene().getWindow();
+/*  81 */           stage.getIcons().add(new Image("/resources/gciaicon.png"));
+/*  82 */           alert2.setTitle("Update");
+/*  83 */           alert2.setHeaderText("Update");
+/*  84 */           alert2.setContentText("Update failed! Please contact Ptrk25.");
+/*  85 */           alert2.initOwner(null);
+/*  86 */           alert2.showAndWait();
+/*     */         }
+/*     */       }
+/*     */     }
+/*     */     try
+/*     */     {
+/*  92 */       FXMLLoader loader = new FXMLLoader();
+/*  93 */       loader.setLocation(getClass().getResource("/gui/CDN-FX.fxml"));
+/*  94 */       Parent root = (Parent)loader.load();
+/*  95 */       Scene scene = new Scene(root);
+/*     */       
+/*  97 */       scene.getStylesheets().add("/gui/StyleSheet.css");
+/*  98 */       primaryStage.setTitle("CDN-FX");
+/*  99 */       primaryStage.getIcons().add(new Image("/resources/gciaicon.png"));
+/* 100 */       primaryStage.setScene(scene);
+/* 101 */       primaryStage.setMinHeight(684.0D);
+/* 102 */       primaryStage.setMinWidth(1125.0D);
+/* 103 */       primaryStage.setOnCloseRequest(new EventHandler()
+/*     */       {
+/*     */         public void handle(WindowEvent event) {
+/* 106 */           System.exit(0);
+/* 107 */           event.consume();
+/*     */         }
+/* 109 */       });
+/* 110 */       primaryStage.show();
+/*     */       
+/* 112 */       CDNFXController cdnfxController = (CDNFXController)loader.getController();
+/* 113 */       cdnfxController.setCdnfxController(cdnfxController);
+/*     */       
+/* 115 */       Tools.unpackFiles();
+/*     */     } catch (Exception e) {
+/* 117 */       StringWriter errors = new StringWriter();
+/* 118 */       e.printStackTrace(new PrintWriter(errors));
+/* 119 */       e.printStackTrace();
+/* 120 */       DebugLogger.log(errors.toString(), Level.SEVERE);
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   public static void main(String[] args)
+/*     */   {
+/* 126 */     launch(args);
+/*     */   }
+/*     */ }
 
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.Optional;
-import java.util.logging.Level;
 
-public class Main extends Application {
-
-    @Override
-    public void start(Stage primaryStage) throws Exception{
-        DebugLogger.init();
-
-        Updater updater = new Updater();
-        if(updater.checkForUpdates()){
-            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
-            Stage stage2 = (Stage)alert.getDialogPane().getScene().getWindow();
-            stage2.getIcons().add(new Image("/resources/gciaicon.png"));
-            alert.setTitle("Update");
-            alert.setHeaderText("New update found!");
-            alert.setContentText("New update found! Do you want to update now?");
-
-            Label label = new Label("Changelog:");
-
-            TextArea textArea = new TextArea(updater.getChangelog());
-            textArea.setEditable(false);
-            textArea.setWrapText(true);
-
-            textArea.setMaxWidth(Double.MAX_VALUE);
-            textArea.setMaxHeight(Double.MAX_VALUE);
-            GridPane.setVgrow(textArea, Priority.ALWAYS);
-            GridPane.setHgrow(textArea, Priority.ALWAYS);
-
-            GridPane expContent = new GridPane();
-            expContent.setMaxWidth(Double.MAX_VALUE);
-            expContent.add(label, 0, 0);
-            expContent.add(textArea, 0, 1);
-            alert.getDialogPane().setExpandableContent(expContent);
-            alert.getDialogPane().setExpanded(true);
-
-            alert.initOwner(null);
-
-            ButtonType Yes = new ButtonType("Yes");
-            ButtonType No = new ButtonType("No");
-            alert.getButtonTypes().setAll(Yes, No);
-
-            Optional<ButtonType> result = alert.showAndWait();
-
-            if (result.get() == Yes){
-                if(updater.update()){
-                    Alert alert2 = new Alert(Alert.AlertType.INFORMATION);
-                    Stage stage = (Stage)alert2.getDialogPane().getScene().getWindow();
-                    stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                    alert2.setTitle("Update");
-                    alert2.setHeaderText("Update");
-                    alert2.setContentText("Update successful! Please restart the program.");
-                    alert2.initOwner(null);
-                    alert2.showAndWait();
-                    System.exit(0);
-                }else{
-                    Alert alert2 = new Alert(Alert.AlertType.INFORMATION);
-                    Stage stage = (Stage)alert2.getDialogPane().getScene().getWindow();
-                    stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                    alert2.setTitle("Update");
-                    alert2.setHeaderText("Update");
-                    alert2.setContentText("Update failed! Please contact Ptrk25.");
-                    alert2.initOwner(null);
-                    alert2.showAndWait();
-                }
-            }
-        }
-
-        try{
-            FXMLLoader loader = new FXMLLoader();
-            loader.setLocation(getClass().getResource("/gui/CDN-FX.fxml"));
-            Parent root = loader.load();
-            Scene scene = new Scene(root);
-
-            scene.getStylesheets().add("gui/StyleSheet.css");
-            primaryStage.setTitle("CDN-FX Pre-release");
-            primaryStage.getIcons().add(new Image("/resources/gciaicon.png"));
-            primaryStage.setScene(scene);
-            primaryStage.setMinHeight(684);
-            primaryStage.setMinWidth(1125);
-            primaryStage.setOnCloseRequest(new EventHandler<WindowEvent>() {
-                @Override
-                public void handle(WindowEvent event) {
-                    System.exit(0);
-                    event.consume();
-                }
-            });
-            primaryStage.show();
-
-            CDNFXController cdnfxController = loader.getController();
-            cdnfxController.setCdnfxController(cdnfxController);
-
-            Tools.unpackFiles();
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-
-    public static void main(String[] args) {
-        launch(args);
-    }
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\Main.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/TicketGeneratorController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/TicketGeneratorController.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/TicketGeneratorController.java	(revision )
@@ -1,27 +1,33 @@
-package groovycia2;
+/*    */ package groovycia2;
+/*    */ 
+/*    */ import javafx.collections.ObservableList;
+/*    */ import javafx.fxml.FXML;
+/*    */ import javafx.scene.control.Label;
+/*    */ import javafx.scene.control.ProgressBar;
+/*    */ 
+/*    */ 
+/*    */ public class TicketGeneratorController
+/*    */ {
+/*    */   @FXML
+/*    */   public Label labelStatus;
+/*    */   @FXML
+/*    */   private ProgressBar progressBar1;
+/*    */   private TicketGenerator tikgen;
+/*    */   
+/*    */   public void setInput(String path, ObservableList<Ticket> titlelist)
+/*    */   {
+/* 19 */     this.tikgen = new TicketGenerator(path, titlelist);
+/* 20 */     this.tikgen.setComponents(this.labelStatus, this.progressBar1);
+/* 21 */     this.tikgen.start();
+/*    */   }
+/*    */   
+/*    */   public void interrupt() {
+/* 25 */     this.tikgen.interrupt();
+/*    */   }
+/*    */ }
 
-import javafx.collections.ObservableList;
-import javafx.fxml.FXML;
-import javafx.scene.control.Label;
-import javafx.scene.control.ProgressBar;
 
-public class TicketGeneratorController {
-
-    @FXML
-    public Label labelStatus;
-
-    @FXML
-    private ProgressBar progressBar1;
-
-    private TicketGenerator tikgen;
-
-    public void setInput(String path, ObservableList<Ticket> titlelist){
-        tikgen = new TicketGenerator(path, titlelist);
-        tikgen.setComponents(labelStatus, progressBar1);
-        tikgen.start();
-    }
-
-    public void interrupt(){
-        tikgen.interrupt();
-    }
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\TicketGeneratorController.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/TDVTableFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/TDVTableFilter.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/TDVTableFilter.java	(revision )
@@ -1,100 +1,1 @@
-package groovycia2;
-
-
-import javafx.beans.value.ChangeListener;
-import javafx.beans.value.ObservableValue;
-import javafx.collections.transformation.FilteredList;
-import javafx.collections.transformation.SortedList;
-import javafx.scene.control.ListView;
-import javafx.scene.control.TextField;
-
-public class TDVTableFilter {
-
-    private static String text = "";
-    private static String categoryText = "";
-    private static boolean isPrepared = false;
-
-    public static FilteredList<Ticket> filteredTickets;
-
-    public static SortedList<Ticket> createTableFilter(TextField textSearch, ListView listView){
-
-        if(isPrepared)
-            return new SortedList<>(filteredTickets);
-
-        textSearch.textProperty().addListener((observable, oldValue, newValue) -> {
-            if(newValue == null)
-                newValue = "";
-            text = newValue.toLowerCase();
-            filterTickets();
-        });
-
-        //Listview
-        listView.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {
-            @Override
-            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
-                categoryText = newValue.split(" ")[0];
-                if(categoryText.equals("DownloadPlayChild"))
-                    categoryText = "DLP";
-                filterTickets();
-            }
-        });
-
-        isPrepared = true;
-        return new SortedList<>(filteredTickets);
-
-    }
-
-    private static void filterTickets(){
-        filteredTickets.setPredicate(ticket -> false);
-        filteredTickets.setPredicate(ticket -> {
-            if(categoryText.equals("All"))
-                categoryText = "";
-            if(categoryText.equals("DSiSystemApp"))
-                categoryText = "DSiSysApp";
-            if(categoryText.equals("DSiSystemData"))
-                categoryText = "DSiSysDat";
-
-            //TEXTSEARCH FILTER
-            if(text.length() != 0){
-                String name = ticket.getName();
-                String tid = ticket.getTitleID();
-                String region = ticket.getRegion();
-                String serial = ticket.getSerial();
-                String type = ticket.getType();
-
-                if(name == null)
-                    name = "";
-                if(region == null)
-                    region = "";
-                if(serial == null)
-                    serial = "";
-
-                name = name.toLowerCase();
-                region = region.toLowerCase();
-                serial = serial.toLowerCase();
-                type = type.toLowerCase();
-
-                if((name.contains(text) || tid.contains(text) || region.contains(text) || serial.contains(text) || type.contains(text))){
-                    if(categoryText.length() > 0){
-                        if(ticket.getType().equals(categoryText))
-                            return true;
-                        else
-                            return false;
-                    }else
-                        return true;
-                }
-            }else{
-                if(categoryText.length() > 0){
-                    if(ticket.getType().equals(categoryText))
-                        return true;
-                    else
-                        return false;
-                }else
-                    return true;
-            }
-            return false;
-
-        });
-    }
-
-}
+// INTERNAL ERROR //
\ No newline at end of file
Index: src/groovycia2/TicketGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/TicketGenerator.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/TicketGenerator.java	(revision )
@@ -1,151 +1,1 @@
-package groovycia2;
-
-import javafx.application.Platform;
-import javafx.collections.ObservableList;
-import javafx.scene.control.Alert;
-import javafx.scene.control.Label;
-import javafx.scene.control.ProgressBar;
-import javafx.scene.image.Image;
-import javafx.stage.Stage;
-
-import java.io.*;
-import java.net.URL;
-import java.util.Arrays;
-import java.util.logging.Level;
-
-public class TicketGenerator extends Thread{
-
-    private final byte[] TICKETTEMPLATE = ConvertingTools.hexStringToByteArray("00010004d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000526f6f742d434130303030303030332d585330303030303030630000000000000000000000000000000000000000000000000000000000000000000000000000feedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedface010000cccccccccccccccccccccccccccccccc00000000000000000000000000aaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010014000000ac000000140001001400000000000000280000000100000084000000840003000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
-    private final byte[] MAGIC = ConvertingTools.hexStringToByteArray
-    private final int tk = 0x140;
-    private final int ATTEMPS = 10;
-    int failed = 0;
-    private final String path;
-    private ObservableList<Ticket> titlelist;
-
-    private Label statuslabel;
-    private ProgressBar progress;
-
-    private boolean isInterrupted = false;
-
-    public TicketGenerator(String path, ObservableList<Ticket> titlelist){
-        this.path = path;
-        this.titlelist = titlelist;
-    }
-
-    public void setComponents(Label statuslabel, ProgressBar progress){
-        this.statuslabel = statuslabel;
-        this.progress = progress;
-    }
-
-    public void interrupt(){
-        isInterrupted = true;
-    }
-
-    public boolean createTicket(Ticket tik) throws Exception{
-        DebugLogger.log("Creating ticket... (TitleID: " + tik.getTitleID() + ")", Level.INFO);
-
-        byte[] ticket = TICKETTEMPLATE;
-        byte[] tmd = downloadTMD(tik.getTitleID());
-        if(tmd != null){
-            ticket = ConvertingTools.connectByteArray(Arrays.copyOfRange(ticket,0 , tk+0x9C), ConvertingTools.hexStringToByteArray(tik.getTitleID()), Arrays.copyOfRange(ticket,tk+0xA4 , ticket.length));
-            ticket = ConvertingTools.connectByteArray(Arrays.copyOfRange(ticket,0 , tk+0x7F), ConvertingTools.hexStringToByteArray(tik.getTitleKey()), Arrays.copyOfRange(ticket,tk+0x8F , ticket.length));
-            ticket = ConvertingTools.connectByteArray(Arrays.copyOfRange(ticket,0 ,tk+0xA6), Arrays.copyOfRange(tmd, tk+0x9C, tk+0x9E), Arrays.copyOfRange(ticket,tk+0xA8 ,ticket.length));
-
-            String tikname = tik.getName().replaceAll(":", "").replaceAll("\"","").replaceAll("\\?", "").replaceAll("/","").replaceAll("|","").replaceAll("\\*","").replaceAll("|","").replaceAll("<","").replaceAll(">","");
-
-            FileOutputStream fos;
-
-            if(tik.getName().length() > 0 && tik.getRegion().length() > 0)
-                fos = new FileOutputStream(path + "/" + tik.getRegion() + " - " + tikname + " (" + tik.getTitleID() + ").tik");
-            else
-                fos = new FileOutputStream(path + "/" + tik.getTitleID() + ".tik");
-
-            fos.write(ticket);
-            fos.write(MAGIC);
-            fos.close();
-
-            DebugLogger.log("Ticket created!", Level.INFO);
-            return true;
-        }else{
-            DebugLogger.log("Ticket creation failed", Level.WARNING);
-            return false;
-        }
-    }
-
-    private byte[] downloadTMD(String titleID) throws Exception{
-        String baseurl = "http://ccs.cdn.c.shop.nintendowifi.net/ccs/download/" + titleID;
-        boolean error = true;
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        InputStream is;
-
-        DebugLogger.log("TitleID: " + titleID, Level.INFO);
-        DebugLogger.log("Downloading TMD...", Level.INFO);
-
-        for(int attempt = 0; attempt < ATTEMPS; attempt++){
-            try{
-                if(attempt >= 0){
-                    int att = attempt+1;
-                }
-                is = new URL(baseurl + "/tmd").openStream ();
-                byte[] byteChunk = new byte[4096];
-                int n;
-
-                while ( (n = is.read(byteChunk)) > 0 ) {
-                    baos.write(byteChunk, 0, n);
-                }
-            }catch(Exception e){
-                DebugLogger.log("Error while downloading TMD", Level.WARNING);
-                StringWriter errors = new StringWriter();
-                e.printStackTrace(new PrintWriter(errors));
-                DebugLogger.log(errors.toString(), Level.SEVERE);
-                Thread.sleep(100);
-                error = true;
-                continue;
-            }
-            error = false;
-            break;
-        }
-        if(!error)
-            return baos.toByteArray();
-        else{
-            failed++;
-            return null;
-        }
-    }
-
-    public void run(){
-        try {
-            int count = 0, final_count = titlelist.size();
-            for(Ticket tik:titlelist){
-                createTicket(tik);
-                count++;
-                int fc = count;
-                Platform.runLater(() ->statuslabel.setText("Completed " + fc + " of " + final_count));
-                Platform.runLater(() -> progress.setProgress((double)fc/(double)final_count));
-                if(isInterrupted)
-                    break;
-            }
-
-            int fc = count;
-
-            Platform.runLater(() ->{
-                Alert warning = new Alert(Alert.AlertType.INFORMATION);
-                Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                warning.setTitle("Done");
-                warning.setHeaderText("Done");
-                warning.setContentText("Succeded: " + (fc-failed) + "\nFailed: " + failed);
-                warning.showAndWait();
-                Stage stage2 = (Stage) statuslabel.getScene().getWindow();
-                stage2.close();
-            });
-
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-}
+// INTERNAL ERROR //
\ No newline at end of file
Index: src/groovycia2/DebugLogger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/DebugLogger.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/DebugLogger.java	(revision )
@@ -1,40 +1,47 @@
-package groovycia2;
+/*    */ package groovycia2;
+/*    */ 
+/*    */ import java.util.logging.Level;
+/*    */ import java.util.logging.Logger;
+/*    */ 
+/*    */ public class DebugLogger
+/*    */ {
+/*    */   private static Logger logger;
+/*    */   private static java.util.logging.Handler handler;
+/*    */   private static String path;
+/* 11 */   private static boolean disabled = false;
+/*    */   
+/*    */   public static void init() throws Exception {
+/* 14 */     if (PropertiesHandler.getProperties("debugmode") != null) {
+/* 15 */       if (PropertiesHandler.getProperties("debugmode").equals("yes")) {
+/* 16 */         path = java.net.URLDecoder.decode(Main.class.getProtectionDomain().getCodeSource().getLocation().getPath(), "UTF-8");
+/* 17 */         logger = Logger.getLogger("DebugLogger");
+/* 18 */         if (!DetectOS.isMac()) {
+/* 19 */           handler = new java.util.logging.FileHandler(path.substring(1, path.lastIndexOf("/")) + "/debug.log");
+/* 20 */           logger.addHandler(handler);
+/* 21 */           java.util.logging.SimpleFormatter formatter = new java.util.logging.SimpleFormatter();
+/* 22 */           handler.setFormatter(formatter);
+/*    */         }
+/*    */         
+/* 25 */         log("Logger initialized!", Level.INFO);
+/*    */       } else {
+/* 27 */         disabled = true;
+/*    */       }
+/*    */     }
+/* 30 */     logger = Logger.getLogger("DebugLogger");
+/*    */   }
+/*    */   
+/*    */   public static void log(String message, Level lvl) {
+/* 34 */     if ((PropertiesHandler.getProperties("debugmode") != null) && 
+/* 35 */       (PropertiesHandler.getProperties("debugmode").equals("yes")) && (!disabled)) {
+/* 36 */       logger.log(lvl, message);
+/*    */     }
+/*    */     
+/* 39 */     logger.log(lvl, message);
+/*    */   }
+/*    */ }
 
-import java.net.URLDecoder;
-import java.util.logging.*;
 
-public class DebugLogger {
-
-    private static Logger logger;
-    private static Handler handler;
-    private static String path;
-    private static boolean disabled = false;
-
-    public static  void init() throws Exception {
-        if(PropertiesHandler.getProperties("debugmode") != null){
-            if(PropertiesHandler.getProperties("debugmode").equals("yes")){
-                path = URLDecoder.decode(Main.class.getProtectionDomain().getCodeSource().getLocation().getPath(), "UTF-8");
-                logger = Logger.getLogger("DebugLogger");
-                if(!DetectOS.isMac()){
-                    handler = new FileHandler(path.substring(1, path.lastIndexOf("/")) + "/debug.log");
-                    logger.addHandler(handler);
-                    SimpleFormatter formatter = new SimpleFormatter();
-                    handler.setFormatter(formatter);
-                }
-
-                log("Logger initialized!", Level.INFO);
-            }else{
-                disabled = true;
-            }
-        }
-    }
-
-    public static void log(String message, Level lvl){
-        if(PropertiesHandler.getProperties("debugmode") != null){
-            if(PropertiesHandler.getProperties("debugmode").equals("yes") && !disabled){
-                logger.log(lvl, message);
-            }
-        }
-    }
-
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\DebugLogger.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/DetectOS.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/DetectOS.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/DetectOS.java	(revision )
@@ -1,48 +1,52 @@
-package groovycia2;
+/*    */ package groovycia2;
+/*    */ 
+/*    */ public class DetectOS
+/*    */ {
+/*  5 */   private static String OS = System.getProperty("os.name").toLowerCase();
+/*    */   
+/*    */ 
+/*    */ 
+/*    */   public static String returnOS()
+/*    */   {
+/* 11 */     if (isWindows())
+/* 12 */       return "Windows";
+/* 13 */     if (isMac())
+/* 14 */       return "Mac";
+/* 15 */     if (isUnix())
+/* 16 */       return "Unix";
+/* 17 */     if (isSolaris()) {
+/* 18 */       return "Solaris";
+/*    */     }
+/* 20 */     return null;
+/*    */   }
+/*    */   
+/*    */ 
+/*    */   public static boolean isWindows()
+/*    */   {
+/* 26 */     return OS.indexOf("win") >= 0;
+/*    */   }
+/*    */   
+/*    */ 
+/*    */   public static boolean isMac()
+/*    */   {
+/* 32 */     return OS.indexOf("mac") >= 0;
+/*    */   }
+/*    */   
+/*    */ 
+/*    */   public static boolean isUnix()
+/*    */   {
+/* 38 */     return (OS.indexOf("nix") >= 0) || (OS.indexOf("nux") >= 0) || (OS.indexOf("aix") > 0);
+/*    */   }
+/*    */   
+/*    */ 
+/*    */   public static boolean isSolaris()
+/*    */   {
+/* 44 */     return OS.indexOf("sunos") >= 0;
+/*    */   }
+/*    */ }
 
-public class DetectOS {
-	
-private static String OS = System.getProperty("os.name").toLowerCase();
-
-	
-	public static String returnOS(){
-		//System.out.println(OS);
-		
-		if (isWindows()) {
-			return "Windows";
-		} else if (isMac()) {
-			return "Mac";
-		} else if (isUnix()) {
-			return "Unix";
-		} else if (isSolaris()) {
-			return "Solaris";
-		} else {
-			return null;
-		}
-	}
-
-	public static boolean isWindows() {
-
-		return (OS.indexOf("win") >= 0);
-
-	}
-
-	public static boolean isMac() {
-
-		return (OS.indexOf("mac") >= 0);
-
-	}
-
-	public static boolean isUnix() {
-
-		return (OS.indexOf("nix") >= 0 || OS.indexOf("nux") >= 0 || OS.indexOf("aix") > 0 );
-		
-	}
-
-	public static boolean isSolaris() {
-
-		return (OS.indexOf("sunos") >= 0);
-
-	}
-	
-}
+
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\DetectOS.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/TicketHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/TicketHandler.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/TicketHandler.java	(revision )
@@ -1,266 +1,272 @@
-package groovycia2;
+/*     */ package groovycia2;
+/*     */ 
+/*     */ import java.io.IOException;
+/*     */ import java.nio.file.Files;
+/*     */ import java.nio.file.Path;
+/*     */ import java.nio.file.Paths;
+/*     */ import java.util.ArrayList;
+/*     */ import java.util.Arrays;
+/*     */ import java.util.Iterator;
+/*     */ import java.util.List;
+/*     */ import javafx.collections.FXCollections;
+/*     */ import javafx.collections.ObservableList;
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ public class TicketHandler
+/*     */ {
+/*     */   private final byte[] TICKET_HEADER;
+/*     */   private byte[] ticketData;
+/*     */   private final int tk;
+/*     */   private List<Integer> ticketOffsets;
+/*     */   private List<Integer> ticketCount;
+/*     */   private List<Integer> apptypeCount;
+/*     */   private ObservableList<Ticket> ticketlist;
+/*     */   
+/*     */   public TicketHandler()
+/*     */   {
+/*  32 */     this.TICKET_HEADER = ConvertingTools.hexStringToByteArray("526f6f742d434130303030303030332d58533030303030303063");
+/*  33 */     this.ticketData = null;
+/*  34 */     this.ticketOffsets = new ArrayList();
+/*  35 */     this.ticketlist = FXCollections.observableArrayList();
+/*  36 */     this.ticketCount = Arrays.asList(new Integer[] { Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0) });
+/*  37 */     this.apptypeCount = Arrays.asList(new Integer[] { Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0) });
+/*  38 */     this.tk = 320;
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */   public ObservableList<Ticket> getTicketList()
+/*     */   {
+/*  47 */     return this.ticketlist;
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */   public void setTicketList(ObservableList<Ticket> list)
+/*     */   {
+/*  56 */     this.ticketlist = list;
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */   public List<Integer> getTicketCount()
+/*     */   {
+/*  65 */     return this.ticketCount;
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */   public List<Integer> getApptypeCount()
+/*     */   {
+/*  74 */     return this.apptypeCount;
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */   public void resetData()
+/*     */   {
+/*  81 */     this.ticketData = null;
+/*  82 */     this.ticketlist.clear();
+/*  83 */     this.ticketOffsets.clear();
+/*  84 */     this.ticketCount = Arrays.asList(new Integer[] { Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0) });
+/*  85 */     this.apptypeCount = Arrays.asList(new Integer[] { Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0) });
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */   public void openFile(String path)
+/*     */     throws IOException
+/*     */   {
+/*  95 */     Path realPath = Paths.get(path, new String[0]);
+/*  96 */     this.ticketData = Files.readAllBytes(realPath);
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */   public boolean addToTicketList()
+/*     */   {
+/* 105 */     int tmp = 0;
+/* 106 */     int commonKeyIndex = 0;
+/*     */     
+/* 108 */     while (tmp != -1) {
+/* 109 */       tmp = ConvertingTools.indexOf(this.ticketData, this.TICKET_HEADER, tmp + 1);
+/* 110 */       if (tmp != -1) {
+/* 111 */         this.ticketOffsets.add(Integer.valueOf(tmp));
+/*     */       }
+/*     */     }
+/*     */     
+/* 115 */     if (this.ticketOffsets.size() == 0) {
+/* 116 */       return false;
+/*     */     }
+/*     */     
+/* 119 */     for (Iterator localIterator = this.ticketOffsets.iterator(); localIterator.hasNext();) { int offs = ((Integer)localIterator.next()).intValue();
+/* 120 */       commonKeyIndex = this.ticketData[(offs + 177)];
+/* 121 */       if ((this.ticketData[(offs + 124)] == 1) && 
+/*     */       
+/*     */ 
+/* 124 */         (commonKeyIndex <= 5))
+/*     */       {
+/*     */ 
+/*     */ 
+/* 128 */         byte[] ticketData = Arrays.copyOfRange(this.ticketData, offs - 320, offs + 528);
+/* 129 */         String titleid = ConvertingTools.bytesToHex(Arrays.copyOfRange(ticketData, this.tk + 156, this.tk + 164));
+/* 130 */         String consoleid = ConvertingTools.bytesToHex(Arrays.copyOfRange(ticketData, this.tk + 152, this.tk + 156));
+/* 131 */         int common_keyindex = this.ticketData[(offs + 177)];
+/*     */         
+/* 133 */         this.ticketlist.add(new Ticket(ticketData, titleid, consoleid, common_keyindex));
+/*     */       }
+/*     */     }
+/* 136 */     return true;
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */   public void countTickets()
+/*     */   {
+/* 143 */     ArrayList<String> counter = new ArrayList();
+/* 144 */     ArrayList<Ticket> not_eshop_tickets = new ArrayList();
+/* 145 */     ArrayList<Ticket> eshop_tickets = new ArrayList();
+/*     */     
+/* 147 */     int systik = 0;
+/*     */     
+/* 149 */     this.ticketCount.set(0, Integer.valueOf(this.ticketlist.size()));
+/*     */     
+/* 151 */     for (Ticket tiktik : this.ticketlist) {
+/* 152 */       counter.add(tiktik.getTitleID());
+/*     */     }
+/*     */     
+/* 155 */     this.ticketCount.set(1, Integer.valueOf(ConvertingTools.removeDuplicates(counter).size()));
+/* 156 */     this.ticketCount.set(2, Integer.valueOf(counter.size() - ConvertingTools.removeDuplicates(counter).size()));
+/*     */     
+/* 158 */     counter.clear();
+/*     */     
+/* 160 */     for (Ticket tiktik : this.ticketlist) {
+/* 161 */       String typecheck = tiktik.getTitleID().substring(4, 8);
+/* 162 */       if ((Long.parseLong(typecheck, 16) & 0x10) == 16L) {
+/* 163 */         systik++;
+/* 164 */       } else if (typecheck.equals("8005")) {
+/* 165 */         systik++;
+/* 166 */       } else if (typecheck.equals("800F")) {
+/* 167 */         systik++;
+/*     */       }
+/*     */     }
+/* 170 */     this.ticketCount.set(3, Integer.valueOf(systik));
+/*     */     
+/* 172 */     for (??? = this.ticketlist.iterator(); ???.hasNext();) { tiktik = (Ticket)???.next();
+/* 173 */       if (tiktik.getCommonKeyIndex() == 0)
+/* 174 */         if (tiktik.getConsoleID().equals("00000000")) {
+/* 175 */           not_eshop_tickets.add(tiktik);
+/*     */         } else {
+/* 177 */           eshop_tickets.add(tiktik);
+/* 178 */           counter.add(tiktik.getTitleID());
+/*     */         }
+/*     */     }
+/*     */     Ticket tiktik;
+/* 182 */     this.ticketCount.set(4, Integer.valueOf(eshop_tickets.size()));
+/* 183 */     this.ticketCount.set(5, Integer.valueOf(ConvertingTools.removeDuplicates(counter).size()));
+/* 184 */     this.ticketCount.set(6, Integer.valueOf(eshop_tickets.size() - ConvertingTools.removeDuplicates(counter).size()));
+/* 185 */     this.ticketCount.set(7, Integer.valueOf(not_eshop_tickets.size()));
+/*     */     
+/*     */ 
+/* 188 */     Object newTicketlist = FXCollections.observableArrayList();
+/*     */     
+/*     */ 
+/* 191 */     for (Ticket tiktik : this.ticketlist) {
+/* 192 */       String titleid = tiktik.getTitleID();String consoleid = tiktik.getConsoleID();
+/* 193 */       if (ConvertingTools.bytesToHex(Arrays.copyOfRange(tiktik.getData(), 0, 4)).contains("00010004"))
+/*     */       {
+/* 195 */         if (((ObservableList)newTicketlist).size() > 0) {
+/* 196 */           Iterator localIterator2 = ((ObservableList)newTicketlist).iterator(); for (;;) { if (!localIterator2.hasNext()) break label601; Ticket tiktik2 = (Ticket)localIterator2.next();
+/* 197 */             String titleid2 = tiktik2.getTitleID();String consoleid2 = tiktik2.getConsoleID();
+/* 198 */             if ((titleid2.equals(titleid)) && (consoleid2.equals(consoleid))) {
+/* 199 */               tiktik2.setData(tiktik.getData());
+/* 200 */               break;
+/*     */             }
+/*     */           }
+/* 203 */           ((ObservableList)newTicketlist).add(tiktik);
+/*     */         } else {
+/* 205 */           ((ObservableList)newTicketlist).add(tiktik);
+/*     */         } } }
+/*     */     label601:
+/* 208 */     this.ticketlist = ((ObservableList)newTicketlist);
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */   public void sortTickets()
+/*     */     throws IOException, InterruptedException
+/*     */   {
+/* 221 */     for (Ticket tiktik : this.ticketlist) {
+/* 222 */       String titleid = tiktik.getTitleID();
+/* 223 */       String typecheck = titleid.substring(4, 8).toLowerCase();
+/* 224 */       tiktik.setDownload(Boolean.valueOf(false));
+/*     */       
+/*     */ 
+/* 227 */       if (ConvertingTools.bytesToHex(Arrays.copyOfRange(tiktik.getData(), 0, 4)).contains("00010004"))
+/*     */       {
+/*     */ 
+/*     */ 
+/*     */ 
+/* 232 */         if (typecheck.equals("0000")) {
+/* 233 */           tiktik.setType(Ticket.Type.ESHOP);
+/* 234 */           this.apptypeCount.set(0, Integer.valueOf(((Integer)this.apptypeCount.get(0)).intValue() + 1));
+/* 235 */         } else if (typecheck.equals("0001")) {
+/* 236 */           tiktik.setType(Ticket.Type.DLP);
+/* 237 */           this.apptypeCount.set(1, Integer.valueOf(((Integer)this.apptypeCount.get(1)).intValue() + 1));
+/* 238 */         } else if (typecheck.equals("0002")) {
+/* 239 */           tiktik.setType(Ticket.Type.DEMO);
+/* 240 */           this.apptypeCount.set(2, Integer.valueOf(((Integer)this.apptypeCount.get(2)).intValue() + 1));
+/* 241 */         } else if (typecheck.equals("000e")) {
+/* 242 */           tiktik.setType(Ticket.Type.UPDATE);
+/* 243 */           this.apptypeCount.set(3, Integer.valueOf(((Integer)this.apptypeCount.get(3)).intValue() + 1));
+/* 244 */         } else if (typecheck.equals("008c")) {
+/* 245 */           tiktik.setType(Ticket.Type.DLC);
+/* 246 */           this.apptypeCount.set(4, Integer.valueOf(((Integer)this.apptypeCount.get(4)).intValue() + 1));
+/* 247 */         } else if (typecheck.equals("8004")) {
+/* 248 */           tiktik.setType(Ticket.Type.DSIWARE);
+/* 249 */           this.apptypeCount.set(5, Integer.valueOf(((Integer)this.apptypeCount.get(5)).intValue() + 1));
+/* 250 */         } else if ((Long.parseLong(typecheck, 16) & 0x10) == 16L) {
+/* 251 */           tiktik.setType(Ticket.Type.SYSTEM);
+/* 252 */           this.apptypeCount.set(8, Integer.valueOf(((Integer)this.apptypeCount.get(8)).intValue() + 1));
+/* 253 */         } else if (typecheck.equals("8005")) {
+/* 254 */           tiktik.setType(Ticket.Type.DSISYSAPP);
+/* 255 */           this.apptypeCount.set(6, Integer.valueOf(((Integer)this.apptypeCount.get(6)).intValue() + 1));
+/* 256 */         } else if (typecheck.equals("800f")) {
+/* 257 */           tiktik.setType(Ticket.Type.DSISYSDAT);
+/* 258 */           this.apptypeCount.set(7, Integer.valueOf(((Integer)this.apptypeCount.get(7)).intValue() + 1));
+/*     */         } else {
+/* 260 */           tiktik.setType(Ticket.Type.MYSTERY);
+/* 261 */           this.apptypeCount.set(9, Integer.valueOf(((Integer)this.apptypeCount.get(9)).intValue() + 1));
+/*     */         }
+/*     */       }
+/*     */     }
+/*     */   }
+/*     */ }
 
-import groovycia2.Ticket.Type;
-import javafx.collections.FXCollections;
-import javafx.collections.ObservableList;
 
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-public class TicketHandler {
-
-    //Datafield
-    private final byte[] TICKET_HEADER;
-    private byte[] ticketData;
-    private final int tk;
-
-    private List<Integer> ticketOffsets;
-    private List<Integer> ticketCount;
-    private List<Integer> apptypeCount;
-
-    private ObservableList<Ticket> ticketlist;
-
-    /**
-     * Constructor for class TicketHandler
-     */
-    public TicketHandler(){
-        TICKET_HEADER = ConvertingTools.hexStringToByteArray("526f6f742d434130303030303030332d58533030303030303063");
-        ticketData = null;
-        ticketOffsets = new ArrayList<>();
-        ticketlist = FXCollections.observableArrayList();
-        ticketCount = Arrays.asList(0, 0, 0, 0, 0, 0, 0, 0);            // total, unique, duplicates, sys, e-ticket, unique-e-ticket, duplicate-e-ticket, t-not-own-eshop
-        apptypeCount = Arrays.asList(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);  // es-app, dlp, demo, upd-p, dlc, dsiw, dsisys, dsidat, sys, myst, any
-        tk = 0x140;
-    }
-
-    /**
-     * Returns the ticketlist
-     *
-     * @return              ticketlist
-     */
-    public ObservableList<Ticket> getTicketList(){
-        return ticketlist;
-    }
-
-    /**
-     * Override current ticketlist with another
-     *
-     * @param list          ticketlist
-     */
-    public void setTicketList(ObservableList<Ticket> list){
-        ticketlist = list;
-    }
-
-    /**
-     * Returns the ticketCount
-     *
-     * @return              ticketCount
-     */
-    public List<Integer> getTicketCount(){
-        return ticketCount;
-    }
-
-    /**
-     * Returns the apptypeCount
-     *
-     * @return              apptypeCount
-     */
-    public List<Integer> getApptypeCount(){
-        return apptypeCount;
-    }
-
-    /**
-     * Clears the Arraylists
-     */
-    public void resetData(){
-        ticketData = null;
-        ticketlist.clear();
-        ticketOffsets.clear();
-        ticketCount = Arrays.asList(0, 0, 0, 0, 0, 0, 0, 0);
-        apptypeCount = Arrays.asList(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
-    }
-
-    /**
-     * Opens a file and stores it into a byte array
-     *
-     * @param path              Filepath
-     * @throws IOException      File not found Exception
-     */
-    public void openFile(String path) throws IOException {
-        Path realPath = Paths.get(path);
-        ticketData = Files.readAllBytes(realPath);
-    }
-
-    /**
-     * Search for tickets in file and stores them into a list
-     *
-     * @return                  Contain tickets
-     */
-    public boolean addToTicketList(){
-        int tmp = 0;
-        int commonKeyIndex = 0;
-
-        while(tmp != -1){
-            tmp = ConvertingTools.indexOf(ticketData, TICKET_HEADER, tmp+1);
-            if(!(tmp == -1)){
-                ticketOffsets.add(tmp);
-            }
-        }
-
-        if(ticketOffsets.size() == 0){
-            return false;
-        }
-
-        for(int offs:ticketOffsets){
-            commonKeyIndex = ticketData[offs+0xb1];
-            if(ticketData[offs+0x7c] != 0x1){
-                continue;
-            }
-            if(commonKeyIndex > 5){
-                continue;
-            }
-
-            byte[] ticketData = Arrays.copyOfRange(this.ticketData, offs-0x140, offs+0x210);
-            String titleid =  ConvertingTools.bytesToHex(Arrays.copyOfRange(ticketData, tk+0x9c, tk+0xa4));
-            String consoleid =  ConvertingTools.bytesToHex(Arrays.copyOfRange(ticketData, tk+0x98, tk+0x9c));
-            int common_keyindex = this.ticketData[offs+0xb1];
-
-            ticketlist.add(new Ticket(ticketData, titleid, consoleid, common_keyindex));
-
-        }
-        return true;
-    }
-
-    /**
-     * Counts the tickets in ticketlist and stores the counted values into ticketCount
-     */
-    public void countTickets(){
-        ArrayList<String> counter = new ArrayList<>();
-        ArrayList<Ticket> not_eshop_tickets = new ArrayList<>();
-        ArrayList<Ticket> eshop_tickets = new ArrayList<>();
-
-        int systik = 0;
-
-        ticketCount.set(0, ticketlist.size());
-
-        for(Ticket tiktik:ticketlist){
-            counter.add(tiktik.getTitleID());
-        }
-
-        ticketCount.set(1, ConvertingTools.removeDuplicates(counter).size());
-        ticketCount.set(2, counter.size() - ConvertingTools.removeDuplicates(counter).size());
-
-        counter.clear();
-
-        for(Ticket tiktik:ticketlist){
-            String typecheck = tiktik.getTitleID().substring(4, 8);
-            if(((Long.parseLong(typecheck, 16)) & 0x10) == 0x10){
-                systik++;
-            }else if(typecheck.equals("8005")){
-                systik++;
-            }else if(typecheck.equals("800F")){
-                systik++;
-            }
-        }
-        ticketCount.set(3, systik);
-
-        for(Ticket tiktik:ticketlist){
-            if(tiktik.getCommonKeyIndex() == 0){
-                if(tiktik.getConsoleID().equals("00000000")){
-                    not_eshop_tickets.add(tiktik);
-                }else{
-                    eshop_tickets.add(tiktik);
-                    counter.add(tiktik.getTitleID());
-                }
-            }
-        }
-        ticketCount.set(4, eshop_tickets.size());
-        ticketCount.set(5, ConvertingTools.removeDuplicates(counter).size());
-        ticketCount.set(6, eshop_tickets.size() - ConvertingTools.removeDuplicates(counter).size());
-        ticketCount.set(7, not_eshop_tickets.size());
-
-        //THIS REMOVES DUPLICATES
-        ObservableList<Ticket> newTicketlist = FXCollections.observableArrayList();
-
-        outerloop:
-        for(Ticket tiktik:ticketlist){
-            String titleid = tiktik.getTitleID(), consoleid = tiktik.getConsoleID();
-            if(!ConvertingTools.bytesToHex(Arrays.copyOfRange(tiktik.getData(), 0x00, 0x04)).contains("00010004"))
-                continue;
-            if(newTicketlist.size() > 0){
-                for(Ticket tiktik2:newTicketlist){
-                    String titleid2 = tiktik2.getTitleID(), consoleid2 = tiktik2.getConsoleID();
-                    if(titleid2.equals(titleid) && consoleid2.equals(consoleid)){
-                        tiktik2.setData(tiktik.getData());
-                        continue outerloop;
-                    }
-                }
-                newTicketlist.add(tiktik);
-            }else{
-                newTicketlist.add(tiktik);
-            }
-        }
-        ticketlist = newTicketlist;
-    }
-
-    /**
-     * This will sort the tickets to the categories.
-     *
-     * @throws IOException
-     * @throws InterruptedException
-     */
-    public void sortTickets() throws IOException, InterruptedException {
-        String titleid;
-        String typecheck;
-
-        for(Ticket tiktik:ticketlist){
-            titleid = tiktik.getTitleID();
-            typecheck = titleid.substring(4, 8).toLowerCase();
-            tiktik.setDownload(false);
-
-
-            if(!ConvertingTools.bytesToHex(Arrays.copyOfRange(tiktik.getData(), 0x00, 0x04)).contains("00010004")){
-                // Bad Ticket
-                continue;
-            }
-
-            if(typecheck.equals("0000")){
-                tiktik.setType(Type.ESHOP);
-                apptypeCount.set(0, apptypeCount.get(0)+1);
-            }else if(typecheck.equals("0001")){
-                tiktik.setType(Type.DLP);
-                apptypeCount.set(1, apptypeCount.get(1)+1);
-            }else if(typecheck.equals("0002")){
-                tiktik.setType(Type.DEMO);
-                apptypeCount.set(2, apptypeCount.get(2)+1);
-            }else if(typecheck.equals("000e")){
-                tiktik.setType(Type.UPDATE);
-                apptypeCount.set(3, apptypeCount.get(3)+1);
-            }else if(typecheck.equals("008c")){
-                tiktik.setType(Type.DLC);
-                apptypeCount.set(4, apptypeCount.get(4)+1);
-            }else if(typecheck.equals("8004")){
-                tiktik.setType(Type.DSIWARE);
-                apptypeCount.set(5, apptypeCount.get(5)+1);
-            }else if(((Long.parseLong(typecheck, 16)) & 0x10) == 0x10){
-                tiktik.setType(Type.SYSTEM);
-                apptypeCount.set(8, apptypeCount.get(8)+1);
-            }else if(typecheck.equals("8005")){
-                tiktik.setType(Type.DSISYSAPP);
-                apptypeCount.set(6, apptypeCount.get(6)+1);
-            }else if(typecheck.equals("800f")){
-                tiktik.setType(Type.DSISYSDAT);
-                apptypeCount.set(7, apptypeCount.get(7)+1);
-            }else{
-                tiktik.setType(Type.MYSTERY);
-                apptypeCount.set(9, apptypeCount.get(9)+1);
-            }
-        }
-    }
-
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\TicketHandler.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/Updater.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/Updater.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/Updater.java	(revision )
@@ -1,93 +1,106 @@
-package groovycia2;
+/*     */ package groovycia2;
+/*     */ 
+/*     */ import java.io.BufferedReader;
+/*     */ import java.io.FileOutputStream;
+/*     */ import java.io.InputStreamReader;
+/*     */ import java.io.StringWriter;
+/*     */ import java.net.URL;
+/*     */ import java.nio.channels.FileChannel;
+/*     */ import java.nio.channels.ReadableByteChannel;
+/*     */ import java.util.ArrayList;
+/*     */ import java.util.logging.Level;
+/*     */ import javafx.collections.ObservableList;
+/*     */ import javafx.scene.control.Alert;
+/*     */ import javafx.scene.image.Image;
+/*     */ import javafx.stage.Stage;
+/*     */ 
+/*     */ public class Updater
+/*     */ {
+/*  19 */   private final String version = "dev-2.1";
+/*  20 */   private final String ostype = "x64";
+/*  21 */   private String updateSite = "http://ptrk25.github.io/GroovyFX/program/";
+/*  22 */   private String updateURL = "http://ptrk25.github.io/GroovyFX/program/";
+/*  24 */   private String changelogURL = "http://ptrk25.github.io/GroovyFX/program/change.log";
+/*     */   
+/*     */   public Updater() {
+/*  27 */     if ("x64".equals("x64")) {
+/*  28 */       this.updateSite += "check64.txt";
+/*  29 */       this.updateURL += "gfx64.exe";
+/*     */     } else {
+/*  31 */       this.updateSite += "check32.txt";
+/*  32 */       this.updateURL += "gfx32.exe";
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   public boolean checkForUpdates() {
+/*  37 */     DebugLogger.log("Checking for Update...", Level.INFO);
+/*     */     try {
+/*  39 */       BufferedReader in = new BufferedReader(new InputStreamReader(new URL(this.updateSite).openStream()));
+/*  40 */       String content = "";
+/*     */       String inputLine;
+/*  42 */       while ((inputLine = in.readLine()) != null) {
+/*  43 */         content = inputLine;
+/*     */       }
+/*     */       
+/*  46 */       if (version.equals(content)) {
+/*  47 */         return false;
+/*     */       }
+/*  49 */       return true;
+/*     */     }
+/*     */     catch (Exception e) {
+/*  52 */       DebugLogger.log("Error while searching for updates!", Level.WARNING);
+/*     */     }
+/*  54 */     return false;
+/*     */   }
+/*     */
+/*     */   
+/*     */   public boolean update() {
+/*     */     try {
+/*  89 */       DebugLogger.log("Updating...", Level.INFO);
+/*     */       
+/*  91 */       String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
+/*     */       
+/*  93 */       ReadableByteChannel in = java.nio.channels.Channels.newChannel(new URL(this.updateURL).openStream());
+/*  94 */       FileChannel out = new FileOutputStream(path).getChannel();
+/*     */       
+/*  96 */       out.transferFrom(in, 0L, Long.MAX_VALUE);
+/*  97 */       in.close();
+/*  98 */       out.close();
+/*     */       
+/* 100 */       DebugLogger.log("Update successful!", Level.INFO);
+/* 101 */       return true;
+/*     */     }
+/*     */     catch (Exception e) {
+/* 104 */       DebugLogger.log("Update failed!", Level.INFO); }
+/* 105 */     return false;
+/*     */   }
+/*     */   
+/*     */   public String getChangelog()
+/*     */   {
+/*     */     try {
+/* 111 */       BufferedReader in = new BufferedReader(new InputStreamReader(new URL(this.changelogURL).openStream()));
+/* 112 */       String updatemessage = "";
+/* 113 */       ArrayList<String> content = new ArrayList();
+/*     */       String inputLine;
+/* 115 */       while ((inputLine = in.readLine()) != null) {
+/* 116 */         content.add(inputLine);
+/*     */       }
+/*     */       
+/* 119 */       for (String n : content) {
+/* 120 */         updatemessage = updatemessage + n + "\n";
+/*     */       }
+/* 122 */       return updatemessage;
+/*     */     }
+/*     */     catch (Exception e) {
+/* 125 */       StringWriter errors = new StringWriter();
+/* 126 */       e.printStackTrace(new java.io.PrintWriter(errors));
+/* 127 */       DebugLogger.log(errors.toString(), Level.SEVERE); }
+/* 128 */     return null;
+/*     */   }
+/*     */ }
 
-import java.io.*;
-import java.net.URL;
-import java.nio.channels.Channels;
-import java.nio.channels.FileChannel;
-import java.nio.channels.ReadableByteChannel;
-import java.util.ArrayList;
-import java.util.logging.Level;
 
-public class Updater {
-
-    private final String version = "pre-2.02";
-    private final String ostype = "x64";
-    private String updateSite = "http://ptrk25.github.io/GroovyFX/program/";
-    private String updateURL = "http://ptrk25.github.io/GroovyFX/program/";
-    private String changelogURL = "http://ptrk25.github.io/GroovyFX/program/change.log";
-
-    public Updater(){
-        if(ostype.equals("x64")){
-            updateSite = updateSite + "check64.txt";
-            updateURL = updateURL + "gfx64.jar";
-        }else{
-            updateSite = updateSite + "check32.txt";
-            updateURL = updateURL + "gfx32.jar";
-        }
-    }
-
-    public boolean checkForUpdates(){
-        DebugLogger.log("Checking for Update...", Level.INFO);
-        try{
-            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(updateSite).openStream()));
-            String inputLine, content="";
-
-            while((inputLine = in.readLine()) != null){
-                content = inputLine;
-            }
-
-            if(version.equals(content)){
-                return false;
-            }else{
-                return true;
-            }
-        }catch (Exception e){
-            DebugLogger.log("Error while searching for updates!", Level.WARNING);
-        }
-        return false;
-    }
-
-    public boolean update(){
-        try{
-            DebugLogger.log("Updating...", Level.INFO);
-            String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-            ReadableByteChannel in = Channels.newChannel(new URL(updateURL).openStream());
-            FileChannel out = new FileOutputStream(path).getChannel();
-
-            out.transferFrom(in, 0, Long.MAX_VALUE);
-            in.close();
-            out.close();
-
-            DebugLogger.log("Update successful!", Level.INFO);
-            return true;
-
-        }catch(Exception e){
-            DebugLogger.log("Update failed!", Level.INFO);
-            return false;
-        }
-    }
-
-    public String getChangelog(){
-        try{
-            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(changelogURL).openStream()));
-            String inputLine, updatemessage = "";
-            ArrayList<String> content = new ArrayList<>();
-
-            while((inputLine = in.readLine()) != null){
-                content.add(inputLine);
-            }
-
-            for(String n:content){
-                updatemessage = updatemessage + n + "\n";
-            }
-            return updatemessage;
-
-        }catch(Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-            return null;
-        }
-    }
-
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\Updater.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/Ticket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/Ticket.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/Ticket.java	(revision )
@@ -1,199 +1,205 @@
-package groovycia2;
+/*     */ package groovycia2;
+/*     */ 
+/*     */ import javafx.beans.property.StringProperty;
+/*     */ 
+/*     */ public class Ticket implements java.io.Serializable { private StringProperty name;
+/*     */   private StringProperty region;
+/*     */   private StringProperty serial;
+/*     */   private StringProperty titleid;
+/*     */   private StringProperty consoleid;
+/*     */   
+/*  11 */   public static enum Type { ESHOP,  DLP,  DEMO,  UPDATE,  DLC,  DSIWARE,  DSISYSAPP,  DSISYSDAT,  SYSTEM,  MYSTERY,  NONE;
+/*     */     
+/*     */     private Type() {}
+/*     */   }
+/*     */   
+/*     */   private String titlekey;
+/*     */   private int commonKeyIndex;
+/*     */   private byte[] data;
+/*     */   private StringProperty type;
+/*     */   private javafx.beans.property.BooleanProperty download;
+/*  21 */   public Ticket() { this.name = new javafx.beans.property.SimpleStringProperty("");
+/*  22 */     this.region = new javafx.beans.property.SimpleStringProperty("");
+/*  23 */     this.serial = new javafx.beans.property.SimpleStringProperty("");
+/*  24 */     this.type = new javafx.beans.property.SimpleStringProperty("");
+/*  25 */     this.titleid = new javafx.beans.property.SimpleStringProperty("");
+/*  26 */     this.consoleid = new javafx.beans.property.SimpleStringProperty("");
+/*  27 */     this.data = null;
+/*  28 */     this.commonKeyIndex = 0;
+/*  29 */     this.download = new javafx.beans.property.SimpleBooleanProperty(false);
+/*  30 */     this.titlekey = "";
+/*     */   }
+/*     */   
+/*     */   public Ticket(String name, String region, String serial, String titleid) {
+/*  34 */     this.name = new javafx.beans.property.SimpleStringProperty(name);
+/*  35 */     this.region = new javafx.beans.property.SimpleStringProperty(region);
+/*  36 */     this.type = new javafx.beans.property.SimpleStringProperty("");
+/*  37 */     this.serial = new javafx.beans.property.SimpleStringProperty(serial);
+/*  38 */     this.titleid = new javafx.beans.property.SimpleStringProperty(titleid);
+/*  39 */     this.consoleid = new javafx.beans.property.SimpleStringProperty("");
+/*  40 */     this.download = new javafx.beans.property.SimpleBooleanProperty(false);
+/*  41 */     this.titlekey = "";
+/*     */   }
+/*     */   
+/*     */   public Ticket(byte[] data, String titleid, String consoleid, int commonKeyIndex)
+/*     */   {
+/*  46 */     this.data = data;
+/*  47 */     this.name = new javafx.beans.property.SimpleStringProperty("");
+/*  48 */     this.region = new javafx.beans.property.SimpleStringProperty("");
+/*  49 */     this.type = new javafx.beans.property.SimpleStringProperty("");
+/*  50 */     this.serial = new javafx.beans.property.SimpleStringProperty("");
+/*  51 */     this.titleid = new javafx.beans.property.SimpleStringProperty(titleid);
+/*  52 */     this.consoleid = new javafx.beans.property.SimpleStringProperty(consoleid);
+/*  53 */     this.download = new javafx.beans.property.SimpleBooleanProperty(true);
+/*  54 */     this.commonKeyIndex = commonKeyIndex;
+/*  55 */     this.titlekey = "";
+/*     */   }
+/*     */   
+/*     */   public Ticket(String titleID, String titleKey) {
+/*  59 */     this.name = new javafx.beans.property.SimpleStringProperty("");
+/*  60 */     this.region = new javafx.beans.property.SimpleStringProperty("");
+/*  61 */     this.serial = new javafx.beans.property.SimpleStringProperty("");
+/*  62 */     this.type = new javafx.beans.property.SimpleStringProperty("");
+/*  63 */     this.titleid = new javafx.beans.property.SimpleStringProperty(titleID);
+/*  64 */     this.consoleid = new javafx.beans.property.SimpleStringProperty("");
+/*  65 */     this.data = null;
+/*  66 */     this.commonKeyIndex = 0;
+/*  67 */     this.download = new javafx.beans.property.SimpleBooleanProperty(false);
+/*  68 */     this.titlekey = titleKey;
+/*     */   }
+/*     */   
+/*     */   public String getName() {
+/*  72 */     return (String)this.name.get();
+/*     */   }
+/*     */   
+/*     */   public String getRegion() {
+/*  76 */     return (String)this.region.get();
+/*     */   }
+/*     */   
+/*     */   public String getSerial() {
+/*  80 */     return (String)this.serial.get();
+/*     */   }
+/*     */   
+/*     */   public String getType() {
+/*  84 */     return (String)this.type.get();
+/*     */   }
+/*     */   
+/*     */   public String getTitleID() {
+/*  88 */     return (String)this.titleid.get();
+/*     */   }
+/*     */   
+/*     */   public String getTitleKey() {
+/*  92 */     return this.titlekey;
+/*     */   }
+/*     */   
+/*     */   public String getConsoleID() {
+/*  96 */     return (String)this.consoleid.get();
+/*     */   }
+/*     */   
+/*     */   public Boolean getDownload() {
+/* 100 */     return Boolean.valueOf(this.download.get());
+/*     */   }
+/*     */   
+/*     */   public int getCommonKeyIndex() {
+/* 104 */     return this.commonKeyIndex;
+/*     */   }
+/*     */   
+/*     */   public byte[] getData() {
+/* 108 */     return this.data;
+/*     */   }
+/*     */   
+/*     */   public void setName(String name) {
+/* 112 */     this.name.set(name);
+/*     */   }
+/*     */   
+/*     */   public void setRegion(String region) {
+/* 116 */     this.region.set(region);
+/*     */   }
+/*     */   
+/*     */   public void setSerial(String serial) {
+/* 120 */     this.serial.set(serial);
+/*     */   }
+/*     */   
+/*     */   public void setType(Type type) {
+/* 124 */     if (type == Type.ESHOP)
+/* 125 */       this.type.set("eShopApp");
+/* 126 */     if (type == Type.DLP)
+/* 127 */       this.type.set("DLP");
+/* 128 */     if (type == Type.DEMO)
+/* 129 */       this.type.set("Demo");
+/* 130 */     if (type == Type.UPDATE)
+/* 131 */       this.type.set("UpdatePatch");
+/* 132 */     if (type == Type.DLC)
+/* 133 */       this.type.set("DLC");
+/* 134 */     if (type == Type.DSIWARE)
+/* 135 */       this.type.set("DSiWare");
+/* 136 */     if (type == Type.DSISYSAPP)
+/* 137 */       this.type.set("DSiSysApp");
+/* 138 */     if (type == Type.DSISYSDAT)
+/* 139 */       this.type.set("DSiSysDat");
+/* 140 */     if (type == Type.SYSTEM)
+/* 141 */       this.type.set("System");
+/* 142 */     if (type == Type.MYSTERY)
+/* 143 */       this.type.set("Mystery");
+/* 144 */     if (type == Type.NONE)
+/* 145 */       this.type = null;
+/*     */   }
+/*     */   
+/*     */   public void setTitleID(String titleid) {
+/* 149 */     this.titleid.set(titleid);
+/*     */   }
+/*     */   
+/*     */   public void setTitleKey(String titleKey) {
+/* 153 */     this.titlekey = titleKey;
+/*     */   }
+/*     */   
+/*     */   public void setConsoleID(String consoleid) {
+/* 157 */     this.consoleid.set(consoleid);
+/*     */   }
+/*     */   
+/*     */   public void setDownload(Boolean download) {
+/* 161 */     this.download.set(download.booleanValue());
+/*     */   }
+/*     */   
+/*     */   public void setCommonKexIndex(int commonKeyIndex) {
+/* 165 */     this.commonKeyIndex = commonKeyIndex;
+/*     */   }
+/*     */   
+/*     */   public void setData(byte[] data) {
+/* 169 */     this.data = data;
+/*     */   }
+/*     */   
+/*     */   public StringProperty nameProperty() {
+/* 173 */     return this.name;
+/*     */   }
+/*     */   
+/*     */   public StringProperty regionProperty() {
+/* 177 */     return this.region;
+/*     */   }
+/*     */   
+/*     */   public StringProperty serialProperty() {
+/* 181 */     return this.serial;
+/*     */   }
+/*     */   
+/*     */   public StringProperty typeProperty() {
+/* 185 */     return this.type;
+/*     */   }
+/*     */   
+/*     */   public StringProperty titleidProperty() {
+/* 189 */     return this.titleid;
+/*     */   }
+/*     */   
+/*     */   public StringProperty consoleidProperty() {
+/* 193 */     return this.consoleid;
+/*     */   }
+/*     */   
+/*     */   public javafx.beans.property.BooleanProperty downloadProperty() {
+/* 197 */     return this.download;
+/*     */   }
+/*     */ }
 
-import javafx.beans.property.BooleanProperty;
-import javafx.beans.property.SimpleBooleanProperty;
-import javafx.beans.property.SimpleStringProperty;
-import javafx.beans.property.StringProperty;
 
-import java.io.Serializable;
-
-public class Ticket implements Serializable {
-	public enum Type {ESHOP,DLP,DEMO,UPDATE,DLC,DSIWARE,DSISYSAPP,DSISYSDAT,SYSTEM,MYSTERY,NONE}
-
-	private StringProperty name, region, serial, titleid, consoleid;
-	private String titlekey;
-	private int commonKeyIndex;
-	private byte[] data;
-	private StringProperty type;
-	private BooleanProperty download;
-
-	public Ticket(){
-		this.name = new SimpleStringProperty("");
-		this.region = new SimpleStringProperty("");
-		this.serial = new SimpleStringProperty("");
-		this.type = new SimpleStringProperty("");
-		this.titleid = new SimpleStringProperty("");
-		this.consoleid = new SimpleStringProperty("");
-		this.data = null;
-		this.commonKeyIndex = 0;
-		this.download = new SimpleBooleanProperty(false);
-		this.titlekey = "";
-	}
-
-	public Ticket(String name, String region, String serial, String titleid){
-		this.name = new SimpleStringProperty(name);
-		this.region = new SimpleStringProperty(region);
-		this.type = new SimpleStringProperty("");
-		this.serial = new SimpleStringProperty(serial);
-		this.titleid = new SimpleStringProperty(titleid);
-		this.consoleid = new SimpleStringProperty("");
-		this.download = new SimpleBooleanProperty(false);
-		this.titlekey = "";
-
-	}
-
-	public Ticket(byte[] data, String titleid, String consoleid, int commonKeyIndex){
-		this.data = data;
-		this.name = new SimpleStringProperty("");
-		this.region = new SimpleStringProperty("");
-		this.type = new SimpleStringProperty("");
-		this.serial = new SimpleStringProperty("");
-		this.titleid = new SimpleStringProperty(titleid);
-		this.consoleid = new SimpleStringProperty(consoleid);
-		this.download = new SimpleBooleanProperty(true);
-		this.commonKeyIndex = commonKeyIndex;
-		this.titlekey = "";
-	}
-
-	public Ticket(String titleID, String titleKey){
-		this.name = new SimpleStringProperty("");
-		this.region = new SimpleStringProperty("");
-		this.serial = new SimpleStringProperty("");
-		this.type = new SimpleStringProperty("");
-		this.titleid = new SimpleStringProperty(titleID);
-		this.consoleid = new SimpleStringProperty("");
-		this.data = null;
-		this.commonKeyIndex = 0;
-		this.download = new SimpleBooleanProperty(false);
-		this.titlekey = titleKey;
-	}
-
-	public String getName(){
-		return this.name.get();
-	}
-
-	public String getRegion(){
-		return this.region.get();
-	}
-
-	public String getSerial(){
-		return this.serial.get();
-	}
-
-	public String getType(){
-		return type.get();
-	}
-
-	public String getTitleID(){
-		return this.titleid.get();
-	}
-
-	public String getTitleKey(){
-		return this.titlekey;
-	}
-
-	public String getConsoleID(){
-		return this.consoleid.get();
-	}
-
-	public Boolean getDownload(){
-		return this.download.get();
-	}
-
-	public int getCommonKeyIndex(){
-		return this.commonKeyIndex;
-	}
-
-	public byte[] getData(){
-		return this.data;
-	}
-
-	public void setName(String name){
-		this.name.set(name);
-	}
-
-	public void setRegion(String region){
-		this.region.set(region);
-	}
-
-	public void setSerial(String serial){
-		this.serial.set(serial);
-	}
-
-	public void setType(Type type){
-		if(type == Type.ESHOP)
-			this.type.set("eShopApp");
-		if(type == Type.DLP)
-			this.type.set("DLP");
-		if(type == Type.DEMO)
-			this.type.set("Demo");
-		if(type == Type.UPDATE)
-			this.type.set("UpdatePatch");
-		if(type == Type.DLC)
-			this.type.set("DLC");
-		if(type == Type.DSIWARE)
-			this.type.set("DSiWare");
-		if(type == Type.DSISYSAPP)
-			this.type.set("DSiSysApp");
-		if(type == Type.DSISYSDAT)
-			this.type.set("DSiSysDat");
-		if(type == Type.SYSTEM)
-			this.type.set("System");
-		if(type == Type.MYSTERY)
-			this.type.set("Mystery");
-		if(type == Type.NONE)
-			this.type = null;
-	}
-
-	public void setTitleID(String titleid){
-		this.titleid.set(titleid);
-	}
-
-	public void setTitleKey(String titleKey){
-		this.titlekey = titleKey;
-	}
-
-	public void setConsoleID(String consoleid){
-		this.consoleid.set(consoleid);
-	}
-
-	public void setDownload(Boolean download){
-		this.download.set(download);
-	}
-
-	public void setCommonKexIndex(int commonKeyIndex){
-		this.commonKeyIndex = commonKeyIndex;
-	}
-
-	public void setData(byte[] data){
-		this.data = data;
-	}
-
-	public StringProperty nameProperty(){
-		return name;
-	}
-
-	public StringProperty regionProperty(){
-		return region;
-	}
-
-	public StringProperty serialProperty(){
-		return serial;
-	}
-
-	public StringProperty typeProperty(){
-		return type;
-	}
-
-	public StringProperty titleidProperty(){
-		return titleid;
-	}
-
-	public StringProperty consoleidProperty(){
-		return consoleid;
-	}
-
-	public BooleanProperty downloadProperty(){
-		return download;
-	}
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\Ticket.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/Tools.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/Tools.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/Tools.java	(revision )
@@ -1,178 +1,183 @@
-package groovycia2;
+/*     */ package groovycia2;
+/*     */ 
+/*     */ import java.io.File;
+/*     */ import java.io.IOException;
+/*     */ import java.io.StringWriter;
+/*     */ import java.net.URI;
+/*     */ import java.util.logging.Level;
+/*     */ import java.util.zip.ZipFile;
+/*     */ 
+/*     */ public class Tools
+/*     */ {
+/*     */   private static String make_cdn;
+/*     */   private static String ctrtool;
+/*     */   private static String makerom;
+/*     */   
+/*     */   public static String getMakeCDN()
+/*     */   {
+/*  18 */     return make_cdn;
+/*     */   }
+/*     */   
+/*     */   public static String getCtrtool() {
+/*  22 */     return ctrtool;
+/*     */   }
+/*     */   
+/*     */   public static String getMakerom() {
+/*  26 */     return makerom;
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */   private static URI getJarURI()
+/*     */     throws java.net.URISyntaxException
+/*     */   {
+/*  36 */     java.security.ProtectionDomain domain = Main.class.getProtectionDomain();
+/*  37 */     java.security.CodeSource source = domain.getCodeSource();
+/*  38 */     java.net.URL url = source.getLocation();
+/*  39 */     URI uri = url.toURI();
+/*     */     
+/*  41 */     return uri;
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */   private static URI getFile(URI where, String fileName)
+/*     */     throws java.util.zip.ZipException, IOException
+/*     */   {
+/*  49 */     File location = new File(where);
+/*     */     
+/*     */     URI fileURI;
+/*  52 */     if (location.isDirectory())
+/*     */     {
+/*  54 */       fileURI = URI.create(where.toString() + fileName);
+/*     */ 
+/*     */     }
+/*     */     else
+/*     */     {
+/*     */ 
+/*  60 */       ZipFile zipFile = new ZipFile(location);
+/*     */       
+/*     */       try
+/*     */       {
+/*  64 */         fileURI = extract(zipFile, fileName);
+/*     */       }
+/*     */       finally {
+/*     */         URI fileURI;
+/*  68 */         zipFile.close();
+/*     */       }
+/*     */     }
+/*     */     URI fileURI;
+/*  72 */     return fileURI;
+/*     */   }
+/*     */   
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */   private static URI extract(ZipFile zipFile, String fileName)
+/*     */     throws IOException
+/*     */   {
+/*  84 */     File tempFile = File.createTempFile(fileName, Long.toString(System.currentTimeMillis()));
+/*  85 */     tempFile.deleteOnExit();
+/*  86 */     java.util.zip.ZipEntry entry = zipFile.getEntry(fileName);
+/*     */     
+/*  88 */     if (entry == null)
+/*     */     {
+/*  90 */       throw new java.io.FileNotFoundException("cannot find file: " + fileName + " in archive: " + zipFile.getName());
+/*     */     }
+/*     */     
+/*  93 */     java.io.InputStream zipStream = zipFile.getInputStream(entry);
+/*  94 */     java.io.OutputStream fileStream = null;
+/*     */     
+/*     */ 
+/*     */ 
+/*     */ 
+/*     */     try
+/*     */     {
+/* 101 */       fileStream = new java.io.FileOutputStream(tempFile);
+/* 102 */       byte[] buf = new byte['Ѐ'];
+/* 103 */       int i = 0;
+/*     */       
+/* 105 */       while ((i = zipStream.read(buf)) != -1)
+/*     */       {
+/* 107 */         fileStream.write(buf, 0, i);
+/*     */       }
+/*     */     }
+/*     */     finally
+/*     */     {
+/* 112 */       close(zipStream);
+/* 113 */       close(fileStream);
+/*     */     }
+/*     */     
+/* 116 */     return tempFile.toURI();
+/*     */   }
+/*     */   
+/*     */   private static void close(java.io.Closeable stream)
+/*     */   {
+/* 121 */     if (stream != null)
+/*     */     {
+/*     */       try
+/*     */       {
+/* 125 */         stream.close();
+/*     */       }
+/*     */       catch (IOException e)
+/*     */       {
+/* 129 */         StringWriter errors = new StringWriter();
+/* 130 */         e.printStackTrace(new java.io.PrintWriter(errors));
+/* 131 */         DebugLogger.log(errors.toString(), Level.SEVERE);
+/*     */       }
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   public static void unpackFiles() {
+/* 137 */     URI uri = null;
+/*     */     
+/*     */     try
+/*     */     {
+/* 141 */       uri = getJarURI();
+/*     */     }
+/*     */     catch (java.net.URISyntaxException e) {
+/* 144 */       StringWriter errors = new StringWriter();
+/* 145 */       e.printStackTrace(new java.io.PrintWriter(errors));
+/* 146 */       DebugLogger.log(errors.toString(), Level.SEVERE); }
+/*     */     try { URI exe;
+/*     */       URI exe;
+/* 149 */       if (DetectOS.isWindows()) {
+/* 150 */         exe = getFile(uri, "make_cdn_cia.exe");
+/*     */       } else {
+/*     */         URI exe;
+/* 153 */         if (DetectOS.isMac()) {
+/* 154 */           exe = getFile(uri, "make_cdn_cia_mac");
+/*     */         }
+/*     */         else
+/*     */         {
+/* 158 */           exe = getFile(uri, "make_cdn_cia_linux");
+/* 159 */           URI exe2 = getFile(uri, "/tools/ctrtool_linux");
+/* 160 */           URI localURI1 = getFile(uri, "/tools/makerom_linux");
+/*     */         } }
+/* 162 */       make_cdn = exe.toString().substring(6);
+/*     */ 
+/*     */     }
+/*     */     catch (java.util.zip.ZipException e)
+/*     */     {
+/* 167 */       StringWriter errors = new StringWriter();
+/* 168 */       e.printStackTrace(new java.io.PrintWriter(errors));
+/* 169 */       DebugLogger.log(errors.toString(), Level.SEVERE);
+/*     */     }
+/*     */     catch (IOException e) {
+/* 172 */       StringWriter errors = new StringWriter();
+/* 173 */       e.printStackTrace(new java.io.PrintWriter(errors));
+/* 174 */       DebugLogger.log(errors.toString(), Level.SEVERE);
+/*     */     }
+/*     */   }
+/*     */ }
 
-import java.io.*;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URL;
-import java.security.CodeSource;
-import java.security.ProtectionDomain;
-import java.util.logging.Level;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipException;
-import java.util.zip.ZipFile;
 
-public class Tools {
-private static String make_cdn, ctrtool, makerom;
-	
-	public static String getMakeCDN(){
-		return make_cdn;
-	}
-
-	public static String getCtrtool(){
-		return ctrtool;
-	}
-
-	public static String getMakerom(){
-		return makerom;
-	}
-	
-	private static URI getJarURI() throws URISyntaxException
-	    {
-	        final ProtectionDomain domain;
-	        final CodeSource source;
-	        final URL url;
-	        final URI uri;
-
-	        domain = Main.class.getProtectionDomain();
-	        source = domain.getCodeSource();
-	        url    = source.getLocation();
-	        uri    = url.toURI();
-
-	        return (uri);
-	    }
-
-	    private static URI getFile(final URI where, final String fileName)throws ZipException, IOException
-	    {
-	        final File location;
-	        final URI fileURI;
-
-	        location = new File(where);
-
-	        // not in a JAR, just return the path on disk
-	        if(location.isDirectory())
-	        {
-	            fileURI = URI.create(where.toString() + fileName);
-	        }
-	        else
-	        {
-	            final ZipFile zipFile;
-
-	            zipFile = new ZipFile(location);
-
-	            try
-	            {
-	                fileURI = extract(zipFile, fileName);
-	            }
-	            finally
-	            {
-	                zipFile.close();
-	            }
-	        }
-
-	        return (fileURI);
-	    }
-
-	    private static URI extract(final ZipFile zipFile,
-								   final String fileName)
-	        throws IOException
-	    {
-	        final File tempFile;
-	        final ZipEntry entry;
-	        final InputStream zipStream;
-	        OutputStream fileStream;
-
-	        tempFile = File.createTempFile(fileName, Long.toString(System.currentTimeMillis()));
-	        tempFile.deleteOnExit();
-	        entry    = zipFile.getEntry(fileName);
-
-	        if(entry == null)
-	        {
-	            throw new FileNotFoundException("cannot find file: " + fileName + " in archive: " + zipFile.getName());
-	        }
-
-	        zipStream  = zipFile.getInputStream(entry);
-	        fileStream = null;
-
-	        try
-	        {
-	            final byte[] buf;
-	            int          i;
-
-	            fileStream = new FileOutputStream(tempFile);
-	            buf        = new byte[1024];
-	            i          = 0;
-
-	            while((i = zipStream.read(buf)) != -1)
-	            {
-	                fileStream.write(buf, 0, i);
-	            }
-	        }
-	        finally
-	        {
-	            close(zipStream);
-	            close(fileStream);
-	        }
-
-	        return (tempFile.toURI());
-	    }
-
-	    private static void close(final Closeable stream)
-	    {
-	        if(stream != null)
-	        {
-	            try
-	            {
-	                stream.close();
-	            }
-	            catch(final IOException e)
-	            {
-					StringWriter errors = new StringWriter();
-					e.printStackTrace(new PrintWriter(errors));
-					DebugLogger.log(errors.toString(), Level.SEVERE);
-	            }
-	        }
-	    }
-	    
-	    public static void unpackFiles(){
-	    	URI uri = null;
-	        final URI exe, exe2, exe3;
-
-	        try {
-				uri = getJarURI();
-			} catch (URISyntaxException e) {
-				// TODO Auto-generated catch block
-				StringWriter errors = new StringWriter();
-				e.printStackTrace(new PrintWriter(errors));
-				DebugLogger.log(errors.toString(), Level.SEVERE);
-			}
-	        try {
-	        	if(DetectOS.isWindows()){
-	        		exe = getFile(uri, "make_cdn_cia.exe");
-					//exe2 = getFile(uri, "/tools/ctrtool.exe");
-					//exe3 = getFile(uri, "/tools/makerom.exe");
-	        	}else if(DetectOS.isMac()){
-	        		exe = getFile(uri, "make_cdn_cia_mac");
-					//exe2 = getFile(uri, "/tools/ctrtool_mac");
-					//exe3 = getFile(uri, "/tools/makerom_mac");
-	        	}else{
-	        		exe = getFile(uri, "make_cdn_cia_linux");
-					exe2 = getFile(uri, "/tools/ctrtool_linux");
-					exe3 = getFile(uri, "/tools/makerom_linux");
-	        	}
-				make_cdn = exe.toString().substring(6);
-				//ctrtool = exe2.toString().substring(6);
-				//makerom = exe3.toString().substring(6);
-			} catch (ZipException e) {
-				// TODO Auto-generated catch block
-				StringWriter errors = new StringWriter();
-				e.printStackTrace(new PrintWriter(errors));
-				DebugLogger.log(errors.toString(), Level.SEVERE);
-			} catch (IOException e) {
-				// TODO Auto-generated catch block
-				StringWriter errors = new StringWriter();
-				e.printStackTrace(new PrintWriter(errors));
-				DebugLogger.log(errors.toString(), Level.SEVERE);
-			}
-	        
-	    }
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\Tools.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/CDNFXController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/CDNFXController.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/CDNFXController.java	(revision )
@@ -1,1862 +1,1 @@
-package groovycia2;
-
-import javafx.application.Platform;
-import javafx.collections.FXCollections;
-import javafx.collections.ObservableList;
-import javafx.collections.transformation.FilteredList;
-import javafx.collections.transformation.SortedList;
-import javafx.embed.swing.SwingFXUtils;
-import javafx.event.ActionEvent;
-import javafx.event.EventHandler;
-import javafx.fxml.FXML;
-import javafx.fxml.FXMLLoader;
-import javafx.fxml.Initializable;
-import javafx.scene.Parent;
-import javafx.scene.Scene;
-import javafx.scene.control.*;
-import javafx.scene.control.Button;
-import javafx.scene.control.Label;
-import javafx.scene.control.MenuItem;
-import javafx.scene.control.TextArea;
-import javafx.scene.control.TextField;
-import javafx.scene.control.cell.TextFieldTableCell;
-import javafx.scene.image.*;
-import javafx.scene.image.Image;
-import javafx.scene.input.MouseEvent;
-import javafx.scene.layout.BorderPane;
-import javafx.scene.layout.HBox;
-import javafx.stage.*;
-import javax.imageio.ImageIO;
-import java.awt.*;
-import java.awt.image.BufferedImage;
-import java.io.*;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URL;
-import java.util.*;
-import java.util.List;
-import java.util.logging.Level;
-
-public class CDNFXController implements Initializable {
-
-    @FXML
-    private BorderPane mainPane;
-
-    @FXML
-    private MenuItem menuTMOpenTicketDB,
-            menuTMSelectOutputFolder,
-            menuTDSelectOutputfolder,
-            menuClose,
-            menuSettings,
-            menuWebsite,
-            menuThread,
-            menuTDSelectTikOutputfolder;
-
-    @FXML
-    private Tab tabTM,
-            tabTDA,
-            tabTDM,
-            tabTBV,
-            tabCIAT,
-            tabSocketPunch;
-
-    @FXML
-    private Label lblTMTicketCount,
-            lblTMUniqueTicketCount,
-            lblTMDuplicatesTicketCount,
-            lblTMSystemTicketCount,
-            lblTMEShopTicketCount,
-            lblTMUniqueEShopTicketCount,
-            lblTMEShopDuplicatesCount,
-            lblTMTicketNotFromYourEShopCount,
-            lblTMTitleCount,
-            lblTMAttemptCount,
-            lblTMFailedCount,
-            lblTMTitleID,
-            lblTMTMD,
-            lblTMFilesCount,
-            lblTMDownloadStats,
-            lblTMTitleName,
-            lblTDATotalCount,
-            lblTDAeShopCount,
-            lblTDADemoCount,
-            lblTDAUpdatesCount,
-            lblTDADLPCount,
-            lblTDADLCCount,
-            lblTDADSiWareCount,
-            lblTDADSiSysAppsCount,
-            lblTDADSiSysDataCount,
-            lblTDASystemCount,
-            lblTDATitleCount,
-            lblTDAAttemptCount,
-            lblTDAFailedCount,
-            lblTDATitleID,
-            lblTDATMD,
-            lblTDAFilesCount,
-            lblTDADownloadStats,
-            lblTDATitleName,
-            lblTDMTitleCount,
-            lblTDMAttemptCount,
-            lblTDMFailedCount,
-            lblTDMTitleID,
-            lblTDMTMD,
-            lblTDMFilesCount,
-            lblTDMDownloadStats,
-            lblTDVTotalCount,
-            lblTDVeShopAppCount,
-            lblTDVDemoCount,
-            lblTDVUpdatesCount,
-            lblTDVDLPCount,
-            lblTDVDLCCount,
-            lblTDVDSiWareCount,
-            lblTDVDSiSysAppsCount,
-            lblTDVDSiSysDataCount,
-            lblTDVSystemCount,
-            lblCIATFiles,
-            lblCIATMode,
-            lblTDMTitleName;
-
-    @FXML
-    private ListView listTMCategory,
-            listTDACategory,
-            listTDVCategory;
-
-    @FXML
-    private TableView tableTMTickets,
-            tableTDATickets,
-            tableTDVTickets;
-
-    @FXML
-    private TableColumn<Ticket, String> columnTMName,
-            columnTMRegion,
-            columnTMSerial,
-            columnTMType,
-            columnTMTitleID,
-            columnTMConsoleID,
-            columnTDAName,
-            columnTDARegion,
-            columnTDASerial,
-            columnTDAType,
-            columnTDATitleID,
-            columnTDVName,
-            columnTDVRegion,
-            columnTDVSerial,
-            columnTDVType,
-            columnTDVTitleID;
-
-    @FXML
-    private TableColumn<Ticket, Boolean> columnTMDL,
-            columnTDADL;
-
-    @FXML
-    private TextField textTMSearch,
-            textTDASearch,
-            textTDMTitleID,
-            textTDMEncryptedTitleKey,
-            textTDVSearch,
-            textCIATUnpackCIA,
-            textCIATUnpackOutputFolder,
-            textCIATRepackInputFolder,
-            textCIATRepackOutputCIA,
-            textCIATPatchCIA,
-            textCIATPatchManual,
-            textCIATPatchIcon;
-
-    @FXML
-    private CheckBox chbxTMBuildCIA,
-            chbxTMPatchDLC,
-            chbxTMPatchDemo,
-            chbxTMPersonal,
-            chbxTDAGenTickets;
-
-    @FXML
-    private Button btnTMDownload,
-            btnTDADownload,
-            btnTDAOpenFile,
-            btnTDMDownload,
-            btnCIATStart,
-            btnCIATUnpackCIA,
-            btnCIATUnpackOutputFolder,
-            btnCIATRepackInputFolder,
-            btnCIATRepackCIAOutput,
-            btnCIATPatchCIA,
-            btnCIATPatchManual,
-            btnCIATPatchIcon,
-            btnTDMGenTicket,
-            btnRebuildRawContent,
-            btnTDARebuildRawContent,
-            btnTDAGenTickets;
-
-    @FXML
-    private ProgressBar progressbarTMDownload,
-            progressbarTDADownload,
-            progressbarTDMDownload,
-            progressCIATProgress;
-
-    @FXML
-    private ImageView imgvTMIcon,
-            imgvTDAIcon,
-            imgvTDMIcon;
-
-    @FXML
-    private CheckBox chbxTDABuildCIA,
-            chbxTDAPatchDLC,
-            chbxTDAPatchDemo,
-            chbxTDMBuildCIA,
-            chbxTDMPatchDLC,
-            chbxTDMPatchDemo;
-
-    @FXML
-    private TextArea textAreaCIATLog;
-
-    @FXML
-    private RadioButton rbCIATUnpack,
-            rbCIATRepack,
-            rbCIATPatch;
-
-    private String tmdbpath = "", tmoutputpath = "", tdapath = "", tdaoutputpath = "", tdtikoutputpath = "";
-    private ObservableList<Ticket> tmDownloadList = FXCollections.observableArrayList();
-    private ObservableList<Ticket> tdaDownloadList = FXCollections.observableArrayList();
-    private SortedList<Ticket> tmSortedList;
-    private SortedList<Ticket> tdaSortedList;
-    private SortedList<Ticket> tdvSortedList;
-
-    private Downloader dl;
-    private XMLHandler xml_handler = new XMLHandler(null);
-
-    private MenuItem tmMnuAddAllToDownloadList;
-    private MenuItem tmMnuRemoveAllFromDownloadList;
-
-    private MenuItem tdaMnuAddAllToDownloadList;
-    private MenuItem tdaMnuRemoveAllFromDownloadList;
-
-    private CDNFXController cdnfxController;
-
-    public void initialize(URL location, ResourceBundle resources){
-        XMLUpdater xmlu = new XMLUpdater();
-        if(xmlu.checkForUpdates())
-            xmlu.update();
-        initProperties();
-        initDatabaseViewer();
-    }
-
-    public void setCdnfxController(CDNFXController cdnfxController){
-        this.cdnfxController = cdnfxController;
-    }
-
-    public void initProperties(){
-        try{
-            PropertiesHandler.createFile();
-            if(PropertiesHandler.getTMInputPath() != null && PropertiesHandler.getTMInputPath().length() > 1){
-                tmdbpath = PropertiesHandler.getTMInputPath();
-                tmOpenTicketDB();
-                DebugLogger.log("INIT: Ticket.db opened", Level.INFO);
-            }
-            if(PropertiesHandler.getTMOutputPath() != null && PropertiesHandler.getTMOutputPath().length() > 1){
-                tmoutputpath = PropertiesHandler.getTMOutputPath();
-                btnRebuildRawContent.setDisable(false);
-                DebugLogger.log("INIT: TM Outputfolder setted", Level.INFO);
-            }
-            if(PropertiesHandler.getTDAInputPath() != null && PropertiesHandler.getTDAInputPath().length() > 1){
-                tdapath = PropertiesHandler.getTDAInputPath();
-                tdaOpenFile();
-                DebugLogger.log("INIT: TD encTitleKeys.bin opened", Level.INFO);
-            }
-            if(PropertiesHandler.getTDOutputPath() != null && PropertiesHandler.getTDOutputPath().length() > 1){
-                tdaoutputpath = PropertiesHandler.getTDOutputPath();
-                btnTDARebuildRawContent.setDisable(false);
-                DebugLogger.log("INIT: TD Outputfolder setted", Level.INFO);
-            }
-            if(PropertiesHandler.getTDTikPath() != null && PropertiesHandler.getTDOutputPath().length() > 1){
-                tdtikoutputpath = PropertiesHandler.getTDTikPath();
-                DebugLogger.log("INIT: TD .tik Outputfolder setted", Level.INFO);
-            }
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-    private void initDatabaseViewer(){
-        ObservableList<Ticket> titlelist;
-
-        DebugLogger.log("INIT: Init Titledatabase Viewer", Level.INFO);
-
-        titlelist = xml_handler.readCommunityXMLFile(true);
-        tdvUpdateCounters(titlelist);
-
-        tableTDVTickets.setEditable(true);
-        tableTDVTickets.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
-
-        //TABLEFILTER
-        TDVTableFilter.filteredTickets = new FilteredList<>(titlelist, t -> true);
-        tdvSortedList = new SortedList<>(TDVTableFilter.createTableFilter(textTDVSearch, listTDVCategory));
-        tdvSortedList.comparatorProperty().bind(tableTDVTickets.comparatorProperty());
-        tableTDVTickets.setItems(tdvSortedList);
-
-        if(DetectOS.isMac()){
-            columnTDVTitleID.setMinWidth(144.57);
-            columnTDVTitleID.setMaxWidth(144.57);
-            columnTDVType.setMinWidth(82.57);
-            columnTDVType.setMaxWidth(82.57);
-            columnTDVSerial.setMinWidth(89.57);
-            columnTDVSerial.setMaxWidth(89.57);
-            columnTDVRegion.setMinWidth(44.57);
-            columnTDVRegion.setMaxWidth(44.57);
-            columnTDVName.setPrefWidth(149.57);
-            columnTDVName.setMinWidth(149.57);
-        }else{
-            columnTDVTitleID.setMinWidth(120.0);
-            columnTDVTitleID.setMaxWidth(120.0);
-            columnTDVType.setMinWidth(80.0);
-            columnTDVType.setMaxWidth(80.0);
-            columnTDVSerial.setMinWidth(80);
-            columnTDVSerial.setMaxWidth(80);
-            columnTDVRegion.setMinWidth(50);
-            columnTDVRegion.setMaxWidth(50);
-        }
-
-        columnTDVName.setCellValueFactory(cellData -> cellData.getValue().nameProperty());
-        columnTDVRegion.setCellValueFactory(cellData -> cellData.getValue().regionProperty());
-        columnTDVSerial.setCellValueFactory(cellData -> cellData.getValue().serialProperty());
-        columnTDVType.setCellValueFactory(cellData -> cellData.getValue().typeProperty());
-        columnTDVTitleID.setCellValueFactory(cellData -> cellData.getValue().titleidProperty());
-
-        columnTDVName.setCellFactory(TextFieldTableCell.forTableColumn());
-        columnTDVRegion.setCellFactory(TextFieldTableCell.forTableColumn());
-        columnTDVSerial.setCellFactory(TextFieldTableCell.forTableColumn());
-        columnTDVTitleID.setCellFactory(TextFieldTableCell.forTableColumn());
-
-        columnTDVName.setEditable(false);
-        columnTDVRegion.setEditable(false);
-        columnTDVSerial.setEditable(false);
-
-        columnTDVTitleID.setOnEditCommit(
-                new EventHandler<TableColumn.CellEditEvent<Ticket, String>>() {
-                    public void handle(TableColumn.CellEditEvent<Ticket, String> t) {
-                        Ticket ticket = ((Ticket) t.getTableView().getItems().get(t.getTablePosition().getRow()));
-                        ((Ticket) t.getTableView().getItems().get(
-                                t.getTablePosition().getRow())
-                        ).setTitleID(t.getOldValue());
-                    }
-                }
-        );
-
-        textTDVSearch.setDisable(false);
-
-        DebugLogger.log("INIT: Titledatabase Viewer initialized!", Level.INFO);
-    }
-
-    private void tdvUpdateCounters(ObservableList<Ticket> titlelist){
-        int i = 0;
-        List<Integer> apptypeCount = Arrays.asList(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);  // es-app, dlp, demo, upd-p, dlc, dsiw, dsisys, dsidat, sys, myst, any
-
-        //SET TYPES
-        for(Ticket tiktik: titlelist){
-            String titleid = tiktik.getTitleID();
-            String typecheck = titleid.substring(4, 8).toLowerCase();
-
-            if(typecheck.equals("0000")){
-                tiktik.setType(Ticket.Type.ESHOP);
-                apptypeCount.set(0, apptypeCount.get(0)+1);
-            }else if(typecheck.equals("0001")){
-                tiktik.setType(Ticket.Type.DLP);
-                apptypeCount.set(1, apptypeCount.get(1)+1);
-            }else if(typecheck.equals("0002")){
-                tiktik.setType(Ticket.Type.DEMO);
-                apptypeCount.set(2, apptypeCount.get(2)+1);
-            }else if(typecheck.equals("000e")){
-                tiktik.setType(Ticket.Type.UPDATE);
-                apptypeCount.set(3, apptypeCount.get(3)+1);
-            }else if(typecheck.equals("008c")){
-                tiktik.setType(Ticket.Type.DLC);
-                apptypeCount.set(4, apptypeCount.get(4)+1);
-            }else if(typecheck.equals("8004")){
-                tiktik.setType(Ticket.Type.DSIWARE);
-                apptypeCount.set(5, apptypeCount.get(5)+1);
-            }else if(((Long.parseLong(typecheck, 16)) & 0x10) == 0x10){
-                tiktik.setType(Ticket.Type.SYSTEM);
-                apptypeCount.set(8, apptypeCount.get(8)+1);
-            }else if(typecheck.equals("8005")){
-                tiktik.setType(Ticket.Type.DSISYSAPP);
-                apptypeCount.set(6, apptypeCount.get(6)+1);
-            }else if(typecheck.equals("800f")){
-                tiktik.setType(Ticket.Type.DSISYSDAT);
-                apptypeCount.set(7, apptypeCount.get(7)+1);
-            }else{
-                tiktik.setType(Ticket.Type.MYSTERY);
-                apptypeCount.set(9, apptypeCount.get(9)+1);
-            }
-        }
-
-        lblTDVTotalCount.setText(Integer.toString(titlelist.size()));
-        for(int ticketcount:apptypeCount){
-            switch (i){
-                case 0:
-                    lblTDVeShopAppCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 1:
-                    lblTDVDLPCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 2:
-                    lblTDVDemoCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 3:
-                    lblTDVUpdatesCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 4:
-                    lblTDVDLCCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 5:
-                    lblTDVDSiWareCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 6:
-                    lblTDVDSiSysAppsCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 7:
-                    lblTDVDSiSysDataCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 8:
-                    lblTDVSystemCount.setText(Integer.toString(ticketcount));
-                    break;
-            }
-            i++;
-        }
-
-        listTDVCategory.getItems().removeAll();
-        listTDVCategory.getItems().add("All");
-        listTDVCategory.getItems().add("eShopApp");
-        listTDVCategory.getItems().add("DownloadPlayChild");
-        listTDVCategory.getItems().add("Demo");
-        listTDVCategory.getItems().add("UpdatePatch");
-        listTDVCategory.getItems().add("DLC");
-        listTDVCategory.getItems().add("DSiWare");
-        listTDVCategory.getItems().add("DSiSystemApp");
-        listTDVCategory.getItems().add("DSiSystemData");
-        listTDVCategory.getItems().add("System");
-
-        listTDVCategory.getSelectionModel().select(0);
-
-    }
-
-    private void tmUpdateCounters(TicketHandler th){
-        int i = 0;
-        int final_count = 0;
-        List<Integer> ticket_c = th.getTicketCount();
-
-        for(int ticketcount:ticket_c){
-            switch (i){
-                case 0:
-                    lblTMTicketCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 1:
-                    lblTMUniqueTicketCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 2:
-                    lblTMDuplicatesTicketCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 3:
-                    lblTMSystemTicketCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 4:
-                    lblTMEShopTicketCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 5:
-                    lblTMUniqueEShopTicketCount.setText(Integer.toString(ticketcount));
-                case 6:
-                    lblTMEShopDuplicatesCount.setText(Integer.toString(ticketcount));
-                case 7:
-                    lblTMTicketNotFromYourEShopCount.setText(Integer.toString(ticketcount));
-                    break;
-            }
-            i++;
-        }
-
-        List<Integer> apptype = th.getApptypeCount();
-
-        for (int ticketcount:apptype)
-            final_count += ticketcount;
-
-        listTMCategory.getItems().clear();
-
-        tmMnuAddAllToDownloadList = new MenuItem("Add all Titles of this category to downloadlist");
-        tmMnuRemoveAllFromDownloadList = new MenuItem("Remove all Titles of this category from downloadlist");
-
-        tmMnuAddAllToDownloadList.setOnAction((ActionEvent event) -> {
-            String type = "";
-
-            boolean sys, nonunique;
-            sys = false;
-            nonunique = false;
-
-            tmDownloadList.clear();
-
-            if(PropertiesHandler.getProperties("downloadsystemtitles") != null){
-                sys = PropertiesHandler.getProperties("downloadsystemtitles").equals("yes");
-            }
-            if(PropertiesHandler.getProperties("downloadnonuniquetitles") != null){
-                nonunique = PropertiesHandler.getProperties("downloadnonuniquetitles").equals("yes");
-            }
-
-            switch (listTMCategory.getSelectionModel().getSelectedIndex()){
-                case 0:
-                    type = "All";
-                    break;
-                case 1:
-                    type = "eShopApp";
-                    break;
-                case 2:
-                    type = "DownloadPlayChild";
-                    break;
-                case 3:
-                    type = "Demo";
-                    break;
-                case 4:
-                    type = "UpdatePatch";
-                    break;
-                case 5:
-                    type = "DLC";
-                    break;
-                case 6:
-                    type = "DSiWare";
-                    break;
-                case 7:
-                    type = "DSiSystemApp";
-                    break;
-                case 8:
-                    type = "DSiSystemData";
-                    break;
-                case 9:
-                    type = "System";
-                    break;
-                case 10:
-                    type = "Mystery";
-                    break;
-            }
-
-            for(Ticket ticket:tmSortedList){
-                if(type.equals("All")){
-                    if(ticket.getType().equals("System")){
-                        if(sys){
-                            ticket.setDownload(true);
-                            tmDownloadList.add(ticket);
-                        }
-                    }else{
-                        if(ticket.getConsoleID().equals("00000000")){
-                            if(nonunique){
-                                ticket.setDownload(true);
-                                tmDownloadList.add(ticket);
-                            }
-                        }else{
-                            ticket.setDownload(true);
-                            tmDownloadList.add(ticket);
-                        }
-                    }
-                }else if(type.equals("System")){
-                    if(sys){
-                        ticket.setDownload(true);
-                        tmDownloadList.add(ticket);
-                    }
-                }else{
-                    if(type.equals(ticket.getType())){
-                        if(nonunique){
-                            ticket.setDownload(true);
-                            tmDownloadList.add(ticket);
-                        }else{
-                            if(!ticket.getConsoleID().equals("00000000")){
-                                ticket.setDownload(true);
-                                tmDownloadList.add(ticket);
-                            }
-                        }
-                    }
-                }
-            }
-        });
-
-        tmMnuRemoveAllFromDownloadList.setOnAction((ActionEvent event)->{
-            String type = "";
-
-            switch (listTMCategory.getSelectionModel().getSelectedIndex()){
-                case 0:
-                    type = "All";
-                    break;
-                case 1:
-                    type = "eShopApp";
-                    break;
-                case 2:
-                    type = "DownloadPlayChild";
-                    break;
-                case 3:
-                    type = "Demo";
-                    break;
-                case 4:
-                    type = "UpdatePatch";
-                    break;
-                case 5:
-                    type = "DLC";
-                    break;
-                case 6:
-                    type = "DSiWare";
-                    break;
-                case 7:
-                    type = "DSiSystemApp";
-                    break;
-                case 8:
-                    type = "DSiSystemData";
-                    break;
-                case 9:
-                    type = "System";
-                    break;
-                case 10:
-                    type = "Mystery";
-                    break;
-            }
-
-            for(Ticket ticket:tmSortedList){
-                if(type.equals(ticket.getType())){
-                    tmDownloadList.remove(ticket);
-                    ticket.setDownload(false);
-                }else if(type.equals("All")){
-                    tmDownloadList.remove(ticket);
-                    ticket.setDownload(false);
-                }
-            }
-        });
-
-        listTMCategory.setContextMenu(new ContextMenu(tmMnuAddAllToDownloadList, tmMnuRemoveAllFromDownloadList));
-        listTMCategory.getItems().add("All (" + final_count + ")");
-        i = 0;
-
-        for(int apptypecount:apptype){
-            switch(i){
-                case 0:
-                    listTMCategory.getItems().add("eShopApp (" + apptypecount + ")");
-                    break;
-                case 1:
-                    listTMCategory.getItems().add("DownloadPlayChild (" + apptypecount + ")");
-                    break;
-                case 2:
-                    listTMCategory.getItems().add("Demo (" + apptypecount + ")");
-                    break;
-                case 3:
-                    listTMCategory.getItems().add("UpdatePatch (" + apptypecount + ")");
-                    break;
-                case 4:
-                    listTMCategory.getItems().add("DLC (" + apptypecount + ")");
-                    break;
-                case 5:
-                    listTMCategory.getItems().add("DSiWare (" + apptypecount + ")");
-                    break;
-                case 6:
-                    listTMCategory.getItems().add("DSiSystemApp (" + apptypecount + ")");
-                    break;
-                case 7:
-                    listTMCategory.getItems().add("DSiSystemData (" + apptypecount + ")");
-                    break;
-                case 8:
-                    listTMCategory.getItems().add("System (" + apptypecount + ")");
-                    break;
-                case 9:
-                    listTMCategory.getItems().add("Mystery (" + apptypecount + ")");
-                    break;
-            }
-            i++;
-        }
-        listTMCategory.getSelectionModel().select(0);
-    }
-
-    private void tdaUpdateCounters(EncTitleKeysHandler ehandler){
-        int i = 0;
-        int final_count = 0;
-        List<Integer> apptype = ehandler.getApptypeCount();
-
-        for (int titlecount:apptype)
-            final_count += titlecount;
-
-        listTDACategory.getItems().clear();
-
-        tdaMnuAddAllToDownloadList = new MenuItem("Add all Titles of this category to downloadlist");
-        tdaMnuRemoveAllFromDownloadList = new MenuItem("Remove all Titles of this category from downloadlist");
-
-        tdaMnuAddAllToDownloadList.setOnAction((ActionEvent event) ->{
-            String type = "";
-            tdaDownloadList.clear();
-
-            switch (listTDACategory.getSelectionModel().getSelectedIndex()){
-                case 0:
-                    type = "All";
-                    break;
-                case 1:
-                    type = "eShopApp";
-                    break;
-                case 2:
-                    type = "DownloadPlayChild";
-                    break;
-                case 3:
-                    type = "Demo";
-                    break;
-                case 4:
-                    type = "UpdatePatch";
-                    break;
-                case 5:
-                    type = "DLC";
-                    break;
-                case 6:
-                    type = "DSiWare";
-                    break;
-                case 7:
-                    type = "DSiSystemApp";
-                    break;
-                case 8:
-                    type = "DSiSystemData";
-                    break;
-                case 9:
-                    type = "System";
-                    break;
-                case 10:
-                    type = "Mystery";
-                    break;
-            }
-
-            for(Ticket title:tdaSortedList){
-                if(type.equals("All")){
-                    title.setDownload(true);
-                    tdaDownloadList.add(title);
-                }else{
-                    if(type.equals(title.getType())){
-                        title.setDownload(true);
-                        tdaDownloadList.add(title);
-                    }
-                }
-            }
-        });
-
-        tdaMnuRemoveAllFromDownloadList.setOnAction((ActionEvent event) ->{
-            String type = "";
-
-            switch (listTDACategory.getSelectionModel().getSelectedIndex()){
-                case 0:
-                    type = "All";
-                    break;
-                case 1:
-                    type = "eShopApp";
-                    break;
-                case 2:
-                    type = "DownloadPlayChild";
-                    break;
-                case 3:
-                    type = "Demo";
-                    break;
-                case 4:
-                    type = "UpdatePatch";
-                    break;
-                case 5:
-                    type = "DLC";
-                    break;
-                case 6:
-                    type = "DSiWare";
-                    break;
-                case 7:
-                    type = "DSiSystemApp";
-                    break;
-                case 8:
-                    type = "DSiSystemData";
-                    break;
-                case 9:
-                    type = "System";
-                    break;
-                case 10:
-                    type = "Mystery";
-                    break;
-            }
-
-            for(Ticket title:tdaSortedList){
-                if(type.equals(title.getType())){
-                    tdaDownloadList.remove(title);
-                    title.setDownload(false);
-                }else if(type.equals("All")){
-                    tdaDownloadList.remove(title);
-                    title.setDownload(false);
-                }
-            }
-
-        });
-
-        lblTDATotalCount.setText(Integer.toString(ehandler.getTitleList().size()));
-        for(int ticketcount:apptype){
-            switch (i){
-                case 0:
-                    lblTDAeShopCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 1:
-                    lblTDADLPCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 2:
-                    lblTDADemoCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 3:
-                    lblTDAUpdatesCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 4:
-                    lblTDADLCCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 5:
-                    lblTDADSiWareCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 6:
-                    lblTDADSiSysAppsCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 7:
-                    lblTDADSiSysDataCount.setText(Integer.toString(ticketcount));
-                    break;
-                case 8:
-                    lblTDASystemCount.setText(Integer.toString(ticketcount));
-                    break;
-            }
-            i++;
-        }
-
-        listTDACategory.setContextMenu(new ContextMenu(tdaMnuAddAllToDownloadList, tdaMnuRemoveAllFromDownloadList));
-
-        listTDACategory.getItems().removeAll();
-        listTDACategory.getItems().add("All");
-        listTDACategory.getItems().add("eShopApp");
-        listTDACategory.getItems().add("DownloadPlayChild");
-        listTDACategory.getItems().add("Demo");
-        listTDACategory.getItems().add("UpdatePatch");
-        listTDACategory.getItems().add("DLC");
-        listTDACategory.getItems().add("DSiWare");
-        listTDACategory.getItems().add("DSiSystemApp");
-        listTDACategory.getItems().add("DSiSystemData");
-        listTDACategory.getItems().add("System");
-
-        listTDACategory.getSelectionModel().select(0);
-
-    }
-
-    private void tmOpenTicketDB() throws Exception{
-        TicketHandler thandler = new TicketHandler();
-        ObservableList<Ticket> ticketlist;
-
-        thandler.openFile(tmdbpath);
-        thandler.addToTicketList();
-        thandler.countTickets();
-        thandler.sortTickets();
-
-        //DATABASE
-        xml_handler.setTicketList(thandler.getTicketList());
-        ticketlist = xml_handler.readCommunityXMLFile(false);
-
-        if(ticketlist == null){
-            ticketlist = thandler.getTicketList();
-        }
-
-        tmUpdateCounters(thandler);
-
-        tableTMTickets.setEditable(true);
-        tableTMTickets.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
-
-        //TABLEFILTER
-        TMTableFilter.filteredTickets = new FilteredList<>(ticketlist, t -> true);
-        tmSortedList = new SortedList<>(TMTableFilter.createTableFilter(textTMSearch, listTMCategory));
-        tmSortedList.comparatorProperty().bind(tableTMTickets.comparatorProperty());
-        tableTMTickets.setItems(tmSortedList);
-
-        //DOUBLECLICK
-        tableTMTickets.setOnMouseClicked((MouseEvent click) ->{
-            Ticket ticket = tmSortedList.get(tableTMTickets.getSelectionModel().getSelectedIndex());
-            if(click.getClickCount() == 2){
-                if(!ticket.getDownload()){
-                    boolean sys, nonunique;
-                    sys = false;
-                    nonunique = false;
-
-                    if(PropertiesHandler.getProperties("downloadsystemtitles") != null){
-                        sys = PropertiesHandler.getProperties("downloadsystemtitles").equals("yes");
-                    }
-                    if(PropertiesHandler.getProperties("downloadnonuniquetitles") != null){
-                        nonunique = PropertiesHandler.getProperties("downloadnonuniquetitles").equals("yes");
-                    }
-
-                    if(ticket.getType().equals("System")){
-                        if(sys){
-                            ticket.setDownload(true);
-                            tmDownloadList.add(ticket);
-                        }
-                    }else{
-                        if(ticket.getConsoleID().equals("00000000")){
-                            if(nonunique){
-                                ticket.setDownload(true);
-                                tmDownloadList.add(ticket);
-                            }
-                        }else{
-                            ticket.setDownload(true);
-                            tmDownloadList.add(ticket);
-                        }
-                    }
-                }else{
-                    if(tmDownloadList.contains(ticket)){
-                        tmDownloadList.remove(ticket);
-                        ticket.setDownload(false);
-                    }
-                }
-            }
-
-        });
-
-        if(DetectOS.isMac()){
-            columnTMConsoleID.setMinWidth(81.57);
-            columnTMConsoleID.setMaxWidth(81.57);
-            columnTMTitleID.setMinWidth(144.57);
-            columnTMTitleID.setMaxWidth(144.57);
-            columnTMType.setMinWidth(82.57);
-            columnTMType.setMaxWidth(82.57);
-            columnTMSerial.setMinWidth(89.57);
-            columnTMSerial.setMaxWidth(89.57);
-            columnTMRegion.setMinWidth(44.57);
-            columnTMRegion.setMaxWidth(44.57);
-            columnTMDL.setMaxWidth(25.57);
-            columnTMDL.setMinWidth(25.57);
-            columnTMName.setPrefWidth(149.57);
-            columnTMName.setMinWidth(149.57);
-        }else{
-            columnTMConsoleID.setMinWidth(80.0);
-            columnTMConsoleID.setMaxWidth(80.0);
-            columnTMTitleID.setMinWidth(120.0);
-            columnTMTitleID.setMaxWidth(120.0);
-            columnTMType.setMinWidth(80.0);
-            columnTMType.setMaxWidth(80.0);
-            columnTMSerial.setMinWidth(80);
-            columnTMSerial.setMaxWidth(80);
-            columnTMRegion.setMinWidth(50);
-            columnTMRegion.setMaxWidth(50);
-            columnTMDL.setMaxWidth(20);
-            columnTMDL.setMinWidth(20);
-        }
-
-        columnTMName.setCellValueFactory(cellData -> cellData.getValue().nameProperty());
-        columnTMRegion.setCellValueFactory(cellData -> cellData.getValue().regionProperty());
-        columnTMSerial.setCellValueFactory(cellData -> cellData.getValue().serialProperty());
-        columnTMType.setCellValueFactory(cellData -> cellData.getValue().typeProperty());
-        columnTMTitleID.setCellValueFactory(cellData -> cellData.getValue().titleidProperty());
-        columnTMConsoleID.setCellValueFactory(cellData -> cellData.getValue().consoleidProperty());
-        columnTMDL.setCellValueFactory(cellData -> cellData.getValue().downloadProperty().asObject());
-
-        columnTMName.setCellFactory(TextFieldTableCell.forTableColumn());
-        columnTMRegion.setCellFactory(TextFieldTableCell.forTableColumn());
-        columnTMSerial.setCellFactory(TextFieldTableCell.forTableColumn());
-        columnTMTitleID.setCellFactory(TextFieldTableCell.forTableColumn());
-        columnTMDL.setCellFactory(column -> {
-            return new TableCell<Ticket, Boolean>() {
-                @Override
-                protected void updateItem(Boolean item, boolean empty) {
-                    super.updateItem(item, empty);
-
-                    setText(null);
-
-                    TableRow<Ticket> currentRow = getTableRow();
-
-                    HBox box= new HBox();
-                    box.setSpacing(0);
-                    ImageView imageview = new ImageView();
-                    imageview.setFitHeight(14);
-                    imageview.setFitWidth(14);
-                    imageview.setImage(new Image(Main.class.getResource("/resources/success-icon.png").toString()));
-                    box.getChildren().add(imageview);
-                    setGraphic(null);
-
-                    if (!isEmpty()) {
-                        if(getItem().toString() == "true"){
-                            setGraphic(box);
-                        }
-                    }
-                }
-            };
-        });
-
-        columnTMName.setEditable(false);
-        columnTMRegion.setEditable(false);
-        columnTMSerial.setEditable(false);
-
-        columnTMTitleID.setOnEditCommit(
-                new EventHandler<TableColumn.CellEditEvent<Ticket, String>>() {
-                    public void handle(TableColumn.CellEditEvent<Ticket, String> t) {
-                        Ticket ticket = ((Ticket) t.getTableView().getItems().get(t.getTablePosition().getRow()));
-                        ((Ticket) t.getTableView().getItems().get(
-                                t.getTablePosition().getRow())
-                        ).setTitleID(t.getOldValue());
-                    }
-                }
-        );
-
-        textTMSearch.setDisable(false);
-        btnTMDownload.setDisable(false);
-    }
-
-    private void tdaOpenFile() throws Exception{
-        EncTitleKeysHandler ehandler = new EncTitleKeysHandler();
-        ObservableList<Ticket> titlelist;
-
-        ehandler.openFile(tdapath);
-        ehandler.addToTitleList();
-        ehandler.sortTitles();
-
-        //DATABASE
-        xml_handler.setTicketList(ehandler.getTitleList());
-        titlelist = xml_handler.readCommunityXMLFile(false);
-
-        if(titlelist == null)
-            titlelist = ehandler.getTitleList();
-
-        tdaUpdateCounters(ehandler);
-
-        tableTDATickets.setEditable(true);
-        tableTDATickets.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
-
-        //TABLEFILTER
-        TDATableFilter.filteredTickets = new FilteredList<>(titlelist, t -> true);
-        tdaSortedList = new SortedList<>(TDATableFilter.createTableFilter(textTDASearch, listTDACategory));
-        tdaSortedList.comparatorProperty().bind(tableTDATickets.comparatorProperty());
-        tableTDATickets.setItems(tdaSortedList);
-
-        //DOUBLECLICK
-        tableTDATickets.setOnMouseClicked((MouseEvent click)->{
-            Ticket ticket = tdaSortedList.get(tableTDATickets.getSelectionModel().getSelectedIndex());
-            if(click.getClickCount() == 2){
-                if(!ticket.getDownload()){
-                    ticket.setDownload(true);
-                    tdaDownloadList.add(ticket);
-                }else{
-                    if(tdaDownloadList.contains(ticket)){
-                        tdaDownloadList.remove(ticket);
-                        ticket.setDownload(false);
-                    }
-                }
-            }
-        });
-
-        if(DetectOS.isMac()){
-            columnTDATitleID.setMinWidth(144.57);
-            columnTDATitleID.setMaxWidth(144.57);
-            columnTDAType.setMinWidth(82.57);
-            columnTDAType.setMaxWidth(82.57);
-            columnTDASerial.setMinWidth(89.57);
-            columnTDASerial.setMaxWidth(89.57);
-            columnTDARegion.setMinWidth(44.57);
-            columnTDARegion.setMaxWidth(44.57);
-            columnTDADL.setMaxWidth(25.57);
-            columnTDADL.setMinWidth(25.57);
-            columnTDAName.setPrefWidth(149.57);
-            columnTDAName.setMinWidth(149.57);
-        }else{
-            columnTDATitleID.setMinWidth(120.0);
-            columnTDATitleID.setMaxWidth(120.0);
-            columnTDAType.setMinWidth(80.0);
-            columnTDAType.setMaxWidth(80.0);
-            columnTDASerial.setMinWidth(80);
-            columnTDASerial.setMaxWidth(80);
-            columnTDARegion.setMinWidth(50);
-            columnTDARegion.setMaxWidth(50);
-            columnTDADL.setMaxWidth(20);
-            columnTDADL.setMinWidth(20);
-        }
-
-        columnTDAName.setCellValueFactory(cellData -> cellData.getValue().nameProperty());
-        columnTDARegion.setCellValueFactory(cellData -> cellData.getValue().regionProperty());
-        columnTDASerial.setCellValueFactory(cellData -> cellData.getValue().serialProperty());
-        columnTDAType.setCellValueFactory(cellData -> cellData.getValue().typeProperty());
-        columnTDATitleID.setCellValueFactory(cellData -> cellData.getValue().titleidProperty());
-        columnTDADL.setCellValueFactory(cellData -> cellData.getValue().downloadProperty().asObject());
-
-        columnTDAName.setCellFactory(TextFieldTableCell.forTableColumn());
-        columnTDARegion.setCellFactory(TextFieldTableCell.forTableColumn());
-        columnTDASerial.setCellFactory(TextFieldTableCell.forTableColumn());
-        columnTDATitleID.setCellFactory(TextFieldTableCell.forTableColumn());
-        columnTDADL.setCellFactory(column -> {
-            return new TableCell<Ticket, Boolean>() {
-                @Override
-                protected void updateItem(Boolean item, boolean empty) {
-                    super.updateItem(item, empty);
-
-                    setText(null);
-
-                    TableRow<Ticket> currentRow = getTableRow();
-
-                    HBox box= new HBox();
-                    box.setSpacing(0);
-                    ImageView imageview = new ImageView();
-                    imageview.setFitHeight(14);
-                    imageview.setFitWidth(14);
-                    imageview.setImage(new Image(Main.class.getResource("/resources/success-icon.png").toString()));
-                    box.getChildren().add(imageview);
-                    setGraphic(null);
-
-                    if (!isEmpty()) {
-                        if(getItem().toString() == "true"){
-                            setGraphic(box);
-                        }
-                    }
-                }
-            };
-        });
-
-        columnTDAName.setEditable(false);
-        columnTDARegion.setEditable(false);
-        columnTDASerial.setEditable(false);
-
-        columnTDATitleID.setOnEditCommit(
-                new EventHandler<TableColumn.CellEditEvent<Ticket, String>>() {
-                    public void handle(TableColumn.CellEditEvent<Ticket, String> t) {
-                        Ticket ticket = ((Ticket) t.getTableView().getItems().get(t.getTablePosition().getRow()));
-                        ((Ticket) t.getTableView().getItems().get(
-                                t.getTablePosition().getRow())
-                        ).setTitleID(t.getOldValue());
-                    }
-                }
-        );
-
-        textTDASearch.setDisable(false);
-        btnTDAGenTickets.setDisable(false);
-        btnTDADownload.setDisable(false);
-    }
-
-    //FUNCTIONS
-    @FXML
-    protected void btnCIATClickedStart() {
-
-    }
-
-    @FXML
-    protected void btnCIATPatchClickedCIA() {
-
-    }
-
-    @FXML
-    protected void btnCIATPatchClickedIcon() {
-
-    }
-
-    @FXML
-    protected void btnCIATPatchClickedManual() {
-
-    }
-
-    @FXML
-    protected void btnCIATRepackClickedCIAOutput() {
-
-    }
-
-    @FXML
-    protected void btnCIATRepackClickedInputFolder() {
-
-    }
-
-    @FXML
-    protected void btnCIATUnpackClickedCIA() {
-
-    }
-
-    @FXML
-    protected void btnCIATUnpackClickedOutputFolder() {
-
-    }
-
-    @FXML
-    protected void btnTDAClickedDownload() {
-        if(btnTDADownload.getText().equals("Download")){
-            if(tdaDownloadList.size() > 0){
-                if(tdaoutputpath.length() > 0){
-                    btnTDADownload.setText("Cancel");
-                    btnTDAGenTickets.setDisable(true);
-                    btnTDARebuildRawContent.setDisable(true);
-                    tableTDATickets.setEditable(false);
-                    tdaMnuAddAllToDownloadList.setDisable(true);
-                    tdaMnuRemoveAllFromDownloadList.setDisable(true);
-                    textTDASearch.setDisable(true);
-                    //TABS
-                    tabTM.setDisable(true);
-                    tabTDM.setDisable(true);
-
-                    dl = new Downloader(tdaDownloadList, tdaoutputpath, false);
-                    dl.setPatchDemo(chbxTDAPatchDemo.isSelected());
-                    dl.setPatchDLC(chbxTDAPatchDLC.isSelected());
-                    dl.setBlankID(false);
-                    dl.setComponents(lblTDATitleCount, lblTDAAttemptCount, lblTDAFailedCount, lblTDATitleName, lblTDATitleID, lblTDATMD, lblTDAFilesCount, lblTDADownloadStats, progressbarTDADownload, btnTDADownload, imgvTDAIcon);
-                    dl.setXtraComponents(btnTDARebuildRawContent, tdaMnuAddAllToDownloadList, tdaMnuRemoveAllFromDownloadList, textTDASearch, tableTDATickets);
-                    dl.setTabs(tabTM,tabTDA, tabTDM, tabCIAT, tabSocketPunch);
-                    dl.setGenComponent(btnTDAGenTickets);
-                    dl.start();
-                }else{
-                    Alert warning = new Alert(Alert.AlertType.ERROR);
-                    Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                    stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                    warning.setTitle("Error");
-                    warning.setHeaderText("Outputfolder!");
-                    warning.setContentText("Please choose an outputfolder first!");
-                    warning.showAndWait();
-                }
-            }else{
-                Alert warning = new Alert(Alert.AlertType.ERROR);
-                Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                warning.setTitle("Error");
-                warning.setHeaderText("No Titles selected!");
-                warning.setContentText("Please select at least one title!");
-                warning.showAndWait();
-            }
-        }else{
-            dl.setInterrupted(true);
-            btnTDADownload.setText("Download");
-            btnTDARebuildRawContent.setDisable(false);
-            btnTDAGenTickets.setDisable(false);
-            tableTDATickets.setEditable(true);
-            tdaMnuAddAllToDownloadList.setDisable(false);
-            tdaMnuRemoveAllFromDownloadList.setDisable(false);
-            textTDASearch.setDisable(false);
-            tabTM.setDisable(false);
-            tabTDM.setDisable(false);
-            //tabCIAT.setDisable(false);
-            //tabSocketPunch.setDisable(false);
-
-            try{
-                InputStream stream = Main.class.getResourceAsStream("/resources/icon.png");
-                BufferedImage icon_b = ImageIO.read(stream);
-                Image icon = SwingFXUtils.toFXImage(icon_b, null);
-                imgvTDAIcon.setImage(icon);
-            }catch (Exception e){
-                StringWriter errors = new StringWriter();
-                e.printStackTrace(new PrintWriter(errors));
-                DebugLogger.log(errors.toString(), Level.SEVERE);
-            }
-
-            DebugLogger.log("Download cancled!", Level.INFO);
-        }
-    }
-
-    @FXML
-    protected void btnTDAClickedOpenFile() throws Exception{
-        String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-        path = path.substring(1, path.lastIndexOf("/")) + "/";
-        //FILECHOOSER
-        FileChooser fileChooser = new FileChooser();
-        fileChooser.setTitle("Open encTitleKeys.bin");
-        fileChooser.setInitialDirectory(new File(path));
-        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("encTitleKeys.bin", "*.bin"));
-        File selectedFile = fileChooser.showOpenDialog(mainPane.getScene().getWindow());
-
-        if(selectedFile != null){
-            tdapath = selectedFile.getPath();
-            tdaOpenFile();
-            DebugLogger.log("encTitleKeys.bin opened", Level.INFO);
-        }
-    }
-
-    @FXML
-    protected void btnTDMClickedDownload() {
-        if(btnTDMDownload.getText().equals("Download")){
-            if(textTDMTitleID.getText().length() == 16 && textTDMEncryptedTitleKey.getText().length() == 32){
-                if(textTDMTitleID.getText().toUpperCase().matches("[0-9A-F]+") && textTDMEncryptedTitleKey.getText().toUpperCase().matches("[0-9A-F]+")){
-                    btnTDMDownload.setText("Cancel");
-                    btnTDMGenTicket.setDisable(true);
-                    btnRebuildRawContent.setDisable(true);
-                    //TABS
-                    tabTM.setDisable(true);
-                    tabTDA.setDisable(true);
-
-                    ObservableList<Ticket> item = FXCollections.observableArrayList();
-                    Ticket ticket = new Ticket();
-                    ticket.setTitleID(textTDMTitleID.getText().toUpperCase());
-                    ticket.setTitleKey(textTDMEncryptedTitleKey.getText().toUpperCase());
-                    item.add(ticket);
-                    xml_handler.setTicketList(item);
-                    item = xml_handler.readCommunityXMLFile(false);
-
-                    for(Ticket tiktik:item){
-                        String titleid = tiktik.getTitleID();
-                        String typecheck = titleid.substring(4, 8).toLowerCase();
-
-                        if(typecheck.equals("0000")){
-                            tiktik.setType(Ticket.Type.ESHOP);
-                        }else if(typecheck.equals("0001")){
-                            tiktik.setType(Ticket.Type.DLP);
-                        }else if(typecheck.equals("0002")){
-                            tiktik.setType(Ticket.Type.DEMO);
-                        }else if(typecheck.equals("000e")){
-                            tiktik.setType(Ticket.Type.UPDATE);
-                        }else if(typecheck.equals("008c")){
-                            tiktik.setType(Ticket.Type.DLC);
-                        }else if(typecheck.equals("8004")){
-                            tiktik.setType(Ticket.Type.DSIWARE);
-                        }else if(((Long.parseLong(typecheck, 16)) & 0x10) == 0x10){
-                            tiktik.setType(Ticket.Type.SYSTEM);
-                        }else if(typecheck.equals("8005")){
-                            tiktik.setType(Ticket.Type.DSISYSAPP);
-                        }else if(typecheck.equals("800f")){
-                            tiktik.setType(Ticket.Type.DSISYSDAT);
-                        }else{
-                            tiktik.setType(Ticket.Type.MYSTERY);
-                        }
-                    }
-
-                    dl = new Downloader(item, tdaoutputpath, false);
-                    dl.setPatchDemo(chbxTDMPatchDemo.isSelected());
-                    dl.setPatchDLC(chbxTDMPatchDemo.isSelected());
-                    dl.setBlankID(false);
-                    dl.setComponents(lblTDMTitleCount, lblTDMAttemptCount, lblTDMFailedCount, lblTDMTitleName, lblTDMTitleID, lblTDMTMD, lblTDMFilesCount, lblTDMDownloadStats, progressbarTDMDownload, btnTDMDownload, imgvTDMIcon);
-                    dl.setXtraComponents(btnRebuildRawContent, null, null, null, null);
-                    dl.setTabs(tabTM,tabTDA, tabTDM, tabCIAT, tabSocketPunch);
-                    dl.setGenComponent(btnTDMGenTicket);
-                    dl.start();
-                }else{
-                    Alert warning = new Alert(Alert.AlertType.ERROR);
-                    Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                    stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                    warning.setTitle("Error");
-                    warning.setHeaderText("Illegal characters!");
-                    warning.setContentText("The TitleID or TitleKey contains illeagal characters!");
-                    warning.showAndWait();
-                }
-            }else{
-                Alert warning = new Alert(Alert.AlertType.ERROR);
-                Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                warning.setTitle("Error");
-                warning.setHeaderText("Invalid TitleID or TitleKey");
-                warning.setContentText("The TitleID or TitleKey is invalid!");
-                warning.showAndWait();
-            }
-        }else{
-            dl.setInterrupted(true);
-            btnTDMDownload.setText("Download");
-            btnRebuildRawContent.setDisable(false);
-            btnTDMGenTicket.setDisable(false);
-            tabTM.setDisable(false);
-            tabTDA.setDisable(false);
-            //tabCIAT.setDisable(false);
-            //tabSocketPunch.setDisable(false);
-
-            try{
-                InputStream stream = Main.class.getResourceAsStream("/resources/icon.png");
-                BufferedImage icon_b = ImageIO.read(stream);
-                Image icon = SwingFXUtils.toFXImage(icon_b, null);
-                imgvTDMIcon.setImage(icon);
-            }catch (Exception e){
-                StringWriter errors = new StringWriter();
-                e.printStackTrace(new PrintWriter(errors));
-                DebugLogger.log(errors.toString(), Level.SEVERE);
-            }
-
-            DebugLogger.log("Download cancled!", Level.INFO);
-        }
-    }
-
-    @FXML
-    protected void btnTMClickedDownload() {
-        if(btnTMDownload.getText().equals("Download")){
-            if(tmDownloadList.size() > 0){
-                if(tmoutputpath.length() > 0){
-                    btnTMDownload.setText("Cancel");
-                    btnRebuildRawContent.setDisable(true);
-                    tableTMTickets.setEditable(false);
-                    tmMnuAddAllToDownloadList.setDisable(true);
-                    tmMnuRemoveAllFromDownloadList.setDisable(true);
-                    textTMSearch.setDisable(true);
-                    //DISABLE TABS TOO
-                    tabTDA.setDisable(true);
-                    tabTDM.setDisable(true);
-                    tabCIAT.setDisable(true);
-
-                    dl = new Downloader(tmDownloadList, tmoutputpath, true);
-                    dl.setBuildCIA(chbxTMBuildCIA.isSelected());
-                    dl.setPatchDemo(chbxTMPatchDemo.isSelected());
-                    dl.setPatchDLC(chbxTMPatchDLC.isSelected());
-                    dl.setBlankID(!chbxTMPersonal.isSelected());
-                    dl.setComponents(lblTMTitleCount, lblTMAttemptCount, lblTMFailedCount, lblTMTitleName, lblTMTitleID, lblTMTMD, lblTMFilesCount, lblTMDownloadStats, progressbarTMDownload, btnTMDownload, imgvTMIcon);
-                    dl.setXtraComponents(btnRebuildRawContent, tmMnuAddAllToDownloadList, tmMnuRemoveAllFromDownloadList, textTMSearch, tableTMTickets);
-                    dl.setTabs(tabTM,tabTDA, tabTDM, tabCIAT, tabSocketPunch);
-                    dl.start();
-                }else{
-                    Alert warning = new Alert(Alert.AlertType.ERROR);
-                    Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                    stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                    warning.setTitle("Error");
-                    warning.setHeaderText("Outputfolder!");
-                    warning.setContentText("Please choose an outputfolder first!");
-                    warning.showAndWait();
-                }
-            }else{
-                Alert warning = new Alert(Alert.AlertType.ERROR);
-                Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                warning.setTitle("Error");
-                warning.setHeaderText("No Titles selected!");
-                warning.setContentText("Please select at least one title!");
-                warning.showAndWait();
-            }
-        }else{
-            dl.setInterrupted(true);
-            btnTMDownload.setText("Download");
-            btnRebuildRawContent.setDisable(false);
-            tableTMTickets.setEditable(true);
-            tmMnuAddAllToDownloadList.setDisable(false);
-            tmMnuRemoveAllFromDownloadList.setDisable(false);
-            textTMSearch.setDisable(false);
-            tabTDA.setDisable(false);
-            tabTDM.setDisable(false);
-            //tabCIAT.setDisable(false);
-            //tabSocketPunch.setDisable(false);
-
-            try{
-                InputStream stream = Main.class.getResourceAsStream("/resources/icon.png");
-                BufferedImage icon_b = ImageIO.read(stream);
-                Image icon = SwingFXUtils.toFXImage(icon_b, null);
-                imgvTMIcon.setImage(icon);
-            }catch (Exception e){
-                StringWriter errors = new StringWriter();
-                e.printStackTrace(new PrintWriter(errors));
-                DebugLogger.log(errors.toString(), Level.SEVERE);
-            }
-
-            DebugLogger.log("Download cancled!", Level.INFO);
-        }
-    }
-
-    @FXML
-    protected void btnClickedRebuildRawContent(){
-        Alert warning = new Alert(Alert.AlertType.WARNING);
-        Stage stage2 = (Stage)warning.getDialogPane().getScene().getWindow();
-        stage2.getIcons().add(new Image("/resources/gciaicon.png"));
-        warning.setTitle("Warning");
-        warning.setHeaderText("Rebuild raw content");
-        warning.setContentText("This function will ignore the settings how the CIAs will be build. All produced CIAs will only have a TitleID!");
-        warning.showAndWait();
-
-        try {
-            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/gui/RebuildCIA.fxml"));
-            Parent root2 = (Parent) fxmlLoader.load();
-            Stage stage = new Stage();
-            stage.getIcons().add(new Image("/resources/gciaicon.png"));
-            stage.initModality(Modality.APPLICATION_MODAL);
-            stage.initStyle(StageStyle.DECORATED);
-            stage.setTitle("Rebuild raw content");
-            stage.setScene(new Scene(root2));
-            stage.setResizable(false);
-            stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
-                @Override
-                public void handle(WindowEvent event) {
-                    // consume event
-                    event.consume();
-                }
-            });
-            RebuildCIAController rb = fxmlLoader.getController();
-            rb.setInput(tmoutputpath);
-            stage.show();
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-    @FXML
-    protected void btnTDAClickedRebuildRawContent(){
-        Alert warning = new Alert(Alert.AlertType.WARNING);
-        Stage stage2 = (Stage)warning.getDialogPane().getScene().getWindow();
-        stage2.getIcons().add(new Image("/resources/gciaicon.png"));
-        warning.setTitle("Warning");
-        warning.setHeaderText("Rebuild raw content");
-        warning.setContentText("This function will ignore the settings how the CIAs will be build. All produced CIAs will only have a TitleID!");
-        warning.showAndWait();
-
-        try {
-            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/gui/RebuildCIA.fxml"));
-            Parent root2 = (Parent) fxmlLoader.load();
-            Stage stage = new Stage();
-            stage.getIcons().add(new Image("/resources/gciaicon.png"));
-            stage.initModality(Modality.APPLICATION_MODAL);
-            stage.initStyle(StageStyle.DECORATED);
-            stage.setTitle("Rebuild raw content");
-            stage.setScene(new Scene(root2));
-            stage.setResizable(false);
-            stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
-                @Override
-                public void handle(WindowEvent event) {
-                    // consume event
-                    event.consume();
-                }
-            });
-            RebuildCIAController rb = fxmlLoader.getController();
-            rb.setInput(tdaoutputpath);
-            stage.show();
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-    @FXML
-    protected void btnTDAClickedGenTickets(){
-        if(tdtikoutputpath.length() > 0){
-            if(tdaDownloadList.size() > 0){
-                try {
-                    FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/gui/TicketGenerator.fxml"));
-                    Parent root2 = (Parent) fxmlLoader.load();
-                    Stage stage = new Stage();
-                    stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                    stage.initModality(Modality.APPLICATION_MODAL);
-                    stage.initStyle(StageStyle.DECORATED);
-                    stage.setTitle("Generating Tickets");
-                    stage.setScene(new Scene(root2));
-                    stage.setResizable(false);
-
-                    TicketGeneratorController rb = fxmlLoader.getController();
-
-                    stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
-                        @Override
-                        public void handle(WindowEvent event) {
-                            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
-                            Stage stage2 = (Stage)alert.getDialogPane().getScene().getWindow();
-                            stage2.getIcons().add(new Image("/resources/gciaicon.png"));
-                            alert.setTitle("Cancel");
-                            alert.setHeaderText("Stop Ticket Generation");
-                            alert.setContentText("Do you want to stop the Ticket Generation?");
-
-                            alert.initOwner(stage);
-
-                            ButtonType Yes = new ButtonType("Yes");
-                            ButtonType No = new ButtonType("No");
-                            alert.getButtonTypes().setAll(Yes, No);
-
-                            Optional<ButtonType> result = alert.showAndWait();
-
-                            if (result.get() == Yes){
-                                rb.interrupt();
-                            }
-                            event.consume();
-                        }
-                    });
-                    rb.setInput(tdtikoutputpath, tdaDownloadList);
-                    stage.show();
-                }catch (Exception e){
-                    StringWriter errors = new StringWriter();
-                    e.printStackTrace(new PrintWriter(errors));
-                    DebugLogger.log(errors.toString(), Level.SEVERE);
-                }
-            }else{
-                Alert warning = new Alert(Alert.AlertType.ERROR);
-                Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                warning.setTitle("Error");
-                warning.setHeaderText("No Titles selected!");
-                warning.setContentText("Please select at least one title!");
-                warning.showAndWait();
-            }
-        }else{
-            Alert warning = new Alert(Alert.AlertType.ERROR);
-            Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-            stage.getIcons().add(new Image("/resources/gciaicon.png"));
-            warning.setTitle("Error");
-            warning.setHeaderText("Outputfolder!");
-            warning.setContentText("Please choose an .tik outputfolder first!");
-            warning.showAndWait();
-        }
-    }
-
-    @FXML
-    protected void chbxTDASelectedDLC() {
-        Alert warning = new Alert(Alert.AlertType.INFORMATION);
-        Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-        stage.getIcons().add(new Image("/resources/gciaicon.png"));
-        warning.setTitle("Information");
-        warning.setHeaderText("Patch DLC");
-        warning.setContentText("By selecting this option, all DLC content on CDN will be unlocked, regardless of whether it was bought on eShop or not.\n\nDeselecting this option will only download your legit content.");
-        warning.showAndWait();
-    }
-
-    @FXML
-    protected void chbxTDASelectedDemo() {
-        Alert warning = new Alert(Alert.AlertType.INFORMATION);
-        Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-        stage.getIcons().add(new Image("/resources/gciaicon.png"));
-        warning.setTitle("Information");
-        warning.setHeaderText("Patch Demo");
-        warning.setContentText("By selecting this option, the demo play count limit will be removed.\n\nDeselecting this option will download this demo without patching anything.");
-        warning.showAndWait();
-    }
-
-    @FXML
-    protected void chbxTDMSelectedDLC() {
-        Alert warning = new Alert(Alert.AlertType.INFORMATION);
-        Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-        stage.getIcons().add(new Image("/resources/gciaicon.png"));
-        warning.setTitle("Information");
-        warning.setHeaderText("Patch DLC");
-        warning.setContentText("By selecting this option, all DLC content on CDN will be unlocked, regardless of whether it was bought on eShop or not.\n\nDeselecting this option will only download your legit content.");
-        warning.showAndWait();
-    }
-
-    @FXML
-    protected void chbxTDMSelectedDemo() {
-        Alert warning = new Alert(Alert.AlertType.INFORMATION);
-        Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-        stage.getIcons().add(new Image("/resources/gciaicon.png"));
-        warning.setTitle("Information");
-        warning.setHeaderText("Patch Demo");
-        warning.setContentText("By selecting this option, the demo play count limit will be removed.\n\nDeselecting this option will download this demo without patching anything.");
-        warning.showAndWait();
-    }
-
-    @FXML
-    protected void chbxTMSelectedDLC() {
-        Alert warning = new Alert(Alert.AlertType.INFORMATION);
-        Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-        stage.getIcons().add(new Image("/resources/gciaicon.png"));
-        warning.setTitle("Information");
-        warning.setHeaderText("Patch DLC");
-        warning.setContentText("By selecting this option, all DLC content on CDN will be unlocked, regardless of whether it was bought on eShop or not.\n\nDeselecting this option will only download your legit content.");
-        warning.showAndWait();
-    }
-
-    @FXML
-    protected void chbxTMSelectedDemo() {
-        Alert warning = new Alert(Alert.AlertType.INFORMATION);
-        Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-        stage.getIcons().add(new Image("/resources/gciaicon.png"));
-        warning.setTitle("Information");
-        warning.setHeaderText("Patch Demo");
-        warning.setContentText("By selecting this option, the demo play count limit will be removed.\n\nDeselecting this option will download this demo without patching anything.");
-        warning.showAndWait();
-    }
-
-    @FXML
-    protected void chbxTMSelectedPersonal() {
-        Alert warning = new Alert(Alert.AlertType.WARNING);
-        Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-        stage.getIcons().add(new Image("/resources/gciaicon.png"));
-        warning.setTitle("Warning");
-        warning.setHeaderText("Create personal CIAs");
-        warning.setContentText("Don't use this if you want to install the CIAs on other systems!\n\nNOTE: Doesn't work with current Firmwares/CFW, CIA won't be installable!");
-        if(chbxTMPersonal.isSelected()){
-            warning.showAndWait();
-        }
-    }
-
-    @FXML
-    protected void close() {
-        Platform.exit();
-        System.exit(0);
-    }
-
-    @FXML
-    protected void menuClickedSelectOutput() throws Exception{
-        String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-        path = path.substring(1, path.lastIndexOf("/")) + "/";
-        //DIRECTORYCHOOSER
-        DirectoryChooser directoryChooser = new DirectoryChooser();
-        directoryChooser.setInitialDirectory(new File(path));
-        File selectedDirectory = directoryChooser.showDialog(mainPane.getScene().getWindow());
-        if(selectedDirectory != null){
-            tmoutputpath = selectedDirectory.getPath();
-            btnRebuildRawContent.setDisable(false);
-            DebugLogger.log("TM: Outputfolder setted", Level.INFO);
-        }
-    }
-
-    @FXML
-    protected void menuTDClickedSelectOutputfolder() throws Exception{
-        String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-        path = path.substring(1, path.lastIndexOf("/")) + "/";
-        //DIRECTORYCHOOSER
-        DirectoryChooser directoryChooser = new DirectoryChooser();
-        directoryChooser.setInitialDirectory(new File(path));
-        File selectedDirectory = directoryChooser.showDialog(mainPane.getScene().getWindow());
-        if(selectedDirectory != null){
-            tdaoutputpath = selectedDirectory.getPath();
-            btnTDAGenTickets.setDisable(false);
-            btnTDARebuildRawContent.setDisable(false);
-            DebugLogger.log("TD: Outputfolder setted", Level.INFO);
-        }
-    }
-
-    @FXML
-    protected void menuClickedSettings() {
-        try {
-            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/gui/Settings.fxml"));
-            Parent root1 = (Parent) fxmlLoader.load();
-            Stage stage = new Stage();
-            stage.initModality(Modality.APPLICATION_MODAL);
-            stage.initStyle(StageStyle.UTILITY);
-            stage.setTitle("Settings");
-            stage.setScene(new Scene(root1));
-            stage.setResizable(false);
-            stage.show();
-
-            SettingsController settingsController = fxmlLoader.getController();
-            settingsController.setCdnfxController(cdnfxController);
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-    @FXML
-    protected void menuClickedThread() {
-        try {
-            Desktop.getDesktop().browse(new URI("http://gbatemp.net/threads/release-groovycia.414004/"));
-        } catch (IOException e1) {
-            e1.printStackTrace();
-        } catch (URISyntaxException e1) {
-            StringWriter errors = new StringWriter();
-            e1.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-    @FXML
-    protected void menuClickedWebsite() {
-        try {
-            Desktop.getDesktop().browse(new URI("http://ptrk25.github.io/GroovyFX/"));
-        } catch (IOException e1) {
-            e1.printStackTrace();
-        } catch (URISyntaxException e1) {
-            StringWriter errors = new StringWriter();
-            e1.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-    @FXML
-    protected void menuTMClickedOpenTicket() throws Exception{
-        String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-        path = path.substring(1, path.lastIndexOf("/")) + "/";
-        //FILECHOOSER
-        FileChooser fileChooser = new FileChooser();
-        fileChooser.setTitle("Open ticket.db");
-        fileChooser.setInitialDirectory(new File(path));
-        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("ticket.db", "*.db"));
-        File selectedFile = fileChooser.showOpenDialog(mainPane.getScene().getWindow());
-
-        if(selectedFile != null){
-            tmdbpath = selectedFile.getPath();
-            tmOpenTicketDB();
-            DebugLogger.log("Ticket.db opened", Level.INFO);
-        }
-    }
-
-    @FXML
-    protected void menuTDClickedSelectTikOutputfolder() throws Exception{
-        String path = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-        path = path.substring(1, path.lastIndexOf("/")) + "/";
-        //DIRECTORYCHOOSER
-        DirectoryChooser directoryChooser = new DirectoryChooser();
-        directoryChooser.setInitialDirectory(new File(path));
-        File selectedDirectory = directoryChooser.showDialog(mainPane.getScene().getWindow());
-        if(selectedDirectory != null){
-            tdtikoutputpath = selectedDirectory.getPath();
-            DebugLogger.log("TD: Outputfolder setted (.tik)", Level.INFO);
-        }
-    }
-
-    @FXML
-    protected void rbCIATSelectedPatch() {
-
-    }
-
-    @FXML
-    protected void rbCIATSelectedRepack() {
-
-    }
-
-    @FXML
-    protected void rbCIATSelectedUnpack() {
-
-    }
-
-    @FXML
-    protected void textTDAClickedEnter() {
-
-    }
-
-    @FXML
-    protected void textTDVClickedEnter() {
-
-    }
-
-    @FXML
-    protected void textTMClickedEnter() {
-
-    }
-
-    @FXML
-    protected void btnTDMClickedGenTicket(){
-        if(tdtikoutputpath.length() > 0){
-            if(textTDMTitleID.getText().length() == 16 && textTDMEncryptedTitleKey.getText().length() == 32){
-                if(textTDMTitleID.getText().toUpperCase().matches("[0-9A-F]+") && textTDMEncryptedTitleKey.getText().toUpperCase().matches("[0-9A-F]+")){
-
-                    ObservableList<Ticket> item = FXCollections.observableArrayList();
-                    Ticket tik = new Ticket();
-                    tik.setTitleID(textTDMTitleID.getText().toUpperCase());
-                    tik.setTitleKey(textTDMEncryptedTitleKey.getText().toUpperCase());
-                    item.add(tik);
-
-                    xml_handler.setTicketList(item);
-                    item = xml_handler.readCommunityXMLFile(false);
-
-                    try {
-                        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/gui/TicketGenerator.fxml"));
-                        Parent root2 = (Parent) fxmlLoader.load();
-                        Stage stage = new Stage();
-                        stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                        stage.initModality(Modality.APPLICATION_MODAL);
-                        stage.initStyle(StageStyle.DECORATED);
-                        stage.setTitle("Generating Tickets");
-                        stage.setScene(new Scene(root2));
-                        stage.setResizable(false);
-                        stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
-                            @Override
-                            public void handle(WindowEvent event) {
-                                // consume event
-                                event.consume();
-                            }
-                        });
-                        TicketGeneratorController rb = fxmlLoader.getController();
-                        rb.setInput(tdtikoutputpath, item);
-                        stage.show();
-                    }catch (Exception e){
-                        StringWriter errors = new StringWriter();
-                        e.printStackTrace(new PrintWriter(errors));
-                        DebugLogger.log(errors.toString(), Level.SEVERE);
-                    }
-                }else{
-                    Alert warning = new Alert(Alert.AlertType.ERROR);
-                    Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                    stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                    warning.setTitle("Error");
-                    warning.setHeaderText("Illegal characters!");
-                    warning.setContentText("The TitleID or TitleKey contains illeagal characters!");
-                    warning.showAndWait();
-                }
-            }else{
-                Alert warning = new Alert(Alert.AlertType.ERROR);
-                Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                warning.setTitle("Error");
-                warning.setHeaderText("Invalid TitleID or TitleKey");
-                warning.setContentText("The TitleID or TitleKey is invalid!");
-                warning.showAndWait();
-            }
-        }else{
-            Alert warning = new Alert(Alert.AlertType.ERROR);
-            Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-            stage.getIcons().add(new Image("/resources/gciaicon.png"));
-            warning.setTitle("Error");
-            warning.setHeaderText("Outputfolder!");
-            warning.setContentText("Please choose an .tik outputfolder first!");
-            warning.showAndWait();
-        }
-    }
-
-}
+// INTERNAL ERROR //
\ No newline at end of file
Index: src/groovycia2/DatabaseViewer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/DatabaseViewer.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/DatabaseViewer.java	(revision )
@@ -1,7 +1,9 @@
 package groovycia2;
 
-public class DatabaseViewer {
+public class DatabaseViewer {}
 
 
-
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\DatabaseViewer.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ .idea/workspace.xml	(revision )
@@ -6,7 +6,37 @@
     </artifacts-to-build>
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="cdb932d9-7e58-4d94-93a9-e7b232ef17da" name="Default" comment="" />
+    <list default="true" id="cdb932d9-7e58-4d94-93a9-e7b232ef17da" name="Default" comment="">
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/.idea/workspace.xml" afterPath="$PROJECT_DIR$/.idea/workspace.xml" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/CDNFXController.java" afterPath="$PROJECT_DIR$/src/groovycia2/CDNFXController.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/ConvertingTools.java" afterPath="$PROJECT_DIR$/src/groovycia2/ConvertingTools.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/CustomXMLHandler.java" afterPath="$PROJECT_DIR$/src/groovycia2/CustomXMLHandler.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/DatabaseViewer.java" afterPath="$PROJECT_DIR$/src/groovycia2/DatabaseViewer.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/DebugLogger.java" afterPath="$PROJECT_DIR$/src/groovycia2/DebugLogger.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/DetectOS.java" afterPath="$PROJECT_DIR$/src/groovycia2/DetectOS.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/Downloader.java" afterPath="$PROJECT_DIR$/src/groovycia2/Downloader.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/EncTitleKeysHandler.java" afterPath="$PROJECT_DIR$/src/groovycia2/EncTitleKeysHandler.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/HTTPDownloadUtil.java" afterPath="$PROJECT_DIR$/src/groovycia2/HTTPDownloadUtil.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/Main.java" afterPath="$PROJECT_DIR$/src/groovycia2/Main.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/PropertiesHandler.java" afterPath="$PROJECT_DIR$/src/groovycia2/PropertiesHandler.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/RebuildCIAController.java" afterPath="$PROJECT_DIR$/src/groovycia2/RebuildCIAController.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/SettingsController.java" afterPath="$PROJECT_DIR$/src/groovycia2/SettingsController.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/TDATableFilter.java" afterPath="$PROJECT_DIR$/src/groovycia2/TDATableFilter.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/TDVTableFilter.java" afterPath="$PROJECT_DIR$/src/groovycia2/TDVTableFilter.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/TMTableFilter.java" afterPath="$PROJECT_DIR$/src/groovycia2/TMTableFilter.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/Ticket.java" afterPath="$PROJECT_DIR$/src/groovycia2/Ticket.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/TicketGenerator.java" afterPath="$PROJECT_DIR$/src/groovycia2/TicketGenerator.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/TicketGeneratorController.java" afterPath="$PROJECT_DIR$/src/groovycia2/TicketGeneratorController.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/TicketHandler.java" afterPath="$PROJECT_DIR$/src/groovycia2/TicketHandler.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/Tools.java" afterPath="$PROJECT_DIR$/src/groovycia2/Tools.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/Updater.java" afterPath="$PROJECT_DIR$/src/groovycia2/Updater.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/XMLHandler.java" afterPath="$PROJECT_DIR$/src/groovycia2/XMLHandler.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/groovycia2/XMLUpdater.java" afterPath="$PROJECT_DIR$/src/groovycia2/XMLUpdater.java" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/gui/CDN-FX.fxml" afterPath="$PROJECT_DIR$/src/gui/CDN-FX.fxml" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/gui/RebuildCIA.fxml" afterPath="$PROJECT_DIR$/src/gui/RebuildCIA.fxml" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/gui/Settings.fxml" afterPath="$PROJECT_DIR$/src/gui/Settings.fxml" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/gui/TicketGenerator.fxml" afterPath="$PROJECT_DIR$/src/gui/TicketGenerator.fxml" />
+    </list>
     <ignored path="JavaFxApplication.iws" />
     <ignored path=".idea/workspace.xml" />
     <ignored path="$PROJECT_DIR$/out/" />
@@ -17,7 +47,6 @@
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
-  <component name="ChangesViewManager" flattened_view="true" show_ignored="false" />
   <component name="CreatePatchCommitExecutor">
     <option name="PATCH_PATH" value="" />
   </component>
@@ -65,14 +94,22 @@
   </component>
   <component name="FileEditorManager">
     <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
-      <file leaf-file-name="Main.java" pinned="false" current-in-tab="false">
+      <file leaf-file-name="Main.java" pinned="false" current-in-tab="true">
         <entry file="file://$PROJECT_DIR$/src/groovycia2/Main.java">
           <provider selected="true" editor-type-id="text-editor">
-            <state relative-caret-position="1224">
-              <caret line="90" column="0" selection-start-line="90" selection-start-column="0" selection-end-line="90" selection-end-column="0" />
-              <folding>
-                <element signature="imports" expanded="true" />
-              </folding>
+            <state relative-caret-position="1479">
+              <caret line="106" column="19" lean-forward="true" selection-start-line="106" selection-start-column="19" selection-end-line="106" selection-end-column="19" />
+              <folding />
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file leaf-file-name="CDNFXController.java" pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/src/groovycia2/CDNFXController.java">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="0">
+              <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+              <folding />
             </state>
           </provider>
         </entry>
@@ -80,8 +117,8 @@
       <file leaf-file-name="Updater.java" pinned="false" current-in-tab="false">
         <entry file="file://$PROJECT_DIR$/src/groovycia2/Updater.java">
           <provider selected="true" editor-type-id="text-editor">
-            <state relative-caret-position="119">
-              <caret line="13" column="38" selection-start-line="13" selection-start-column="38" selection-end-line="13" selection-end-column="38" />
+            <state relative-caret-position="493">
+              <caret line="44" column="42" lean-forward="true" selection-start-line="44" selection-start-column="42" selection-end-line="44" selection-end-column="42" />
               <folding />
             </state>
           </provider>
@@ -90,18 +127,18 @@
       <file leaf-file-name="XMLHandler.java" pinned="false" current-in-tab="false">
         <entry file="file://$PROJECT_DIR$/src/groovycia2/XMLHandler.java">
           <provider selected="true" editor-type-id="text-editor">
-            <state relative-caret-position="765">
-              <caret line="62" column="0" selection-start-line="62" selection-start-column="0" selection-end-line="62" selection-end-column="0" />
+            <state relative-caret-position="4182">
+              <caret line="246" column="0" lean-forward="false" selection-start-line="246" selection-start-column="0" selection-end-line="246" selection-end-column="0" />
               <folding />
             </state>
           </provider>
         </entry>
       </file>
-      <file leaf-file-name="Ticket.java" pinned="false" current-in-tab="true">
+      <file leaf-file-name="Ticket.java" pinned="false" current-in-tab="false">
         <entry file="file://$PROJECT_DIR$/src/groovycia2/Ticket.java">
           <provider selected="true" editor-type-id="text-editor">
-            <state relative-caret-position="17">
-              <caret line="15" column="7" selection-start-line="15" selection-start-column="7" selection-end-line="15" selection-end-column="7" />
+            <state relative-caret-position="3468">
+              <caret line="204" column="0" lean-forward="false" selection-start-line="204" selection-start-column="0" selection-end-line="204" selection-end-column="0" />
               <folding />
             </state>
           </provider>
@@ -121,6 +158,9 @@
       <setting name="OPEN_NEW_TAB" value="false" />
     </FindUsagesManager>
   </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
   <component name="GradleLocalSettings">
     <option name="externalProjectsViewState">
       <projects_view />
@@ -164,13 +204,13 @@
         <option value="$PROJECT_DIR$/src/groovycia2/GroovyCIAController.java" />
         <option value="$PROJECT_DIR$/src/cdnfx/GroovyCIAController.java" />
         <option value="$PROJECT_DIR$/src/cdnfx/CDNFXController.java" />
-        <option value="$PROJECT_DIR$/src/groovycia2/Main.java" />
         <option value="$PROJECT_DIR$/src/groovycia2/SettingsController.java" />
         <option value="$PROJECT_DIR$/src/gui/Settings.fxml" />
         <option value="$PROJECT_DIR$/src/groovycia2/TicketGenerator.java" />
         <option value="$PROJECT_DIR$/src/groovycia2/CDNFXController.java" />
         <option value="$PROJECT_DIR$/src/groovycia2/Downloader.java" />
         <option value="$PROJECT_DIR$/src/groovycia2/Updater.java" />
+        <option value="$PROJECT_DIR$/src/groovycia2/Main.java" />
       </list>
     </option>
   </component>
@@ -210,18 +250,6 @@
       </profile-state>
     </entry>
   </component>
-  <component name="ProjectLevelVcsManager" settingsEditedManually="false">
-    <OptionsSetting value="true" id="Add" />
-    <OptionsSetting value="true" id="Remove" />
-    <OptionsSetting value="true" id="Checkout" />
-    <OptionsSetting value="true" id="Update" />
-    <OptionsSetting value="true" id="Status" />
-    <OptionsSetting value="true" id="Edit" />
-    <OptionsSetting value="true" id="Undo Check Out" />
-    <OptionsSetting value="true" id="Get Latest Version" />
-    <ConfirmationsSetting value="0" id="Add" />
-    <ConfirmationsSetting value="0" id="Remove" />
-  </component>
   <component name="ProjectReloadState">
     <option name="STATE" value="0" />
   </component>
@@ -240,31 +268,27 @@
       <foldersAlwaysOnTop value="true" />
     </navigator>
     <panes>
+      <pane id="Scope" />
+      <pane id="Scratches" />
       <pane id="ProjectPane">
         <subPane>
           <PATH>
             <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
+              <option name="myItemId" value="CDN-FX-2" />
               <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
             </PATH_ELEMENT>
-          </PATH>
-          <PATH>
             <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
-              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
-            </PATH_ELEMENT>
-            <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
+              <option name="myItemId" value="CDN-FX-2" />
               <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
             </PATH_ELEMENT>
           </PATH>
           <PATH>
             <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
+              <option name="myItemId" value="CDN-FX-2" />
               <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
             </PATH_ELEMENT>
             <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
+              <option name="myItemId" value="CDN-FX-2" />
               <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
             </PATH_ELEMENT>
             <PATH_ELEMENT>
@@ -274,47 +298,11 @@
           </PATH>
           <PATH>
             <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
+              <option name="myItemId" value="CDN-FX-2" />
               <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
             </PATH_ELEMENT>
             <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
-              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
-            </PATH_ELEMENT>
-            <PATH_ELEMENT>
-              <option name="myItemId" value="src" />
-              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
-            </PATH_ELEMENT>
-            <PATH_ELEMENT>
-              <option name="myItemId" value="resources" />
-              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
-            </PATH_ELEMENT>
-          </PATH>
-          <PATH>
-            <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
-              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
-            </PATH_ELEMENT>
-            <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
-              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
-            </PATH_ELEMENT>
-            <PATH_ELEMENT>
-              <option name="myItemId" value="src" />
-              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
-            </PATH_ELEMENT>
-            <PATH_ELEMENT>
-              <option name="myItemId" value="imgReceiver" />
-              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
-            </PATH_ELEMENT>
-          </PATH>
-          <PATH>
-            <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
-              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
-            </PATH_ELEMENT>
-            <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
+              <option name="myItemId" value="CDN-FX-2" />
               <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
             </PATH_ELEMENT>
             <PATH_ELEMENT>
@@ -328,11 +316,11 @@
           </PATH>
           <PATH>
             <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
+              <option name="myItemId" value="CDN-FX-2" />
               <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
             </PATH_ELEMENT>
             <PATH_ELEMENT>
-              <option name="myItemId" value="GroovyCIA2" />
+              <option name="myItemId" value="CDN-FX-2" />
               <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
             </PATH_ELEMENT>
             <PATH_ELEMENT>
@@ -346,9 +334,7 @@
           </PATH>
         </subPane>
       </pane>
-      <pane id="Scope" />
       <pane id="PackagesPane" />
-      <pane id="Scratches" />
     </panes>
   </component>
   <component name="PropertiesComponent">
@@ -362,11 +348,11 @@
     <property name="GoToClass.includeLibraries" value="false" />
     <property name="dynamic.classpath" value="false" />
     <property name="MemberChooser.copyJavadoc" value="false" />
-    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
-    <property name="settings.editor.splitter.proportion" value="0.2" />
+    <property name="settings.editor.selected.configurable" value="preferences.JavaFX" />
     <property name="project.structure.last.edited" value="Problems" />
     <property name="project.structure.proportion" value="0.15429688" />
     <property name="project.structure.side.proportion" value="0.2" />
+    <property name="last_opened_file_path" value="$USER_HOME$/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Gluon/SceneBuilder.lnk" />
   </component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
@@ -391,9 +377,10 @@
       <module name="" />
       <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m" />
       <option name="PROGRAM_PARAMETERS" />
+      <predefined_log_file id="idea.log" enabled="true" />
       <method />
     </configuration>
-    <configuration default="true" type="AndroidRunConfigurationType" factoryName="Android Application">
+    <configuration default="true" type="AndroidRunConfigurationType" factoryName="Android App">
       <module name="" />
       <option name="DEPLOY" value="true" />
       <option name="ARTIFACT_NAME" value="" />
@@ -403,11 +390,20 @@
       <option name="TARGET_SELECTION_MODE" value="SHOW_DIALOG" />
       <option name="PREFERRED_AVD" value="" />
       <option name="CLEAR_LOGCAT" value="false" />
-      <option name="SHOW_LOGCAT_AUTOMATICALLY" value="true" />
+      <option name="SHOW_LOGCAT_AUTOMATICALLY" value="false" />
       <option name="SKIP_NOOP_APK_INSTALLATIONS" value="true" />
       <option name="FORCE_STOP_RUNNING_APP" value="true" />
+      <option name="DEBUGGER_TYPE" value="Java" />
       <option name="USE_LAST_SELECTED_DEVICE" value="false" />
       <option name="PREFERRED_AVD" value="" />
+      <Java />
+      <Profilers>
+        <option name="ENABLE_ADVANCED_PROFILING" value="true" />
+        <option name="GAPID_ENABLED" value="false" />
+        <option name="GAPID_DISABLE_PCS" value="false" />
+        <option name="SUPPORT_LIB_ENABLED" value="true" />
+        <option name="INSTRUMENTATION_ENABLED" value="true" />
+      </Profilers>
       <option name="DEEP_LINK" value="" />
       <option name="ACTIVITY_CLASS" value="" />
       <method />
@@ -426,8 +422,17 @@
       <option name="SHOW_LOGCAT_AUTOMATICALLY" value="true" />
       <option name="SKIP_NOOP_APK_INSTALLATIONS" value="true" />
       <option name="FORCE_STOP_RUNNING_APP" value="true" />
+      <option name="DEBUGGER_TYPE" value="Java" />
       <option name="USE_LAST_SELECTED_DEVICE" value="false" />
       <option name="PREFERRED_AVD" value="" />
+      <Java />
+      <Profilers>
+        <option name="ENABLE_ADVANCED_PROFILING" value="true" />
+        <option name="GAPID_ENABLED" value="false" />
+        <option name="GAPID_DISABLE_PCS" value="false" />
+        <option name="SUPPORT_LIB_ENABLED" value="true" />
+        <option name="INSTRUMENTATION_ENABLED" value="true" />
+      </Profilers>
       <method />
     </configuration>
     <configuration default="true" type="Applet" factoryName="Applet">
@@ -491,27 +496,6 @@
       <patterns />
       <method />
     </configuration>
-    <configuration default="true" type="JUnitTestDiscovery" factoryName="JUnit Test Discovery" changeList="All">
-      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
-      <module name="" />
-      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
-      <option name="ALTERNATIVE_JRE_PATH" />
-      <option name="PACKAGE_NAME" />
-      <option name="MAIN_CLASS_NAME" />
-      <option name="METHOD_NAME" />
-      <option name="TEST_OBJECT" value="class" />
-      <option name="VM_PARAMETERS" />
-      <option name="PARAMETERS" />
-      <option name="WORKING_DIRECTORY" />
-      <option name="ENV_VARIABLES" />
-      <option name="PASS_PARENT_ENVS" value="true" />
-      <option name="TEST_SEARCH_SCOPE">
-        <value defaultName="singleModule" />
-      </option>
-      <envs />
-      <patterns />
-      <method />
-    </configuration>
     <configuration default="true" type="JarApplication" factoryName="JAR Application">
       <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
       <envs />
@@ -594,34 +578,6 @@
       <listeners />
       <method />
     </configuration>
-    <configuration default="true" type="TestNGTestDiscovery" factoryName="TestNG Test Discovery" changeList="All">
-      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
-      <module name="" />
-      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
-      <option name="ALTERNATIVE_JRE_PATH" />
-      <option name="SUITE_NAME" />
-      <option name="PACKAGE_NAME" />
-      <option name="MAIN_CLASS_NAME" />
-      <option name="METHOD_NAME" />
-      <option name="GROUP_NAME" />
-      <option name="TEST_OBJECT" value="CLASS" />
-      <option name="VM_PARAMETERS" />
-      <option name="PARAMETERS" />
-      <option name="WORKING_DIRECTORY" />
-      <option name="OUTPUT_DIRECTORY" />
-      <option name="ANNOTATION_TYPE" />
-      <option name="ENV_VARIABLES" />
-      <option name="PASS_PARENT_ENVS" value="true" />
-      <option name="TEST_SEARCH_SCOPE">
-        <value defaultName="singleModule" />
-      </option>
-      <option name="USE_DEFAULT_REPORTERS" value="false" />
-      <option name="PROPERTIES_FILE" />
-      <envs />
-      <properties />
-      <listeners />
-      <method />
-    </configuration>
     <configuration default="false" name="Main" type="Application" factoryName="Application">
       <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea">
         <pattern>
@@ -647,6 +603,25 @@
     <list size="1">
       <item index="0" class="java.lang.String" itemvalue="Application.Main" />
     </list>
+    <configuration default="true" type="AndroidRunConfigurationType" factoryName="Android Application">
+      <module name="" />
+      <option name="DEPLOY" value="true" />
+      <option name="ARTIFACT_NAME" value="" />
+      <option name="PM_INSTALL_OPTIONS" value="" />
+      <option name="ACTIVITY_EXTRA_FLAGS" value="" />
+      <option name="MODE" value="default_activity" />
+      <option name="TARGET_SELECTION_MODE" value="SHOW_DIALOG" />
+      <option name="PREFERRED_AVD" value="" />
+      <option name="CLEAR_LOGCAT" value="false" />
+      <option name="SHOW_LOGCAT_AUTOMATICALLY" value="true" />
+      <option name="SKIP_NOOP_APK_INSTALLATIONS" value="true" />
+      <option name="FORCE_STOP_RUNNING_APP" value="true" />
+      <option name="USE_LAST_SELECTED_DEVICE" value="false" />
+      <option name="PREFERRED_AVD" value="" />
+      <option name="DEEP_LINK" value="" />
+      <option name="ACTIVITY_CLASS" value="" />
+      <method />
+    </configuration>
     <configuration name="&lt;template&gt;" type="WebApp" default="true" selected="false">
       <Host>localhost</Host>
       <Port>5050</Port>
@@ -688,37 +663,41 @@
     <option name="totallyTimeSpent" value="1302000" />
   </component>
   <component name="ToolWindowManager">
-    <frame x="-8" y="-8" width="1936" height="1066" extended-state="7" />
-    <editor active="false" />
+    <frame x="-8" y="-8" width="1936" height="1066" extended-state="6" />
+    <editor active="true" />
     <layout>
       <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
       <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
+      <window_info id="Nl-Palette" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
       <window_info id="Palette&#9;" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
+      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
       <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
       <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
       <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
+      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.35438973" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
       <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
+      <window_info id="Properties" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
       <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
       <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
       <window_info id="Designer" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
-      <window_info id="Project" active="true" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.17643923" sideWeight="0.6703755" order="0" side_tool="false" content_ui="combo" />
-      <window_info id="Statistic" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32976446" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
+      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.1171875" sideWeight="0.6703755" order="0" side_tool="false" content_ui="combo" />
       <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
       <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
       <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
+      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
+      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3993576" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
       <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
       <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
       <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
       <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="SLIDING" type="SLIDING" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
       <window_info id="Application Servers" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
       <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
+      <window_info id="Statistic" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32976446" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
       <window_info id="Profiler" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
       <window_info id="Database" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
-      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3993576" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
       <window_info id="Changes" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
       <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32976446" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
       <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
-      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.35438973" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
       <window_info id="JetGradle" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
       <window_info id="Problems" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
       <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
@@ -784,7 +763,7 @@
       </provider>
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="34">
-          <caret line="2" column="0" selection-start-line="2" selection-start-column="0" selection-end-line="2" selection-end-column="0" />
+          <caret line="2" column="0" lean-forward="false" selection-start-line="2" selection-start-column="0" selection-end-line="2" selection-end-column="0" />
           <folding />
         </state>
       </provider>
@@ -792,7 +771,7 @@
     <entry file="file://$PROJECT_DIR$/src/groovycia2/CDNFXController.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="0">
-          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
           <folding />
         </state>
       </provider>
@@ -800,24 +779,22 @@
     <entry file="file://$PROJECT_DIR$/src/groovycia2/Main.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="153">
-          <caret line="19" column="0" selection-start-line="19" selection-start-column="0" selection-end-line="19" selection-end-column="0" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+          <caret line="19" column="0" lean-forward="false" selection-start-line="19" selection-start-column="0" selection-end-line="19" selection-end-column="0" />
+          <folding />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/gui/StyleSheet.css">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="0">
-          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/CDNFXController.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="10064">
-          <caret line="609" column="0" selection-start-line="609" selection-start-column="0" selection-end-line="609" selection-end-column="0" />
+          <caret line="609" column="0" lean-forward="false" selection-start-line="609" selection-start-column="0" selection-end-line="609" selection-end-column="0" />
           <folding />
         </state>
       </provider>
@@ -828,7 +805,7 @@
       </provider>
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="34">
-          <caret line="2" column="0" selection-start-line="2" selection-start-column="0" selection-end-line="2" selection-end-column="0" />
+          <caret line="2" column="0" lean-forward="false" selection-start-line="2" selection-start-column="0" selection-end-line="2" selection-end-column="0" />
           <folding />
         </state>
       </provider>
@@ -836,17 +813,15 @@
     <entry file="file://$PROJECT_DIR$/src/groovycia2/Main.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="68">
-          <caret line="8" column="0" selection-start-line="8" selection-start-column="0" selection-end-line="8" selection-end-column="0" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+          <caret line="8" column="0" lean-forward="false" selection-start-line="8" selection-start-column="0" selection-end-line="8" selection-end-column="0" />
+          <folding />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/CDNFXController.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="68">
-          <caret line="4" column="0" selection-start-line="4" selection-start-column="0" selection-end-line="4" selection-end-column="0" />
+          <caret line="4" column="0" lean-forward="false" selection-start-line="4" selection-start-column="0" selection-end-line="4" selection-end-column="0" />
           <folding />
         </state>
       </provider>
@@ -859,38 +834,20 @@
     <entry file="file://$PROJECT_DIR$/src/groovycia2/DetectOS.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="510">
-          <caret line="30" column="0" selection-start-line="30" selection-start-column="0" selection-end-line="30" selection-end-column="0" />
+          <caret line="30" column="0" lean-forward="false" selection-start-line="30" selection-start-column="0" selection-end-line="30" selection-end-column="0" />
         </state>
       </provider>
     </entry>
-    <entry file="jar://C:/Program Files/Java/jdk1.8.0_74/src.zip!/java/util/logging/Level.java">
-      <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="302">
-          <caret line="65" column="13" selection-start-line="65" selection-start-column="13" selection-end-line="65" selection-end-column="13" />
-        </state>
-      </provider>
-    </entry>
+    <entry file="jar://C:/Program Files/Java/jdk1.8.0_74/src.zip!/java/util/logging/Level.java" />
     <entry file="file://$PROJECT_DIR$/src/groovycia2/HTTPDownloadUtil.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="0">
-          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
         </state>
       </provider>
     </entry>
-    <entry file="jar://C:/Program Files/Java/jdk1.8.0_74/src.zip!/java/io/FileOutputStream.java">
-      <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="199">
-          <caret line="100" column="0" selection-start-line="100" selection-start-column="0" selection-end-line="100" selection-end-column="0" />
-        </state>
-      </provider>
-    </entry>
-    <entry file="jar://C:/Program Files/Java/jdk1.8.0_74/javafx-src.zip!/javafx/event/EventHandler.java">
-      <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="357">
-          <caret line="44" column="9" selection-start-line="44" selection-start-column="9" selection-end-line="44" selection-end-column="9" />
-        </state>
-      </provider>
-    </entry>
+    <entry file="jar://C:/Program Files/Java/jdk1.8.0_74/src.zip!/java/io/FileOutputStream.java" />
+    <entry file="jar://C:/Program Files/Java/jdk1.8.0_74/javafx-src.zip!/javafx/event/EventHandler.java" />
     <entry file="file://$PROJECT_DIR$/src/imgReceiver/test.java" />
     <entry file="file://$PROJECT_DIR$/src/gui/RebuildCIA.fxml">
       <provider editor-type-id="JavaFX-Scene-Builder">
@@ -898,7 +855,7 @@
       </provider>
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="153">
-          <caret line="9" column="70" selection-start-line="9" selection-start-column="70" selection-end-line="9" selection-end-column="70" />
+          <caret line="9" column="70" lean-forward="false" selection-start-line="9" selection-start-column="70" selection-end-line="9" selection-end-column="70" />
           <folding />
         </state>
       </provider>
@@ -909,7 +866,7 @@
       </provider>
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="-1377">
-          <caret line="15" column="39" selection-start-line="15" selection-start-column="39" selection-end-line="15" selection-end-column="39" />
+          <caret line="15" column="39" lean-forward="false" selection-start-line="15" selection-start-column="39" selection-end-line="15" selection-end-column="39" />
           <folding />
         </state>
       </provider>
@@ -917,63 +874,63 @@
     <entry file="file://$PROJECT_DIR$/src/groovycia2/Tools.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="2108">
-          <caret line="139" column="17" selection-start-line="139" selection-start-column="17" selection-end-line="139" selection-end-column="17" />
+          <caret line="139" column="17" lean-forward="false" selection-start-line="139" selection-start-column="17" selection-end-line="139" selection-end-column="17" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/DatabaseViewer.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="68">
-          <caret line="4" column="0" selection-start-line="4" selection-start-column="0" selection-end-line="4" selection-end-column="0" />
+          <caret line="4" column="0" lean-forward="false" selection-start-line="4" selection-start-column="0" selection-end-line="4" selection-end-column="0" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/CustomXMLHandler.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="357">
-          <caret line="25" column="55" selection-start-line="25" selection-start-column="55" selection-end-line="25" selection-end-column="55" />
+          <caret line="25" column="55" lean-forward="false" selection-start-line="25" selection-start-column="55" selection-end-line="25" selection-end-column="55" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/imgReceiver/IconImgInfoReceiver.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="175">
-          <caret line="36" column="118" selection-start-line="36" selection-start-column="118" selection-end-line="36" selection-end-column="118" />
+          <caret line="36" column="118" lean-forward="false" selection-start-line="36" selection-start-column="118" selection-end-line="36" selection-end-column="118" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/imgReceiver/IconImageUtils.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="867">
-          <caret line="53" column="48" selection-start-line="53" selection-start-column="48" selection-end-line="53" selection-end-column="48" />
+          <caret line="53" column="48" lean-forward="false" selection-start-line="53" selection-start-column="48" selection-end-line="53" selection-end-column="48" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/imgReceiver/IconDownloader.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="476">
-          <caret line="34" column="0" selection-start-line="34" selection-start-column="0" selection-end-line="34" selection-end-column="0" />
+          <caret line="34" column="0" lean-forward="false" selection-start-line="34" selection-start-column="0" selection-end-line="34" selection-end-column="0" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/imgReceiver/IconDataDecrypter.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="68">
-          <caret line="14" column="13" selection-start-line="14" selection-start-column="13" selection-end-line="14" selection-end-column="13" />
+          <caret line="14" column="13" lean-forward="false" selection-start-line="14" selection-start-column="13" selection-end-line="14" selection-end-column="13" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/TDVTableFilter.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="425">
-          <caret line="30" column="18" selection-start-line="30" selection-start-column="18" selection-end-line="30" selection-end-column="18" />
+          <caret line="30" column="18" lean-forward="false" selection-start-line="30" selection-start-column="18" selection-end-line="30" selection-end-column="18" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/TicketHandler.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="656">
-          <caret line="231" column="12" selection-start-line="231" selection-start-column="12" selection-end-line="261" selection-end-column="13" />
+          <caret line="231" column="12" lean-forward="false" selection-start-line="231" selection-start-column="12" selection-end-line="261" selection-end-column="13" />
           <folding />
         </state>
       </provider>
@@ -981,21 +938,21 @@
     <entry file="file://$PROJECT_DIR$/src/groovycia2/TMTableFilter.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="85">
-          <caret line="14" column="0" selection-start-line="14" selection-start-column="0" selection-end-line="14" selection-end-column="0" />
+          <caret line="14" column="0" lean-forward="false" selection-start-line="14" selection-start-column="0" selection-end-line="14" selection-end-column="0" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/EncTitleKeysHandler.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="199">
-          <caret line="39" column="0" selection-start-line="39" selection-start-column="0" selection-end-line="39" selection-end-column="0" />
+          <caret line="39" column="0" lean-forward="false" selection-start-line="39" selection-start-column="0" selection-end-line="39" selection-end-column="0" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/ConvertingTools.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="17">
-          <caret line="5" column="13" selection-start-line="5" selection-start-column="13" selection-end-line="5" selection-end-column="13" />
+          <caret line="5" column="13" lean-forward="false" selection-start-line="5" selection-start-column="13" selection-end-line="5" selection-end-column="13" />
         </state>
       </provider>
     </entry>
@@ -1005,7 +962,7 @@
       </provider>
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="0">
-          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
           <folding />
         </state>
       </provider>
@@ -1013,42 +970,42 @@
     <entry file="file://$PROJECT_DIR$/src/groovycia2/RebuildCIAController.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="170">
-          <caret line="16" column="37" selection-start-line="16" selection-start-column="37" selection-end-line="16" selection-end-column="37" />
+          <caret line="16" column="37" lean-forward="false" selection-start-line="16" selection-start-column="37" selection-end-line="16" selection-end-column="37" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/TicketGeneratorController.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="374">
-          <caret line="25" column="5" selection-start-line="25" selection-start-column="5" selection-end-line="25" selection-end-column="5" />
+          <caret line="25" column="5" lean-forward="false" selection-start-line="25" selection-start-column="5" selection-end-line="25" selection-end-column="5" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/DebugLogger.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="561">
-          <caret line="34" column="0" selection-start-line="34" selection-start-column="0" selection-end-line="34" selection-end-column="0" />
+          <caret line="34" column="0" lean-forward="false" selection-start-line="34" selection-start-column="0" selection-end-line="34" selection-end-column="0" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/SettingsController.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="411">
-          <caret line="183" column="39" selection-start-line="183" selection-start-column="39" selection-end-line="183" selection-end-column="39" />
+          <caret line="183" column="39" lean-forward="false" selection-start-line="183" selection-start-column="39" selection-end-line="183" selection-end-column="39" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/PropertiesHandler.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="1394">
-          <caret line="95" column="57" selection-start-line="95" selection-start-column="57" selection-end-line="95" selection-end-column="57" />
+          <caret line="95" column="57" lean-forward="false" selection-start-line="95" selection-start-column="57" selection-end-line="95" selection-end-column="57" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/TDATableFilter.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="425">
-          <caret line="32" column="0" selection-start-line="32" selection-start-column="0" selection-end-line="32" selection-end-column="0" />
+          <caret line="32" column="0" lean-forward="false" selection-start-line="32" selection-start-column="0" selection-end-line="32" selection-end-column="0" />
           <folding />
         </state>
       </provider>
@@ -1056,7 +1013,7 @@
     <entry file="file://$PROJECT_DIR$/src/META-INF/MANIFEST.MF">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="0">
-          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
         </state>
       </provider>
     </entry>
@@ -1066,7 +1023,7 @@
       </provider>
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="0">
-          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
           <folding />
         </state>
       </provider>
@@ -1074,15 +1031,7 @@
     <entry file="file://$PROJECT_DIR$/src/groovycia2/TicketGenerator.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="901">
-          <caret line="66" column="0" selection-start-line="66" selection-start-column="0" selection-end-line="66" selection-end-column="0" />
-          <folding />
-        </state>
-      </provider>
-    </entry>
-    <entry file="file://$PROJECT_DIR$/src/groovycia2/Updater.java">
-      <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="119">
-          <caret line="13" column="38" selection-start-line="13" selection-start-column="38" selection-end-line="13" selection-end-column="38" />
+          <caret line="66" column="0" lean-forward="false" selection-start-line="66" selection-start-column="0" selection-end-line="66" selection-end-column="0" />
           <folding />
         </state>
       </provider>
@@ -1090,14 +1039,14 @@
     <entry file="file://$PROJECT_DIR$/src/groovycia2/XMLUpdater.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="272">
-          <caret line="24" column="75" selection-start-line="24" selection-start-column="75" selection-end-line="24" selection-end-column="75" />
+          <caret line="24" column="75" lean-forward="false" selection-start-line="24" selection-start-column="75" selection-end-line="24" selection-end-column="75" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/src/groovycia2/Downloader.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="7480">
-          <caret line="479" column="0" selection-start-line="479" selection-start-column="0" selection-end-line="479" selection-end-column="0" />
+          <caret line="479" column="0" lean-forward="false" selection-start-line="479" selection-start-column="0" selection-end-line="479" selection-end-column="0" />
           <folding />
         </state>
       </provider>
@@ -1105,40 +1054,46 @@
     <entry file="file://$PROJECT_DIR$/src/gui/StyleSheet.css">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="595">
-          <caret line="35" column="0" selection-start-line="35" selection-start-column="0" selection-end-line="35" selection-end-column="0" />
+          <caret line="35" column="0" lean-forward="false" selection-start-line="35" selection-start-column="0" selection-end-line="35" selection-end-column="0" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/src/groovycia2/Main.java">
+    <entry file="file://$PROJECT_DIR$/src/groovycia2/XMLHandler.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="1224">
-          <caret line="90" column="0" selection-start-line="90" selection-start-column="0" selection-end-line="90" selection-end-column="0" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+        <state relative-caret-position="4182">
+          <caret line="246" column="0" lean-forward="false" selection-start-line="246" selection-start-column="0" selection-end-line="246" selection-end-column="0" />
+          <folding />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/src/groovycia2/CDNFXController.java">
+    <entry file="file://$PROJECT_DIR$/src/groovycia2/Ticket.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="3468">
-          <caret line="239" column="0" selection-start-line="239" selection-start-column="0" selection-end-line="239" selection-end-column="0" />
+          <caret line="204" column="0" lean-forward="false" selection-start-line="204" selection-start-column="0" selection-end-line="204" selection-end-column="0" />
           <folding />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/src/groovycia2/XMLHandler.java">
+    <entry file="file://$PROJECT_DIR$/src/groovycia2/Updater.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="765">
-          <caret line="62" column="0" selection-start-line="62" selection-start-column="0" selection-end-line="62" selection-end-column="0" />
+        <state relative-caret-position="493">
+          <caret line="44" column="42" lean-forward="true" selection-start-line="44" selection-start-column="42" selection-end-line="44" selection-end-column="42" />
           <folding />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/src/groovycia2/Ticket.java">
+    <entry file="file://$PROJECT_DIR$/src/groovycia2/CDNFXController.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="17">
-          <caret line="15" column="7" selection-start-line="15" selection-start-column="7" selection-end-line="15" selection-end-column="7" />
+        <state relative-caret-position="0">
+          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+          <folding />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/src/groovycia2/Main.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="1479">
+          <caret line="106" column="19" lean-forward="true" selection-start-line="106" selection-start-column="19" selection-end-line="106" selection-end-column="19" />
           <folding />
         </state>
       </provider>
Index: src/gui/CDN-FX.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/gui/CDN-FX.fxml	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/gui/CDN-FX.fxml	(revision )
@@ -8,18 +8,13 @@
 <?import javafx.scene.control.MenuBar?>
 <?import javafx.scene.control.MenuItem?>
 <?import javafx.scene.control.ProgressBar?>
-<?import javafx.scene.control.RadioButton?>
-<?import javafx.scene.control.Separator?>
 <?import javafx.scene.control.SeparatorMenuItem?>
 <?import javafx.scene.control.SplitPane?>
 <?import javafx.scene.control.Tab?>
 <?import javafx.scene.control.TabPane?>
 <?import javafx.scene.control.TableColumn?>
 <?import javafx.scene.control.TableView?>
-<?import javafx.scene.control.TextArea?>
 <?import javafx.scene.control.TextField?>
-<?import javafx.scene.control.TitledPane?>
-<?import javafx.scene.control.ToggleGroup?>
 <?import javafx.scene.image.Image?>
 <?import javafx.scene.image.ImageView?>
 <?import javafx.scene.layout.AnchorPane?>
@@ -40,6 +35,7 @@
                   </Menu>
                   <Menu mnemonicParsing="false" text="Titledownloader">
                     <items>
+                        <MenuItem mnemonicParsing="false" text="Open encTitleKeys.bin" />
                       <MenuItem fx:id="menuTDSelectOutputfolder" mnemonicParsing="false" onAction="#menuTDClickedSelectOutputfolder" text="Select output folder" />
                         <MenuItem fx:id="menuTDSelectTikOutputfolder" mnemonicParsing="false" onAction="#menuTDClickedSelectTikOutputfolder" text="Select .tik output folder" />
                     </items>
@@ -73,7 +69,7 @@
                           <items>
                             <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="226.0">
                                  <children>
-                                    <Label layoutX="83.0" layoutY="14.0" prefHeight="27.0" prefWidth="61.0" text="Tickets" textAlignment="CENTER" AnchorPane.leftAnchor="83.0" AnchorPane.rightAnchor="82.0">
+                                    <Label layoutX="83.0" layoutY="14.0" text="Tickets" textAlignment="CENTER" AnchorPane.leftAnchor="83.0" AnchorPane.rightAnchor="82.0">
                                        <font>
                                           <Font size="18.0" />
                                        </font>
@@ -585,13 +581,13 @@
                                           <Font size="18.0" />
                                        </font>
                                     </Label>
-                                    <Label layoutX="14.0" layoutY="43.0" text="Encrypted Titlekey" AnchorPane.leftAnchor="14.0" AnchorPane.rightAnchor="742.0" AnchorPane.topAnchor="43.0">
+                                    <Label layoutX="14.0" layoutY="43.0" text="Encrypted Titlekey" AnchorPane.leftAnchor="14.0" AnchorPane.rightAnchor="740.0" AnchorPane.topAnchor="43.0">
                                        <font>
                                           <Font size="18.0" />
                                        </font>
                                     </Label>
-                                    <TextField fx:id="textTDMTitleID" layoutX="169.0" layoutY="15.0" prefHeight="25.0" prefWidth="724.0" AnchorPane.leftAnchor="169.0" AnchorPane.rightAnchor="8.0" AnchorPane.topAnchor="15.0" />
-                                    <TextField fx:id="textTDMEncryptedTitleKey" layoutX="169.0" layoutY="44.0" prefHeight="25.0" prefWidth="724.0" AnchorPane.leftAnchor="169.0" AnchorPane.rightAnchor="8.0" AnchorPane.topAnchor="44.0" />
+                                    <TextField fx:id="textTDMTitleID" layoutX="193.0" layoutY="15.0" prefHeight="25.0" prefWidth="700.0" AnchorPane.leftAnchor="193.0" AnchorPane.rightAnchor="8.0" AnchorPane.topAnchor="15.0" />
+                                    <TextField fx:id="textTDMEncryptedTitleKey" layoutX="192.0" layoutY="44.0" prefHeight="25.0" prefWidth="701.0" AnchorPane.leftAnchor="192.0" AnchorPane.rightAnchor="8.0" AnchorPane.topAnchor="44.0" />
                                  </children>
                               </AnchorPane>
                             <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0" />
@@ -708,127 +704,6 @@
                   </BorderPane>
                </content>
           </Tab>
-            <Tab fx:id="tabCIAT" closable="false" disable="true" text="CIA Tools">
-               <content>
-                  <BorderPane prefHeight="200.0" prefWidth="200.0">
-                     <right>
-                        <SplitPane dividerPositions="0.46048109965635736" orientation="VERTICAL" prefHeight="200.0" prefWidth="209.0" BorderPane.alignment="CENTER">
-                          <items>
-                            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="264.0" prefWidth="207.0">
-                                 <children>
-                                    <Label layoutX="89.0" layoutY="14.0" text="Log">
-                                       <font>
-                                          <Font size="18.0" />
-                                       </font>
-                                    </Label>
-                                    <TextArea fx:id="textAreaCIATLog" layoutX="13.0" layoutY="44.0" prefHeight="201.0" prefWidth="182.0" AnchorPane.bottomAnchor="20.0" AnchorPane.leftAnchor="13.0" AnchorPane.rightAnchor="12.0" AnchorPane.topAnchor="44.0" />
-                                 </children></AnchorPane>
-                            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0">
-                                 <children>
-                                    <Label layoutX="69.0" layoutY="14.0" text="Progress">
-                                       <font>
-                                          <Font size="18.0" />
-                                       </font>
-                                    </Label>
-                                    <Label layoutX="14.0" layoutY="69.0" text="Mode:">
-                                       <font>
-                                          <Font name="System Bold" size="12.0" />
-                                       </font>
-                                    </Label>
-                                    <Label layoutX="14.0" layoutY="86.0" text="Files:">
-                                       <font>
-                                          <Font name="System Bold" size="12.0" />
-                                       </font>
-                                    </Label>
-                                    <Button fx:id="btnCIATStart" layoutX="14.0" layoutY="272.0" mnemonicParsing="false" onAction="#btnCIATClickedStart" prefHeight="25.0" prefWidth="180.0" text="Start" AnchorPane.bottomAnchor="14.0" AnchorPane.leftAnchor="14.0" AnchorPane.rightAnchor="13.0" />
-                                    <ProgressBar fx:id="progressCIATProgress" layoutX="14.0" layoutY="240.0" prefHeight="24.0" prefWidth="180.0" progress="0.0" AnchorPane.bottomAnchor="47.0" AnchorPane.leftAnchor="14.0" AnchorPane.rightAnchor="13.0" />
-                                    <Label fx:id="lblCIATFiles" layoutX="156.0" layoutY="86.0" text="0/0" />
-                                    <Label fx:id="lblCIATMode" layoutX="112.0" layoutY="69.0" AnchorPane.rightAnchor="33.0" />
-                                 </children>
-                              </AnchorPane>
-                          </items>
-                        </SplitPane>
-                     </right>
-                     <center>
-                        <SplitPane dividerPositions="0.140893470790378" orientation="VERTICAL" prefHeight="200.0" prefWidth="160.0" BorderPane.alignment="CENTER">
-                          <items>
-                            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0">
-                                 <children>
-                                    <Label layoutX="14.0" layoutY="26.0" text="Mode" AnchorPane.leftAnchor="14.0" AnchorPane.rightAnchor="840.0" AnchorPane.topAnchor="26.0">
-                                       <font>
-                                          <Font size="18.0" />
-                                       </font>
-                                    </Label>
-                                    <RadioButton fx:id="rbCIATUnpack" layoutX="134.0" layoutY="31.0" mnemonicParsing="false" onAction="#rbCIATSelectedUnpack" text="Unpack CIA" AnchorPane.leftAnchor="134.0" AnchorPane.topAnchor="31.0">
-                                       <font>
-                                          <Font name="System Bold" size="12.0" />
-                                       </font>
-                                       <toggleGroup>
-                                          <ToggleGroup fx:id="modeGroup" />
-                                       </toggleGroup></RadioButton>
-                                    <RadioButton fx:id="rbCIATRepack" layoutX="434.0" layoutY="31.0" mnemonicParsing="false" onAction="#rbCIATSelectedRepack" text="Repack CIA" toggleGroup="$modeGroup" AnchorPane.topAnchor="31.0">
-                                       <font>
-                                          <Font name="System Bold" size="12.0" />
-                                       </font></RadioButton>
-                                    <RadioButton fx:id="rbCIATPatch" layoutX="735.0" layoutY="31.0" mnemonicParsing="false" onAction="#rbCIATSelectedPatch" text="Patch CIA" toggleGroup="$modeGroup" AnchorPane.rightAnchor="90.0" AnchorPane.topAnchor="31.0">
-                                       <font>
-                                          <Font name="System Bold" size="12.0" />
-                                       </font></RadioButton>
-                                    <Separator layoutX="73.0" layoutY="-6.0" orientation="VERTICAL" prefHeight="89.0" prefWidth="5.0" />
-                                 </children>
-                              </AnchorPane>
-                            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0">
-                                 <children>
-                                    <TitledPane animated="false" collapsible="false" layoutX="14.0" layoutY="14.0" prefHeight="260.0" prefWidth="430.0" text="Unpack CIA" AnchorPane.bottomAnchor="223.0" AnchorPane.leftAnchor="14.0" AnchorPane.topAnchor="14.0">
-                                      <content>
-                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="234.0" prefWidth="399.0">
-                                             <children>
-                                                <TextField fx:id="textCIATUnpackCIA" editable="false" layoutX="14.0" layoutY="14.0" prefHeight="25.0" prefWidth="276.0" />
-                                                <Button fx:id="btnCIATUnpackCIA" layoutX="296.0" layoutY="14.0" mnemonicParsing="false" onAction="#btnCIATUnpackClickedCIA" prefHeight="25.0" prefWidth="125.0" text="Select CIA" />
-                                                <TextField fx:id="textCIATUnpackOutputFolder" editable="false" layoutX="14.0" layoutY="46.0" prefHeight="25.0" prefWidth="275.0" />
-                                                <Button fx:id="btnCIATUnpackOutputFolder" layoutX="295.0" layoutY="46.0" mnemonicParsing="false" onAction="#btnCIATUnpackClickedOutputFolder" prefHeight="25.0" prefWidth="126.0" text="Select Outputfolder" />
-                                             </children>
-                                          </AnchorPane>
-                                      </content>
-                                    </TitledPane>
-                                    <TitledPane animated="false" collapsible="false" layoutX="457.0" layoutY="14.0" prefHeight="260.0" prefWidth="430.0" text="Repack CIA" AnchorPane.bottomAnchor="223.0" AnchorPane.rightAnchor="14.0" AnchorPane.topAnchor="14.0">
-                                       <content>
-                                          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
-                                             <children>
-                                                <TextField fx:id="textCIATRepackInputFolder" editable="false" layoutX="14.0" layoutY="14.0" prefHeight="25.0" prefWidth="277.0" />
-                                                <Button fx:id="btnCIATRepackInputFolder" layoutX="300.0" layoutY="14.0" mnemonicParsing="false" onAction="#btnCIATRepackClickedInputFolder" prefHeight="25.0" prefWidth="118.0" text="Select Inputfolder" />
-                                                <TextField fx:id="textCIATRepackOutputCIA" editable="false" layoutX="14.0" layoutY="46.0" prefHeight="25.0" prefWidth="277.0" />
-                                                <Button fx:id="btnCIATRepackCIAOutput" layoutX="300.0" layoutY="46.0" mnemonicParsing="false" onAction="#btnCIATRepackClickedCIAOutput" prefHeight="25.0" prefWidth="118.0" text="Select CIA output" />
-                                             </children>
-                                          </AnchorPane>
-                                       </content>
-                                    </TitledPane>
-                                    <TitledPane animated="false" collapsible="false" layoutX="14.0" layoutY="282.0" prefHeight="203.0" prefWidth="874.0" text="Patch CIA" AnchorPane.bottomAnchor="12.0" AnchorPane.leftAnchor="14.0" AnchorPane.rightAnchor="13.0">
-                                      <content>
-                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="157.0" prefWidth="428.0">
-                                             <children>
-                                                <TextField fx:id="textCIATPatchCIA" editable="false" layoutX="14.0" layoutY="14.0" prefHeight="25.0" prefWidth="701.0" />
-                                                <Button fx:id="btnCIATPatchCIA" layoutX="726.0" layoutY="14.0" mnemonicParsing="false" onAction="#btnCIATPatchClickedCIA" prefHeight="25.0" prefWidth="132.0" text="Select CIA" />
-                                                <TextField fx:id="textCIATPatchManual" editable="false" layoutX="14.0" layoutY="53.0" prefHeight="25.0" prefWidth="701.0" />
-                                                <TextField fx:id="textCIATPatchIcon" editable="false" layoutX="14.0" layoutY="89.0" prefHeight="25.0" prefWidth="701.0" />
-                                                <Button fx:id="btnCIATPatchManual" layoutX="726.0" layoutY="53.0" mnemonicParsing="false" onAction="#btnCIATPatchClickedManual" text="Select custom Manual" />
-                                                <Button fx:id="btnCIATPatchIcon" layoutX="726.0" layoutY="89.0" mnemonicParsing="false" onAction="#btnCIATPatchClickedIcon" prefHeight="25.0" prefWidth="132.0" text="Select custom Icon" />
-                                             </children>
-                                          </AnchorPane>
-                                      </content>
-                                    </TitledPane>
-                                 </children></AnchorPane>
-                          </items>
-                        </SplitPane>
-                     </center>
-                  </BorderPane>
-               </content>
-            </Tab>
-            <Tab fx:id="tabSocketPunch" closable="false" disable="true" text="SocketPunch">
-              <content>
-                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" />
-              </content>
-            </Tab>
         </tabs>
       </TabPane>
    </center>
Index: src/groovycia2/TMTableFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/TMTableFilter.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/TMTableFilter.java	(revision )
@@ -1,100 +1,1 @@
-package groovycia2;
-
-import javafx.beans.value.ChangeListener;
-import javafx.beans.value.ObservableValue;
-import javafx.collections.transformation.FilteredList;
-import javafx.collections.transformation.SortedList;
-import javafx.scene.control.ListView;
-import javafx.scene.control.TextField;
-import javafx.scene.input.KeyCode;
-import javafx.scene.input.KeyEvent;
-
-public class TMTableFilter {
-
-    private static String text = "";
-    private static String categoryText = "";
-    private static boolean isPrepared = false;
-
-    public static FilteredList<Ticket> filteredTickets;
-
-    public static SortedList<Ticket> createTableFilter(TextField textSearch, ListView listView){
-
-        if(isPrepared)
-            return new SortedList<>(filteredTickets);
-
-        textSearch.setOnKeyPressed((KeyEvent ke) ->{
-            if(ke.getCode().equals(KeyCode.ENTER)){
-                text = textSearch.getText();
-                filterTickets();
-            }
-        });
-
-        //Listview
-        listView.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {
-            @Override
-            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
-                categoryText = newValue.split(" ")[0];
-                if(categoryText.equals("DownloadPlayChild"))
-                    categoryText = "DLP";
-                filterTickets();
-            }
-        });
-
-        isPrepared = true;
-        return new SortedList<>(filteredTickets);
-    }
-
-    private static void filterTickets(){
-        filteredTickets.setPredicate(ticket -> false);
-        filteredTickets.setPredicate(ticket -> {
-            if(categoryText.equals("All"))
-                categoryText = "";
-            if(categoryText.equals("DSiSystemApp"))
-                categoryText = "DSiSysApp";
-            if(categoryText.equals("DSiSystemData"))
-                categoryText = "DSiSysDat";
-
-            //TEXTSEARCH FILTER
-            if(text.length() != 0){
-                String name = ticket.getName();
-                String cid = ticket.getConsoleID();
-                String tid = ticket.getTitleID();
-                String region = ticket.getRegion();
-                String serial = ticket.getSerial();
-                String type = ticket.getType();
-
-                if(name == null)
-                    name = "";
-                if(region == null)
-                    region = "";
-                if(serial == null)
-                    serial = "";
-
-                name = name.toLowerCase();
-                region = region.toLowerCase();
-                serial = serial.toLowerCase();
-                type = type.toLowerCase();
-
-                if((name.contains(text) || cid.contains(text) || tid.contains(text) || region.contains(text) || serial.contains(text) || type.contains(text))){
-                    if(categoryText.length() > 0){
-                        if(ticket.getType().equals(categoryText))
-                            return true;
-                        else
-                            return false;
-                    }else
-                        return true;
-                }
-            }else{
-                if(categoryText.length() > 0){
-                    if(ticket.getType().equals(categoryText))
-                        return true;
-                    else
-                        return false;
-                }else
-                    return true;
-            }
-            return false;
-        });
-    }
-
-}
+// INTERNAL ERROR //
\ No newline at end of file
Index: src/groovycia2/TDATableFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/TDATableFilter.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/TDATableFilter.java	(revision )
@@ -1,100 +1,1 @@
-package groovycia2;
-
-import javafx.beans.value.ChangeListener;
-import javafx.beans.value.ObservableValue;
-import javafx.collections.transformation.FilteredList;
-import javafx.collections.transformation.SortedList;
-import javafx.scene.control.ListView;
-import javafx.scene.control.TextField;
-import javafx.scene.input.KeyCode;
-import javafx.scene.input.KeyEvent;
-
-public class TDATableFilter {
-
-    private static String text = "";
-    private static String categoryText = "";
-    private static boolean isPrepared = false;
-
-    public static FilteredList<Ticket> filteredTickets;
-
-    public static SortedList<Ticket> createTableFilter(TextField textSearch, ListView listView){
-
-        if(isPrepared)
-            return new SortedList<>(filteredTickets);
-
-        textSearch.setOnKeyPressed((KeyEvent ke) ->{
-            if(ke.getCode().equals(KeyCode.ENTER)){
-                text = textSearch.getText().toLowerCase();
-                filterTickets();
-            }
-        });
-
-        //Listview
-        listView.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {
-            @Override
-            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
-                categoryText = newValue.split(" ")[0];
-                if(categoryText.equals("DownloadPlayChild"))
-                    categoryText = "DLP";
-                filterTickets();
-            }
-        });
-
-        isPrepared = true;
-        return new SortedList<>(filteredTickets);
-    }
-
-    private static void filterTickets(){
-        filteredTickets.setPredicate(ticket -> false);
-        filteredTickets.setPredicate(ticket -> {
-            if(categoryText.equals("All"))
-                categoryText = "";
-            if(categoryText.equals("DSiSystemApp"))
-                categoryText = "DSiSysApp";
-            if(categoryText.equals("DSiSystemData"))
-                categoryText = "DSiSysDat";
-
-            //TEXTSEARCH FILTER
-            if(text.length() != 0){
-                String name = ticket.getName();
-                String cid = ticket.getConsoleID();
-                String tid = ticket.getTitleID();
-                String region = ticket.getRegion();
-                String serial = ticket.getSerial();
-                String type = ticket.getType();
-
-                if(name == null)
-                    name = "";
-                if(region == null)
-                    region = "";
-                if(serial == null)
-                    serial = "";
-
-                name = name.toLowerCase();
-                region = region.toLowerCase();
-                serial = serial.toLowerCase();
-                type = type.toLowerCase();
-
-                if((name.contains(text) || cid.contains(text) || tid.contains(text) || region.contains(text) || serial.contains(text) || type.contains(text))){
-                    if(categoryText.length() > 0){
-                        if(ticket.getType().equals(categoryText))
-                            return true;
-                        else
-                            return false;
-                    }else
-                        return true;
-                }
-            }else{
-                if(categoryText.length() > 0){
-                    if(ticket.getType().equals(categoryText))
-                        return true;
-                    else
-                        return false;
-                }else
-                    return true;
-            }
-            return false;
-        });
-    }
-
-}
+// INTERNAL ERROR //
\ No newline at end of file
Index: src/groovycia2/SettingsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/SettingsController.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/SettingsController.java	(revision )
@@ -1,405 +1,405 @@
-package groovycia2;
+/*     */ package groovycia2;
+/*     */ 
+/*     */ import javafx.scene.control.CheckBox;
+/*     */ 
+/*     */ public class SettingsController implements javafx.fxml.Initializable { @javafx.fxml.FXML
+/*     */   private CheckBox chbxGenDebugmode;
+/*     */   @javafx.fxml.FXML
+/*     */   private CheckBox chbxTMSystemTitles;
+/*     */   @javafx.fxml.FXML
+/*     */   private CheckBox chbxTMNonUnique;
+/*     */   @javafx.fxml.FXML
+/*     */   private CheckBox chbxGenDisableXML;
+/*     */   @javafx.fxml.FXML
+/*     */   private CheckBox chbxGenDisable3DSXML;
+/*     */   @javafx.fxml.FXML
+/*     */   private CheckBox chbxGenNameForTID;
+/*     */   @javafx.fxml.FXML
+/*     */   private CheckBox chbxTMDefaultTicket;
+/*     */   @javafx.fxml.FXML
+/*     */   private CheckBox chbxTMDefaultOutput;
+/*     */   @javafx.fxml.FXML
+/*     */   private CheckBox chbxGenNoIndvFolders;
+/*     */   @javafx.fxml.FXML
+/*     */   private CheckBox chbxTDDefaultFile;
+/*     */   @javafx.fxml.FXML
+/*     */   private CheckBox chbxTDDefaultFolder;
+/*     */   @javafx.fxml.FXML
+/*     */   private CheckBox chbxTDDefaultTikFolder;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.Button btnOK;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.Button btnCancel;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.Button btnTMTicketSelect;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.Button btnTMOutputSelect;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.Button btnTDFile;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.Button btnTDFolder;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.Button btnTDTikFolder;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.TextField textTMTicket;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.TextField textTMOutput;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.TextField textTDFile;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.TextField textTDFolder;
+/*     */   @javafx.fxml.FXML
+/*     */   private javafx.scene.control.TextField textTDTikFolder;
+/*     */   private CDNFXController cdnfxController;
+/*     */   
+/*  55 */   public void initialize(java.net.URL location, java.util.ResourceBundle resources) { initProperties(); }
+/*     */   
+/*     */   public void setCdnfxController(CDNFXController cdnfxController)
+/*     */   {
+/*  59 */     this.cdnfxController = cdnfxController;
+/*     */   }
+/*     */   
+/*     */   private void initProperties()
+/*     */   {
+/*  64 */     if (PropertiesHandler.getTMInputPath() != null) {
+/*  65 */       if (PropertiesHandler.getTMInputPath().length() > 1) {
+/*  66 */         this.textTMTicket.setText(PropertiesHandler.getTMInputPath());
+/*  67 */         this.chbxTMDefaultTicket.setSelected(true);
+/*  68 */         this.btnTMTicketSelect.setDisable(false);
+/*     */       } else {
+/*  70 */         this.chbxTMDefaultTicket.setSelected(false);
+/*  71 */         this.btnTMTicketSelect.setDisable(true);
+/*     */       }
+/*     */     } else {
+/*  74 */       this.chbxTMDefaultTicket.setSelected(false);
+/*  75 */       this.btnTMTicketSelect.setDisable(true);
+/*     */     }
+/*     */     
+/*  78 */     if (PropertiesHandler.getTMOutputPath() != null) {
+/*  79 */       if (PropertiesHandler.getTMOutputPath().length() > 1) {
+/*  80 */         this.textTMOutput.setText(PropertiesHandler.getTMOutputPath());
+/*  81 */         this.chbxTMDefaultOutput.setSelected(true);
+/*  82 */         this.btnTMOutputSelect.setDisable(false);
+/*     */       } else {
+/*  84 */         this.chbxTMDefaultOutput.setSelected(false);
+/*  85 */         this.btnTMOutputSelect.setDisable(true);
+/*     */       }
+/*     */     } else {
+/*  88 */       this.chbxTMDefaultOutput.setSelected(false);
+/*  89 */       this.btnTMOutputSelect.setDisable(true);
+/*     */     }
+/*     */     
+/*  92 */     if (PropertiesHandler.getProperties("downloadsystemtitles") != null)
+/*  93 */       this.chbxTMSystemTitles.setSelected(PropertiesHandler.getProperties("downloadsystemtitles").equals("yes"));
+/*  94 */     if (PropertiesHandler.getProperties("downloadnonuniquetitles") != null)
+/*  95 */       this.chbxTMNonUnique.setSelected(PropertiesHandler.getProperties("downloadnonuniquetitles").equals("yes"));
+/*  96 */     if (PropertiesHandler.getProperties("debugmode") != null)
+/*  97 */       this.chbxGenDebugmode.setSelected(PropertiesHandler.getProperties("debugmode").equals("yes"));
+/*  98 */     if (PropertiesHandler.getProperties("titlename") != null)
+/*  99 */       this.chbxGenNameForTID.setSelected(PropertiesHandler.getProperties("titlename").equals("yes"));
+/* 100 */     if (PropertiesHandler.getProperties("disablexml") != null)
+/* 101 */       this.chbxGenDisableXML.setSelected(PropertiesHandler.getProperties("disablexml").equals("yes"));
+/* 102 */     if (PropertiesHandler.getProperties("noindvfolders") != null) {
+/* 103 */       this.chbxGenNoIndvFolders.setSelected(PropertiesHandler.getProperties("noindvfolders").equals("yes"));
+/*     */     }
+/*     */     
+/* 106 */     if (PropertiesHandler.getTDAInputPath() != null) {
+/* 107 */       if (PropertiesHandler.getTDAInputPath().length() > 1) {
+/* 108 */         this.textTDFile.setText(PropertiesHandler.getTDAInputPath());
+/* 109 */         this.chbxTDDefaultFile.setSelected(true);
+/* 110 */         this.btnTDFile.setDisable(false);
+/*     */       } else {
+/* 112 */         this.chbxTDDefaultFile.setSelected(false);
+/* 113 */         this.btnTDFile.setDisable(true);
+/*     */       }
+/*     */     } else {
+/* 116 */       this.chbxTDDefaultFile.setSelected(false);
+/* 117 */       this.btnTDFile.setDisable(true);
+/*     */     }
+/*     */     
+/* 120 */     if (PropertiesHandler.getTDOutputPath() != null) {
+/* 121 */       if (PropertiesHandler.getTDOutputPath().length() > 1) {
+/* 122 */         this.textTDFolder.setText(PropertiesHandler.getTDOutputPath());
+/* 123 */         this.chbxTDDefaultFolder.setSelected(true);
+/* 124 */         this.btnTDFolder.setDisable(false);
+/*     */       } else {
+/* 126 */         this.chbxTDDefaultFolder.setSelected(false);
+/* 127 */         this.btnTDFolder.setDisable(true);
+/*     */       }
+/*     */     } else {
+/* 130 */       this.chbxTDDefaultFolder.setSelected(false);
+/* 131 */       this.btnTDFolder.setDisable(true);
+/*     */     }
+/*     */     
+/* 134 */     if (PropertiesHandler.getTDTikPath() != null) {
+/* 135 */       if (PropertiesHandler.getTDTikPath().length() > 1) {
+/* 136 */         this.textTDTikFolder.setText(PropertiesHandler.getTDTikPath());
+/* 137 */         this.chbxTDDefaultTikFolder.setSelected(true);
+/* 138 */         this.btnTDTikFolder.setDisable(false);
+/*     */       } else {
+/* 140 */         this.chbxTDDefaultTikFolder.setSelected(false);
+/* 141 */         this.btnTDTikFolder.setDisable(true);
+/*     */       }
+/*     */     } else {
+/* 144 */       this.chbxTDDefaultTikFolder.setSelected(false);
+/* 145 */       this.btnTDTikFolder.setDisable(true);
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void ticketTMSelected()
+/*     */   {
+/* 152 */     if (this.chbxTMDefaultTicket.isSelected()) {
+/* 153 */       this.btnTMTicketSelect.setDisable(false);
+/*     */     } else {
+/* 155 */       this.btnTMTicketSelect.setDisable(true);
+/* 156 */       PropertiesHandler.setProperties("", "tmticketdb");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void outputTMSelected() {
+/* 162 */     if (this.chbxTMDefaultOutput.isSelected()) {
+/* 163 */       this.btnTMOutputSelect.setDisable(false);
+/*     */     } else {
+/* 165 */       this.btnTMOutputSelect.setDisable(true);
+/* 166 */       PropertiesHandler.setProperties("", "tmoutputfolder");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void btnClickedCancel()
+/*     */   {
+/* 173 */     javafx.stage.Stage stage = (javafx.stage.Stage)this.btnCancel.getScene().getWindow();
+/* 174 */     stage.close();
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void btnClickedOK() throws Exception {
+/* 179 */     PropertiesHandler.saveProperties();
+/* 180 */     javafx.stage.Stage stage = (javafx.stage.Stage)this.btnCancel.getScene().getWindow();
+/* 181 */     if ((PropertiesHandler.getProperties("debugmode") != null) && 
+/* 182 */       (PropertiesHandler.getProperties("debugmode").equals("no")) && 
+/* 183 */       (this.chbxGenDebugmode.isSelected()))
+/* 184 */       DebugLogger.init();
+/* 185 */     this.cdnfxController.initProperties();
+/* 186 */     stage.close();
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void btnGenClickedUpdateNintendoXML() {}
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void btnTMClickedOutputSelect()
+/*     */     throws Exception
+/*     */   {
+/* 196 */     String path2 = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
+/* 197 */     path2 = path2.substring(1, path2.lastIndexOf("/")) + "/";
+/* 198 */     if (!DetectOS.isWindows())
+/* 199 */       path2 = "/" + path2;
+/* 200 */     javafx.stage.DirectoryChooser directoryChooser = new javafx.stage.DirectoryChooser();
+/* 201 */     directoryChooser.setInitialDirectory(new java.io.File(path2));
+/* 202 */     java.io.File selectedDirectory = directoryChooser.showDialog(this.btnCancel.getScene().getWindow());
+/* 203 */     if (selectedDirectory != null) {
+/* 204 */       String path = selectedDirectory.getPath();
+/* 205 */       this.textTMOutput.setText(path);
+/* 206 */       path = path.replaceAll(":", "!");
+/* 207 */       PropertiesHandler.setProperties(path, "tmoutputfolder");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void btnTMClickedTicketSelect() throws Exception {
+/* 213 */     String path2 = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
+/* 214 */     path2 = path2.substring(1, path2.lastIndexOf("/")) + "/";
+/* 215 */     if (!DetectOS.isWindows())
+/* 216 */       path2 = "/" + path2;
+/* 217 */     javafx.stage.FileChooser fileChooser = new javafx.stage.FileChooser();
+/* 218 */     fileChooser.setTitle("Open ticket.db");
+/* 219 */     fileChooser.setInitialDirectory(new java.io.File(path2));
+/* 220 */     fileChooser.getExtensionFilters().add(new javafx.stage.FileChooser.ExtensionFilter("ticket.db", new String[] { "*.db" }));
+/* 221 */     java.io.File selectedFile = fileChooser.showOpenDialog(this.btnCancel.getScene().getWindow());
+/*     */     
+/* 223 */     if (selectedFile != null) {
+/* 224 */       String path = selectedFile.getPath();
+/* 225 */       this.textTMTicket.setText(path);
+/* 226 */       path = path.replaceAll(":", "!");
+/* 227 */       PropertiesHandler.setProperties(path, "tmticketdb");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void chbxGenClickedDebugmode() {
+/* 233 */     if (this.chbxGenDebugmode.isSelected()) {
+/* 234 */       javafx.scene.control.Alert warning = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.INFORMATION);
+/* 235 */       javafx.stage.Stage stage = (javafx.stage.Stage)warning.getDialogPane().getScene().getWindow();
+/* 236 */       stage.getIcons().add(new javafx.scene.image.Image("/resources/gciaicon.png"));
+/* 237 */       warning.setTitle("Information");
+/* 238 */       warning.setHeaderText("Enable Debugmode");
+/* 239 */       warning.setContentText("If you are having a problem with this program, enable this option then replicate the issue. A log file will be produced by the program. Report the issue by posting the log file in the GroovyCIA thread");
+/* 240 */       warning.showAndWait();
+/* 241 */       PropertiesHandler.setProperties("yes", "debugmode");
+/*     */     } else {
+/* 243 */       PropertiesHandler.setProperties("no", "debugmode");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void chbxTMClickedNonUnique() {
+/* 249 */     if (this.chbxTMNonUnique.isSelected()) {
+/* 250 */       javafx.scene.control.Alert warning = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.WARNING);
+/* 251 */       javafx.stage.Stage stage = (javafx.stage.Stage)warning.getDialogPane().getScene().getWindow();
+/* 252 */       stage.getIcons().add(new javafx.scene.image.Image("/resources/gciaicon.png"));
+/* 253 */       warning.setTitle("Warning");
+/* 254 */       warning.setHeaderText("Download Non-Unique Titles");
+/* 255 */       warning.setContentText("This will allow you to download content from your Ticket.db that is not attached to your eShop.\n\nOnly select this option if you have a PREINSTALLED/LEGIT CIA in your Ticket.db.\n\nOtherwise, content may not install or work properly as intended.\n\nUSE IT AT YOUR RISK!!");
+/*     */       
+/*     */ 
+/*     */ 
+/* 259 */       warning.showAndWait();
+/* 260 */       PropertiesHandler.setProperties("yes", "downloadnonuniquetitles");
+/*     */     } else {
+/* 262 */       PropertiesHandler.setProperties("no", "downloadnonuniquetitles");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void chbxTMClickedSystemTitles() {
+/* 268 */     if (this.chbxTMSystemTitles.isSelected()) {
+/* 269 */       javafx.scene.control.Alert warning = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.WARNING);
+/* 270 */       javafx.stage.Stage stage = (javafx.stage.Stage)warning.getDialogPane().getScene().getWindow();
+/* 271 */       stage.getIcons().add(new javafx.scene.image.Image("/resources/gciaicon.png"));
+/* 272 */       warning.setTitle("Warning");
+/* 273 */       warning.setHeaderText("Download System Titles");
+/* 274 */       warning.setContentText("This feature is experimental and should only be used for debugging purposes.\n\nDo not use this option as a NUS replacement.\nUSE IT AT YOUR OWN RISK!!");
+/*     */       
+/*     */ 
+/* 277 */       warning.showAndWait();
+/* 278 */       PropertiesHandler.setProperties("yes", "downloadsystemtitles");
+/*     */     } else {
+/* 280 */       PropertiesHandler.setProperties("no", "downloadsystemtitles");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void chbxGenClickedDisableXML() {
+/* 286 */     if (this.chbxGenDisableXML.isSelected()) {
+/* 287 */       PropertiesHandler.setProperties("yes", "disablecommunityxml");
+/*     */     } else
+/* 289 */       PropertiesHandler.setProperties("no", "disablecommunityxml");
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void chbxGenClickedDisable3DSXML() {
+/* 294 */     if (this.chbxGenDisableXML.isSelected()) {
+/* 295 */       PropertiesHandler.setProperties("yes", "disable3dsxml");
+/*     */     } else
+/* 297 */       PropertiesHandler.setProperties("no", "disable3dsxml");
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void chbxGenClickedNameForTID() {
+/* 302 */     if (this.chbxGenNameForTID.isSelected()) {
+/* 303 */       PropertiesHandler.setProperties("yes", "titlename");
+/*     */     } else
+/* 305 */       PropertiesHandler.setProperties("no", "titlename");
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void chbxGenClickedNoIndvFolders() {
+/* 310 */     if (this.chbxGenNoIndvFolders.isSelected()) {
+/* 311 */       PropertiesHandler.setProperties("yes", "noindvfolders");
+/*     */     } else
+/* 313 */       PropertiesHandler.setProperties("no", "noindvfolders");
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void chbxTDClickedDefaultFile() {
+/* 318 */     if (this.chbxTDDefaultFile.isSelected()) {
+/* 319 */       this.btnTDFile.setDisable(false);
+/*     */     } else {
+/* 321 */       this.btnTDFile.setDisable(true);
+/* 322 */       PropertiesHandler.setProperties("", "tdfile");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void chbxTDClickedDefaultFolder() {
+/* 328 */     if (this.chbxTDDefaultFolder.isSelected()) {
+/* 329 */       this.btnTDFolder.setDisable(false);
+/*     */     } else {
+/* 331 */       this.btnTDFolder.setDisable(true);
+/* 332 */       PropertiesHandler.setProperties("", "tdfolder");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void chbxTDClickedDefaultTikFolder() {
+/* 338 */     if (this.chbxTDDefaultTikFolder.isSelected()) {
+/* 339 */       this.btnTDTikFolder.setDisable(false);
+/*     */     } else {
+/* 341 */       this.btnTDTikFolder.setDisable(true);
+/* 342 */       PropertiesHandler.setProperties("", "tdtikfolder");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void btnTDClickedFile() throws Exception {
+/* 348 */     String path2 = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
+/* 349 */     path2 = path2.substring(1, path2.lastIndexOf("/")) + "/";
+/* 350 */     if (!DetectOS.isWindows())
+/* 351 */       path2 = "/" + path2;
+/* 352 */     javafx.stage.FileChooser fileChooser = new javafx.stage.FileChooser();
+/* 353 */     fileChooser.setTitle("Open encTitleKeys.bin");
+/* 354 */     fileChooser.setInitialDirectory(new java.io.File(path2));
+/* 355 */     fileChooser.getExtensionFilters().add(new javafx.stage.FileChooser.ExtensionFilter("encTitleKeys", new String[] { "*.bin" }));
+/* 356 */     java.io.File selectedFile = fileChooser.showOpenDialog(this.btnCancel.getScene().getWindow());
+/*     */     
+/* 358 */     if (selectedFile != null) {
+/* 359 */       String path = selectedFile.getPath();
+/* 360 */       this.textTDFile.setText(path);
+/* 361 */       path = path.replaceAll(":", "!");
+/* 362 */       PropertiesHandler.setProperties(path, "tdfile");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void btnTDClickedFolder() throws Exception {
+/* 368 */     String path2 = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
+/* 369 */     path2 = path2.substring(1, path2.lastIndexOf("/")) + "/";
+/* 370 */     if (!DetectOS.isWindows())
+/* 371 */       path2 = "/" + path2;
+/* 372 */     javafx.stage.DirectoryChooser directoryChooser = new javafx.stage.DirectoryChooser();
+/* 373 */     directoryChooser.setInitialDirectory(new java.io.File(path2));
+/* 374 */     java.io.File selectedDirectory = directoryChooser.showDialog(this.btnCancel.getScene().getWindow());
+/* 375 */     if (selectedDirectory != null) {
+/* 376 */       String path = selectedDirectory.getPath();
+/* 377 */       this.textTDFolder.setText(path);
+/* 378 */       path = path.replaceAll(":", "!");
+/* 379 */       PropertiesHandler.setProperties(path, "tdfolder");
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   @javafx.fxml.FXML
+/*     */   protected void btnTDClickedTikFolder() throws Exception {
+/* 385 */     String path2 = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
+/* 386 */     path2 = path2.substring(1, path2.lastIndexOf("/")) + "/";
+/* 387 */     if (!DetectOS.isWindows())
+/* 388 */       path2 = "/" + path2;
+/* 389 */     javafx.stage.DirectoryChooser directoryChooser = new javafx.stage.DirectoryChooser();
+/* 390 */     directoryChooser.setInitialDirectory(new java.io.File(path2));
+/* 391 */     java.io.File selectedDirectory = directoryChooser.showDialog(this.btnCancel.getScene().getWindow());
+/* 392 */     if (selectedDirectory != null) {
+/* 393 */       String path = selectedDirectory.getPath();
+/* 394 */       this.textTDTikFolder.setText(path);
+/* 395 */       path = path.replaceAll(":", "!");
+/* 396 */       PropertiesHandler.setProperties(path, "tdtikfolder");
+/*     */     }
+/*     */   }
+/*     */ }
 
-import javafx.fxml.FXML;
-import javafx.fxml.Initializable;
-import javafx.scene.control.Alert;
-import javafx.scene.control.Button;
-import javafx.scene.control.CheckBox;
-import javafx.scene.control.TextField;
-import javafx.scene.image.Image;
-import javafx.stage.DirectoryChooser;
-import javafx.stage.FileChooser;
-import javafx.stage.Stage;
 
-import java.io.File;
-import java.net.URL;
-import java.util.ResourceBundle;
-
-public class SettingsController implements Initializable{
-
-    @FXML
-    private CheckBox chbxGenDebugmode,
-            chbxTMSystemTitles,
-            chbxTMNonUnique,
-            chbxGenDisableXML,
-            chbxGenNameForTID,
-            chbxTMDefaultTicket,
-            chbxTMDefaultOutput,
-            chbxGenNoIndvFolders,
-            chbxTDDefaultFile,
-            chbxTDDefaultFolder,
-            chbxTDDefaultTikFolder;
-
-    @FXML
-    private Button btnGenUpdateCommunityXML,
-            btnGenUpdateNintendoXML,
-            btnOK,
-            btnCancel,
-            btnTMTicketSelect,
-            btnTMOutputSelect,
-            btnTDFile,
-            btnTDFolder,
-            btnTDTikFolder;
-
-    @FXML
-    private TextField textTMTicket,
-            textTMOutput,
-            textTDFile,
-            textTDFolder,
-            textTDTikFolder;
-
-    private CDNFXController cdnfxController;
-
-    //INIT
-    public void initialize(URL location, ResourceBundle resources){
-        initProperties();
-    }
-
-    public void setCdnfxController(CDNFXController cdnfxController){
-        this.cdnfxController = cdnfxController;
-    }
-
-    private void initProperties(){
-        //TICKETMANAGER
-        if(PropertiesHandler.getTMInputPath() != null){
-            if(PropertiesHandler.getTMInputPath().length() > 1){
-                textTMTicket.setText(PropertiesHandler.getTMInputPath());
-                chbxTMDefaultTicket.setSelected(true);
-                btnTMTicketSelect.setDisable(false);
-            }else{
-                chbxTMDefaultTicket.setSelected(false);
-                btnTMTicketSelect.setDisable(true);
-            }
-        }else{
-            chbxTMDefaultTicket.setSelected(false);
-            btnTMTicketSelect.setDisable(true);
-        }
-
-        if(PropertiesHandler.getTMOutputPath() != null){
-            if(PropertiesHandler.getTMOutputPath().length() > 1){
-                textTMOutput.setText(PropertiesHandler.getTMOutputPath());
-                chbxTMDefaultOutput.setSelected(true);
-                btnTMOutputSelect.setDisable(false);
-            }else{
-                chbxTMDefaultOutput.setSelected(false);
-                btnTMOutputSelect.setDisable(true);
-            }
-        }else{
-            chbxTMDefaultOutput.setSelected(false);
-            btnTMOutputSelect.setDisable(true);
-        }
-
-        if(PropertiesHandler.getProperties("downloadsystemtitles") != null)
-            chbxTMSystemTitles.setSelected(PropertiesHandler.getProperties("downloadsystemtitles").equals("yes"));
-        if(PropertiesHandler.getProperties("downloadnonuniquetitles") != null)
-            chbxTMNonUnique.setSelected(PropertiesHandler.getProperties("downloadnonuniquetitles").equals("yes"));
-        if(PropertiesHandler.getProperties("debugmode") != null)
-            chbxGenDebugmode.setSelected(PropertiesHandler.getProperties("debugmode").equals("yes"));
-        if(PropertiesHandler.getProperties("titlename") != null)
-            chbxGenNameForTID.setSelected(PropertiesHandler.getProperties("titlename").equals("yes"));
-        if(PropertiesHandler.getProperties("disablexml") != null)
-            chbxGenDisableXML.setSelected(PropertiesHandler.getProperties("disablexml").equals("yes"));
-        if(PropertiesHandler.getProperties("noindvfolders") != null)
-            chbxGenNoIndvFolders.setSelected(PropertiesHandler.getProperties("noindvfolders").equals("yes"));
-
-        //TITLEDOWNLOADER
-        if(PropertiesHandler.getTDAInputPath() != null ){
-            if(PropertiesHandler.getTDAInputPath().length() > 1){
-                textTDFile.setText(PropertiesHandler.getTDAInputPath());
-                chbxTDDefaultFile.setSelected(true);
-                btnTDFile.setDisable(false);
-            }else{
-                chbxTDDefaultFile.setSelected(false);
-                btnTDFile.setDisable(true);
-            }
-        }else{
-            chbxTDDefaultFile.setSelected(false);
-            btnTDFile.setDisable(true);
-        }
-
-        if(PropertiesHandler.getTDOutputPath() != null){
-            if(PropertiesHandler.getTDOutputPath().length() > 1){
-                textTDFolder.setText(PropertiesHandler.getTDOutputPath());
-                chbxTDDefaultFolder.setSelected(true);
-                btnTDFolder.setDisable(false);
-            }else{
-                chbxTDDefaultFolder.setSelected(false);
-                btnTDFolder.setDisable(true);
-            }
-        }else{
-            chbxTDDefaultFolder.setSelected(false);
-            btnTDFolder.setDisable(true);
-        }
-
-        if(PropertiesHandler.getTDTikPath() != null){
-            if(PropertiesHandler.getTDTikPath().length() > 1){
-                textTDTikFolder.setText(PropertiesHandler.getTDTikPath());
-                chbxTDDefaultTikFolder.setSelected(true);
-                btnTDTikFolder.setDisable(false);
-            }else{
-                chbxTDDefaultTikFolder.setSelected(false);
-                btnTDTikFolder.setDisable(true);
-            }
-        }else{
-            chbxTDDefaultTikFolder.setSelected(false);
-            btnTDTikFolder.setDisable(true);
-        }
-
-    }
-
-    @FXML
-    protected void ticketTMSelected(){
-        if(chbxTMDefaultTicket.isSelected()){
-            btnTMTicketSelect.setDisable(false);
-        }else{
-            btnTMTicketSelect.setDisable(true);
-            PropertiesHandler.setProperties("", "tmticketdb");
-        }
-    }
-
-    @FXML
-    protected void outputTMSelected(){
-        if(chbxTMDefaultOutput.isSelected()){
-            btnTMOutputSelect.setDisable(false);
-        }else{
-            btnTMOutputSelect.setDisable(true);
-            PropertiesHandler.setProperties("", "tmoutputfolder");
-        }
-    }
-
-    //FUNCTIONS
-    @FXML
-    protected void btnClickedCancel() {
-        Stage stage = (Stage) btnCancel.getScene().getWindow();
-        stage.close();
-    }
-
-    @FXML
-    protected void btnClickedOK() throws Exception{
-        PropertiesHandler.saveProperties();
-        Stage stage = (Stage) btnCancel.getScene().getWindow();
-        if(PropertiesHandler.getProperties("debugmode") != null)
-            if(PropertiesHandler.getProperties("debugmode").equals("no"))
-                if(chbxGenDebugmode.isSelected())
-                    DebugLogger.init();
-        cdnfxController.initProperties();
-        stage.close();
-    }
-
-    @FXML
-    protected void btnGenClickedUpdateCommunityXML() {
-        XMLUpdater xmlu = new XMLUpdater();
-        Boolean need = xmlu.checkForUpdates();
-        if(need){
-            xmlu.update();
-            Alert warning = new Alert(Alert.AlertType.INFORMATION);
-            Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-            stage.getIcons().add(new Image("/resources/gciaicon.png"));
-            warning.setTitle("Information");
-            warning.setHeaderText("Community XML Update");
-            warning.setContentText("Update successful!");
-            warning.showAndWait();
-        }else{
-            Alert warning = new Alert(Alert.AlertType.INFORMATION);
-            Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-            stage.getIcons().add(new Image("/resources/gciaicon.png"));
-            warning.setTitle("Information");
-            warning.setHeaderText("Community XML Update");
-            warning.setContentText("No update found!");
-            warning.showAndWait();
-        }
-    }
-
-    @FXML
-    protected void btnGenClickedUpdateNintendoXML() {
-        //TODO
-    }
-
-    @FXML
-    protected void btnTMClickedOutputSelect() throws Exception{
-        String path2 = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-        path2 = path2.substring(1, path2.lastIndexOf("/")) + "/";
-        DirectoryChooser directoryChooser = new DirectoryChooser();
-        directoryChooser.setInitialDirectory(new File(path2));
-        File selectedDirectory = directoryChooser.showDialog(btnCancel.getScene().getWindow());
-        if(selectedDirectory != null){
-            String path = selectedDirectory.getPath();
-            textTMOutput.setText(path);
-            path = path.replaceAll(":", "!");
-            PropertiesHandler.setProperties(path, "tmoutputfolder");
-        }
-    }
-
-    @FXML
-    protected void btnTMClickedTicketSelect() throws Exception{
-        String path2 = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-        path2 = path2.substring(1, path2.lastIndexOf("/")) + "/";
-        FileChooser fileChooser = new FileChooser();
-        fileChooser.setTitle("Open ticket.db");
-        fileChooser.setInitialDirectory(new File(path2));
-        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("ticket.db", "*.db"));
-        File selectedFile = fileChooser.showOpenDialog(btnCancel.getScene().getWindow());
-
-        if(selectedFile != null){
-            String path = selectedFile.getPath();
-            textTMTicket.setText(path);
-            path = path.replaceAll(":", "!");
-            PropertiesHandler.setProperties(path, "tmticketdb");
-        }
-    }
-
-    @FXML
-    protected void chbxGenClickedDebugmode() {
-        if(chbxGenDebugmode.isSelected()){
-            Alert warning = new Alert(Alert.AlertType.INFORMATION);
-            Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-            stage.getIcons().add(new Image("/resources/gciaicon.png"));
-            warning.setTitle("Information");
-            warning.setHeaderText("Enable Debugmode");
-            warning.setContentText("If you are having a problem with this program, enable this option then replicate the issue. A log file will be produced by the program. Report the issue by posting the log file in the GroovyCIA thread");
-            warning.showAndWait();
-            PropertiesHandler.setProperties("yes", "debugmode");
-        }else{
-            PropertiesHandler.setProperties("no", "debugmode");
-        }
-    }
-
-    @FXML
-    protected void chbxTMClickedNonUnique() {
-        if(chbxTMNonUnique.isSelected()){
-            Alert warning = new Alert(Alert.AlertType.WARNING);
-            Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-            stage.getIcons().add(new Image("/resources/gciaicon.png"));
-            warning.setTitle("Warning");
-            warning.setHeaderText("Download Non-Unique Titles");
-            warning.setContentText("This will allow you to download content from your Ticket.db that is not attached to your eShop.\n\n" +
-                    "Only select this option if you have a PREINSTALLED/LEGIT CIA in your Ticket.db.\n\n" +
-                    "Otherwise, content may not install or work properly as intended.\n\n" +
-                    "USE IT AT YOUR RISK!!");
-            warning.showAndWait();
-            PropertiesHandler.setProperties("yes", "downloadnonuniquetitles");
-        }else{
-            PropertiesHandler.setProperties("no", "downloadnonuniquetitles");
-        }
-    }
-
-    @FXML
-    protected void chbxTMClickedSystemTitles() {
-        if(chbxTMSystemTitles.isSelected()){
-            Alert warning = new Alert(Alert.AlertType.WARNING);
-            Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-            stage.getIcons().add(new Image("/resources/gciaicon.png"));
-            warning.setTitle("Warning");
-            warning.setHeaderText("Download System Titles");
-            warning.setContentText("This feature is experimental and should only be used for debugging purposes.\n\n" +
-                    "Do not use this option as a NUS replacement.\n" +
-                    "USE IT AT YOUR OWN RISK!!");
-            warning.showAndWait();
-            PropertiesHandler.setProperties("yes", "downloadsystemtitles");
-        }else{
-            PropertiesHandler.setProperties("no", "downloadsystemtitles");
-        }
-    }
-
-    @FXML
-    protected void chbxGenClickedDisableXML(){
-        if(chbxGenDisableXML.isSelected())
-            PropertiesHandler.setProperties("yes", "disablexml");
-        else
-            PropertiesHandler.setProperties("no", "disablexml");
-    }
-
-    @FXML
-    protected void chbxGenClickedNameForTID(){
-        if(chbxGenNameForTID.isSelected())
-            PropertiesHandler.setProperties("yes", "titlename");
-        else
-            PropertiesHandler.setProperties("no", "titlename");
-    }
-
-    @FXML
-    protected void chbxGenClickedNoIndvFolders(){
-        if(chbxGenNoIndvFolders.isSelected())
-            PropertiesHandler.setProperties("yes", "noindvfolders");
-        else
-            PropertiesHandler.setProperties("no", "noindvfolders");
-    }
-
-    @FXML
-    protected void chbxTDClickedDefaultFile(){
-        if(chbxTDDefaultFile.isSelected()){
-            btnTDFile.setDisable(false);
-        }else{
-            btnTDFile.setDisable(true);
-            PropertiesHandler.setProperties("", "tdfile");
-        }
-    }
-
-    @FXML
-    protected void chbxTDClickedDefaultFolder(){
-        if(chbxTDDefaultFolder.isSelected()){
-            btnTDFolder.setDisable(false);
-        }else{
-            btnTDFolder.setDisable(true);
-            PropertiesHandler.setProperties("", "tdfolder");
-        }
-    }
-
-    @FXML
-    protected void chbxTDClickedDefaultTikFolder(){
-        if(chbxTDDefaultTikFolder.isSelected()){
-            btnTDTikFolder.setDisable(false);
-        }else{
-            btnTDTikFolder.setDisable(true);
-            PropertiesHandler.setProperties("", "tdtikfolder");
-        }
-    }
-
-    @FXML
-    protected void btnTDClickedFile() throws Exception{
-        String path2 = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-        path2 = path2.substring(1, path2.lastIndexOf("/")) + "/";
-        FileChooser fileChooser = new FileChooser();
-        fileChooser.setTitle("Open encTitleKeys.bin");
-        fileChooser.setInitialDirectory(new File(path2));
-        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("encTitleKeys", "*.bin"));
-        File selectedFile = fileChooser.showOpenDialog(btnCancel.getScene().getWindow());
-
-        if(selectedFile != null){
-            String path = selectedFile.getPath();
-            textTDFile.setText(path);
-            path = path.replaceAll(":", "!");
-            PropertiesHandler.setProperties(path, "tdfile");
-        }
-    }
-
-    @FXML
-    protected void  btnTDClickedFolder() throws Exception{
-        String path2 = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-        path2 = path2.substring(1, path2.lastIndexOf("/")) + "/";
-        DirectoryChooser directoryChooser = new DirectoryChooser();
-        directoryChooser.setInitialDirectory(new File(path2));
-        File selectedDirectory = directoryChooser.showDialog(btnCancel.getScene().getWindow());
-        if(selectedDirectory != null){
-            String path = selectedDirectory.getPath();
-            textTDFolder.setText(path);
-            path = path.replaceAll(":", "!");
-            PropertiesHandler.setProperties(path, "tdfolder");
-        }
-    }
-
-    @FXML
-    protected void btnTDClickedTikFolder() throws Exception{
-        String path2 = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-        path2 = path2.substring(1, path2.lastIndexOf("/")) + "/";
-        DirectoryChooser directoryChooser = new DirectoryChooser();
-        directoryChooser.setInitialDirectory(new File(path2));
-        File selectedDirectory = directoryChooser.showDialog(btnCancel.getScene().getWindow());
-        if(selectedDirectory != null){
-            String path = selectedDirectory.getPath();
-            textTDTikFolder.setText(path);
-            path = path.replaceAll(":", "!");
-            PropertiesHandler.setProperties(path, "tdtikfolder");
-        }
-    }
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\SettingsController.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/Downloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/Downloader.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/Downloader.java	(revision )
@@ -1,765 +1,1 @@
-package groovycia2;
-
-import imgReceiver.IconDataDecrypter;
-import imgReceiver.IconDownloader;
-import imgReceiver.IconImgInfoReceiver;
-import javafx.application.Platform;
-import javafx.collections.ObservableList;
-import javafx.embed.swing.SwingFXUtils;
-import javafx.scene.control.*;
-import javafx.scene.image.Image;
-import javafx.scene.image.ImageView;
-import javafx.stage.Stage;
-
-import javax.imageio.ImageIO;
-import java.awt.image.BufferedImage;
-import java.io.*;
-import java.net.URL;
-import java.nio.channels.Channels;
-import java.nio.channels.ReadableByteChannel;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.logging.Level;
-
-public class Downloader extends Thread {
-
-    //Datafields
-    private final int tk;
-    private final int ATTEMPS;
-    private final int BUFFER_SIZE;
-    private final byte[] MAGIC;
-    private final byte[] TICKETTEMPLATE = ConvertingTools.hexStringToByteArray("00010004d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0d15ea5e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000526f6f742d434130303030303030332d585330303030303030630000000000000000000000000000000000000000000000000000000000000000000000000000feedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedfacefeedface010000cccccccccccccccccccccccccccccccc00000000000000000000000000aaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010014000000ac000000140001001400000000000000280000000100000084000000840003000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
-
-
-    private boolean error;
-    private boolean isInterrupted;
-
-    private boolean patch_dlc, patch_demo, blank_id, build_cia;
-
-    private String TitleID, TMD, path;
-
-    private ObservableList<Ticket> downloadList;
-
-    private long content,
-                final_content,
-                title,
-                final_title,
-                downloaded_bytes,
-                final_bytes,
-                failed;
-
-    private byte[] ticketData;
-
-    private Label lblTitleCount, lblAttemptCount, lblFailedCount, lblTitleName, lblTitleID, lblTMD, lblFilesCount, lblDownloadStats;
-    private ProgressBar progressDownload;
-    private Button btnDownload, rebuild, genCom;
-    private MenuItem addall, removeall;
-    private TextField search;
-    private TableView table;
-    private ImageView img;
-    private Tab tabTM, tabTDA, tabTDM, tabCIAT, tabSP;
-    private boolean isDownload = true;
-    private boolean isTM = false;
-
-    /**
-     * Constructor for class Downloader
-     * Initialize all Datafields
-     */
-    public Downloader(ObservableList<Ticket> downloadList, String path, boolean isTM){
-        tk = 0x140;
-        ATTEMPS = 10;
-        BUFFER_SIZE = 4096;
-        MAGIC = ConvertingTools.hexStringToByteArray
-        error = false;
-        isInterrupted = false;
-        this.patch_dlc = true;
-        this.patch_demo = true;
-        this.blank_id = true;
-        this.build_cia = true;
-        TitleID = "000000000000000";
-        TMD = "-";
-        content = 0;
-        final_content = 0;
-        title = 1;
-        final_title = 0;
-        downloaded_bytes = 0;
-        final_bytes = 0;
-        failed = 0;
-        this.downloadList = downloadList;
-        this.path = path;
-        this.isTM = isTM;
-    }
-
-    /**
-     * Set the Parameter to patch DLC Content
-     *
-     * @param patch         true/false
-     */
-    public void setPatchDLC(boolean patch){
-        patch_dlc = patch;
-    }
-
-    /**
-     * Set the Parameter to patch Demo Content
-     *
-     * @param patch         true/false
-     */
-    public void setPatchDemo(boolean patch){
-        patch_demo = patch;
-    }
-
-    /**
-     * Set the Parameter to remove the Unique Console ID
-     *
-     * @param blank         true/false
-     */
-    public void setBlankID(boolean blank){
-        blank_id = blank;
-    }
-
-    /**
-     * Set the Parameter if you want to build the CIAs
-     *
-     * @param build         true/false
-     */
-    public void setBuildCIA(boolean build){
-        build_cia = build;
-    }
-
-    public void setDownload(boolean dl){
-        this.isDownload = dl;
-    }
-
-    public void setComponents(Label lblTitleCount, Label lblAttemptCount, Label lblFailedCount, Label lblTitleName, Label lblTitleID, Label lblTMD, Label lblFilesCount, Label lblDownloadStats, ProgressBar progressDownload, Button btnDownload, ImageView img){
-        this.lblTitleCount = lblTitleCount;
-        this.lblAttemptCount = lblAttemptCount;
-        this.lblFailedCount = lblFailedCount;
-        this.lblTitleName = lblTitleName;
-        this.lblTitleID = lblTitleID;
-        this.lblTMD = lblTMD;
-        this.lblFilesCount = lblFilesCount;
-        this.lblDownloadStats = lblDownloadStats;
-        this.progressDownload = progressDownload;
-        this.btnDownload = btnDownload;
-        this.img = img;
-    }
-
-    public void setXtraComponents(Button rebuild, MenuItem addall, MenuItem removeall, TextField search, TableView table){
-        this.rebuild = rebuild;
-        this.search = search;
-        this.table = table;
-        this.addall = addall;
-        this.removeall = removeall;
-    }
-
-    public void setGenComponent(Button genCom){
-        this.genCom = genCom;
-    }
-
-    public void setTabs(Tab tabTM, Tab tabTDA, Tab tabTDM, Tab tabCIAT, Tab tabSP){
-        this.tabTM = tabTM;
-        this.tabTDA = tabTDA;
-        this.tabTDM = tabTDM;
-        this.tabCIAT = tabCIAT;
-        this.tabSP = tabSP;
-    }
-
-    private void enableTabs(){
-        this.tabTM.setDisable(false);
-        this.tabTDA.setDisable(false);
-        this.tabTDM.setDisable(false);
-        //this.tabCIAT.setDisable(false);
-        //this.tabSP.setDisable(false);
-    }
-
-    /**
-     * Check if Directory exists
-     *
-     * @param path          Path to Folder
-     * @return              true/false
-     */
-    private boolean createDirectory(String path){
-        if(new File(path).mkdirs()) {
-            DebugLogger.log("Creating direcory: " + path, Level.INFO);
-            return true;
-        }
-        return false;
-    }
-
-    /**
-     * Creates /Raw and /Cia Directory
-     *
-     * @param path          Path to Folder
-     * @return              true/false
-     */
-    private boolean createRawCia(String path){
-        if(!(Files.exists(Paths.get(path + "/raw")) && Files.exists(Paths.get(path + "/cia")))){
-            if(new File(path + "/raw").mkdir() && new File(path + "/cia").mkdir())
-                return true;
-        }else
-            return true;
-        return false;
-    }
-
-    /**
-     * Patches the Ticketdata
-     *
-     * @param data          Ticketdata
-     * @param type          Tickettyp
-     * @return              Patched data
-     */
-    public byte[] patchData(byte[] data, String type){
-        if(blank_id){
-            data = ConvertingTools.connectByteArray(Arrays.copyOfRange(data, 0x00, tk+0x98), ConvertingTools.hexStringToByteArray("00000000"), Arrays.copyOfRange(data, tk+0x9C, data.length));
-            data = ConvertingTools.connectByteArray(Arrays.copyOfRange(data, 0x00, tk+0xDC), ConvertingTools.hexStringToByteArray("00000000"), Arrays.copyOfRange(data, tk+0xE0, data.length));
-        }
-
-        if(type.equals("Demo") && patch_demo){
-            data = ConvertingTools.connectByteArray(Arrays.copyOfRange(data, 0x00, tk+0x124), ConvertingTools.hexStringToByteArray("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), Arrays.copyOfRange(data, tk+0x164, data.length));
-        }else if(type.equals("DLC") && patch_dlc){
-            data = ConvertingTools.connectByteArray(Arrays.copyOfRange(data, 0x00, tk+0x164), ConvertingTools.hexStringToByteArray("00010014000000ac000000140001001400000000000000280000000100000084000000840003000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), Arrays.copyOfRange(data, tk+0x210, data.length));
-        }
-
-        return data;
-    }
-
-    private String bytes2human(long bytes, long bytes2){
-        String output;
-        output = (bytes/1000000) + " MB / " + (bytes2/1000000) + " MB";
-        double progress = (double)bytes/(double)bytes2;
-        if(bytes != 0)
-            Platform.runLater(() -> progressDownload.setProgress(progress));
-        else
-            Platform.runLater(() -> progressDownload.setProgress(0));
-        return output;
-    }
-
-    public void setInterrupted(boolean inter){
-        isInterrupted = inter;
-    }
-
-    private byte[] createTicket(String titleID, String titleKey){
-        byte[] ticket = TICKETTEMPLATE;
-        ticket = ConvertingTools.connectByteArray(Arrays.copyOfRange(ticket,0 , tk+0x9C), ConvertingTools.hexStringToByteArray(titleID), Arrays.copyOfRange(ticket,tk+0xA4 , ticket.length));
-        ticket = ConvertingTools.connectByteArray(Arrays.copyOfRange(ticket,0 , tk+0x7F), ConvertingTools.hexStringToByteArray(titleKey), Arrays.copyOfRange(ticket,tk+0x8F , ticket.length));
-        return ticket;
-    }
-
-    private void download() throws Exception {
-        final_title = downloadList.size();
-        failed = 0;
-
-        createRawCia(path);
-        Platform.runLater(() -> lblTitleCount.setText(title + "/" + final_title));
-
-        for(Ticket tiktik:downloadList){
-
-            if(isInterrupted)
-                break;
-
-            String type = tiktik.getType();
-            String titleid = tiktik.getTitleID();
-            String titlekey = tiktik.getTitleKey();
-            String name = tiktik.getName();
-            String region = tiktik.getRegion();
-
-            byte[] data = null;
-
-            if(tiktik.getData() != null)
-                data = patchData(tiktik.getData(), tiktik.getType());
-
-            createDirectory(path + "/raw/" + type + "/" + tiktik.getTitleID());
-
-            FileOutputStream fos = new FileOutputStream(path + "/raw/" + tiktik.getType() + "/" + tiktik.getTitleID() + "/cetk");
-
-            if(isTM){
-                fos.write(data);
-                fos.write(MAGIC);
-                fos.close();
-            }else{
-                this.ticketData = createTicket(tiktik.getTitleID(), tiktik.getTitleKey());
-            }
-
-            //ICONDOWNLOADER
-            (new Thread() {
-                public void run() {
-                    downloadIcon(tiktik.getTitleID());
-                }
-            }).start();
-
-            if(name.length() > 25-2){
-                name = name.substring(0, 22-2) + "...";
-            }
-            String nm = name;
-
-            Platform.runLater(() -> lblTitleName.setText(nm));
-            Platform.runLater(() -> lblTitleID.setText(titleid));
-
-            Boolean isDownloaded = downloadTitle(tiktik);
-
-            if(isDownloaded){
-                title++;
-                if(title <= final_title){
-                    Platform.runLater(() -> lblTitleCount.setText(title + "/" + final_title));
-                }
-            }else{
-                title++;
-                failed++;
-                Platform.runLater(() -> lblTitleCount.setText(title + "/" + final_title));
-                Platform.runLater(() -> lblFailedCount.setText(failed+""));
-            }
-        }
-
-        final_bytes = 0;
-        final_content = 0;
-        final_title = 0;
-        content = 0;
-        downloaded_bytes = 0;
-        TMD = "-";
-        TitleID = "";
-        title = 0;
-
-        Platform.runLater(() -> progressDownload.setProgress(0));
-        Platform.runLater(() -> lblDownloadStats.setText("0 MB / 0 MB"));
-        Platform.runLater(() -> lblTitleCount.setText("0/0"));
-        Platform.runLater(() -> lblFailedCount.setText("0"));
-        Platform.runLater(() -> lblFilesCount.setText("0/0"));
-        Platform.runLater(() -> lblTitleID.setText(TitleID));
-        Platform.runLater(() -> lblTitleName.setText(""));
-        Platform.runLater(() -> lblTMD.setText(TMD));
-        Platform.runLater(() -> lblAttemptCount.setText("0/0"));
-        Platform.runLater(() -> btnDownload.setText("Download"));
-        enableTabs();
-
-        if(isInterrupted){
-            Platform.runLater(() ->{
-                Alert warning = new Alert(Alert.AlertType.INFORMATION);
-                Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                warning.setTitle("Information");
-                warning.setHeaderText("Download cancled!");
-                warning.setContentText("Download cancled by user.");
-                warning.showAndWait();
-                    });
-            isInterrupted = false;
-        }else{
-            Platform.runLater(() ->{
-                Alert warning = new Alert(Alert.AlertType.INFORMATION);
-                Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                warning.setTitle("Information");
-                warning.setHeaderText("Download complete!");
-                warning.setContentText("Failed: " + failed);
-                warning.showAndWait();
-                downloadList.clear();
-                //CLEAR SELECTED DOWNLOAD
-                try {
-                    for(int i = 0; i < TMTableFilter.filteredTickets.size(); i++){
-                        Ticket tiktik = TMTableFilter.filteredTickets.get(i);
-                        if(tiktik.getDownload()){
-                            tiktik.setDownload(false);
-                            try{
-                                TMTableFilter.filteredTickets.set(i, tiktik);
-                            }catch (Exception e){
-                                //IGNORE
-                            }
-                        }
-                    }
-                }catch (Exception e){
-
-                }
-
-                try {
-                    for(int i = 0; i < TDATableFilter.filteredTickets.size(); i++){
-                        Ticket tiktik = TDATableFilter.filteredTickets.get(i);
-                        if(tiktik.getDownload()){
-                            tiktik.setDownload(false);
-                            try{
-                                TDATableFilter.filteredTickets.set(i, tiktik);
-                            }catch (Exception e){
-                                //IGNORE
-                            }
-                        }
-                    }
-                }catch (Exception e){
-
-                }
-
-            });
-
-            //ENABLE GUI
-            Platform.runLater(() -> rebuild.setDisable(false));
-            Platform.runLater(() -> table.setEditable(true));
-            Platform.runLater(() -> addall.setDisable(false));
-            Platform.runLater(() -> removeall.setDisable(false));
-            Platform.runLater(() -> search.setDisable(false));
-
-            if(!isTM)
-                Platform.runLater(() -> genCom.setDisable(false));
-            try{
-                InputStream stream = Main.class.getResourceAsStream("/resources/icon.png");
-                BufferedImage icon_b = ImageIO.read(stream);
-                Image icon = SwingFXUtils.toFXImage(icon_b, null);
-                Platform.runLater(() -> img.setImage(icon));
-            }catch (Exception e){
-                StringWriter errors = new StringWriter();
-                e.printStackTrace(new PrintWriter(errors));
-                DebugLogger.log(errors.toString(), Level.SEVERE);
-            }
-        }
-
-    }
-
-    private boolean downloadTitle(Ticket tik) throws Exception {
-        String baseurl = "http://ccs.cdn.c.shop.nintendowifi.net/ccs/download/" + tik.getTitleID();
-
-        DebugLogger.log("TitleID: " + tik.getTitleID(), Level.INFO);
-        DebugLogger.log("Downloading TMD...", Level.INFO);
-        for(int attempt = 0; attempt < ATTEMPS; attempt++){
-            try{
-                if(attempt >= 0){
-                    int att = attempt+1;
-                    Platform.runLater(() -> lblAttemptCount.setText((att) + "/" + ATTEMPS));
-                }
-                ReadableByteChannel rbc = Channels.newChannel(new URL(baseurl + "/tmd").openStream());
-                FileOutputStream fos = new FileOutputStream(path + "/raw/" + tik.getType() + "/" + tik.getTitleID() + "/" + "tmd");
-                fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
-                Platform.runLater(() -> lblTMD.setText("OK"));
-                fos.close();
-
-            }catch(Exception e){
-                Platform.runLater(() -> lblTMD.setText("Error"));
-
-                DebugLogger.log("Error while downloading TMD", Level.WARNING);
-                StringWriter errors = new StringWriter();
-                e.printStackTrace(new PrintWriter(errors));
-                DebugLogger.log(errors.toString(), Level.SEVERE);
-
-                Thread.sleep(100);
-                error = true;
-                continue;
-            }
-
-            error = false;
-            break;
-        }
-
-        if(!error){
-            Path tmd_path = Paths.get(path + "/raw/" + tik.getType() + "/" + tik.getTitleID() + "/" + "tmd");
-            byte[] tmd = Files.readAllBytes(tmd_path);
-
-            //TMD + CEKT CREATOR
-            if(!isTM){
-                this.ticketData = ConvertingTools.connectByteArray(Arrays.copyOfRange(ticketData,0 ,tk+0xA6), Arrays.copyOfRange(tmd, tk+0x9C, tk+0x9E), Arrays.copyOfRange(ticketData,tk+0xA8 ,ticketData.length));
-                this.ticketData = patchData(ticketData, tik.getType());
-                FileOutputStream fos = new FileOutputStream(path + "/raw/" + tik.getType() + "/" + tik.getTitleID() + "/cetk");
-                fos.write(ticketData);
-                fos.write(MAGIC);
-                fos.close();
-            }
-
-            int contentCount = Math.toIntExact(Long.parseLong(ConvertingTools.bytesToHex(Arrays.copyOfRange(tmd, tk+0x9e, tk+0xa0)), 16));
-            final_content = contentCount;
-
-            Platform.runLater(() -> lblFilesCount.setText(content + "/" + final_content));
-
-            for(int i = 0; i < contentCount; i++){
-                if(!error){
-                    int cOffs = 0xB04 + (0x30*i);
-                    String cID = ConvertingTools.bytesToHex(Arrays.copyOfRange(tmd, cOffs, cOffs + 0x04));
-
-                    content = i+1;
-                    Platform.runLater(() -> lblFilesCount.setText(content + "/" + final_content));
-                    DebugLogger.log("Downloading content " + content + " of " + final_content + "...", Level.INFO);
-                    final_bytes = Long.parseLong(ConvertingTools.bytesToHex(Arrays.copyOfRange(tmd, cOffs+0x08, cOffs+0x10)), 16);
-                    Platform.runLater(() -> lblDownloadStats.setText(bytes2human(downloaded_bytes,final_bytes)));
-
-                    for(int attempt = 0; attempt < ATTEMPS; attempt++){
-                        try{
-                            if(attempt >= 0){
-                                int att = attempt+1;
-                                Platform.runLater(() -> lblAttemptCount.setText((att) + "/" + ATTEMPS));
-                            }
-
-                            if(!downloadFile(baseurl + "/" + cID, path + "/raw/" + tik.getType() + "/" + tik.getTitleID() + "/" + cID)){
-                                DebugLogger.log("Couldn't download content file...", Level.WARNING);
-                                error = true;
-                                continue;
-                            }
-                            File f = new File(path + "/raw/" + tik.getType() + "/" + tik.getTitleID() + "/" + cID);
-                            if(f.length() != final_bytes){
-                                DebugLogger.log("Content download not correct size", Level.WARNING);
-                                failed++;
-                                if(isInterrupted){
-                                    return false;
-                                }
-                                error = true;
-                                continue;
-                            }
-
-                        }catch(Exception e){
-                            DebugLogger.log("Couldn't download content file...", Level.WARNING);
-                            StringWriter errors = new StringWriter();
-                            e.printStackTrace(new PrintWriter(errors));
-                            DebugLogger.log(errors.toString(), Level.SEVERE);
-
-                            error = true;
-                            continue;
-                        }
-                        error = false;
-                        break;
-                    }
-                }
-                if(error){
-                    DebugLogger.log("ERROR: Could not download content file... Skipping title", Level.WARNING);
-                }
-
-            }
-
-            if(!error){
-                if(build_cia){
-                    String ciadir =  tik.getTitleID() + "/";
-
-                    if(PropertiesHandler.getProperties("titlename") != null)
-                        if(PropertiesHandler.getProperties("titlename").equals("yes"))
-                            ciadir =  tik.getRegion() + " - " + tik.getName() + " (" + tik.getTitleID() + ")/";
-
-                    if(PropertiesHandler.getProperties("noindvfolders") != null)
-                        if(PropertiesHandler.getProperties("noindvfolders").equals("yes"))
-                            ciadir = "";
-
-                    if(createCIA(path + "/raw/" + tik.getType() + "/" + tik.getTitleID() + "/",path + "/cia/" + tik.getType() + "/" + ciadir, tik.getTitleID(), tik.getRegion(), tik.getName(), tik.getType())){
-                        return true;
-                    }else{
-                        return false;
-                    }
-                }else{
-                    return true;
-                }
-
-            }
-
-        }
-        return false;
-    }
-
-    public void downloadIcon(String titleid)
-    {
-        DebugLogger.log("Downloading icon...", Level.INFO);
-        try{
-            String path2 = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
-            path2 = path2.substring(1, path2.lastIndexOf("/")) + "/";
-
-            String typecheck = titleid.substring(4, 8).toLowerCase();
-
-            if(typecheck.equals("0001") || typecheck.equals("000e") || typecheck.equals("008c")){
-                titleid = titleid.substring(0,4) + "0000" + titleid.substring(8);
-            }
-
-            IconDownloader dl = new IconDownloader(titleid);
-            IconDataDecrypter dd = new IconDataDecrypter(dl.getEncryptedData(), dl.getKeyIndex());
-            dd.setKeys(path2 + "DecryptIcon.key");
-
-            byte[] decryptedData = dd.decryptData();
-            IconImgInfoReceiver iconImgInfoReceiver = new IconImgInfoReceiver(decryptedData, titleid);
-            iconImgInfoReceiver.processData();
-
-            BufferedImage icon_b = iconImgInfoReceiver.getLargeImage();
-
-            Image icon = SwingFXUtils.toFXImage(icon_b, null);
-
-            Platform.runLater(() -> img.setImage(icon));
-            DebugLogger.log("Icon downloaded!", Level.INFO);
-        }catch (Exception e){
-            DebugLogger.log("Icon download failed, using default icon", Level.WARNING);
-            try{
-                InputStream stream = Main.class.getResourceAsStream("/resources/icon.png");
-                BufferedImage icon_b = ImageIO.read(stream);
-
-                Image icon = SwingFXUtils.toFXImage(icon_b, null);
-
-                Platform.runLater(() -> img.setImage(icon));
-            }catch (Exception e2){
-                StringWriter errors = new StringWriter();
-                e2.printStackTrace(new PrintWriter(errors));
-                DebugLogger.log(errors.toString(), Level.SEVERE);
-            }
-        }
-    }
-
-    public boolean downloadFile(String url, String outPath){
-        try{
-
-            HTTPDownloadUtil util = new HTTPDownloadUtil();
-            util.downloadFile(url);
-
-            InputStream is = util.getInputStream();
-            FileOutputStream os = new FileOutputStream(outPath);
-
-            byte[] buffer = new byte[BUFFER_SIZE];
-            int bytesRead = -1;
-            long totalBytesRead = 0;
-
-            Platform.runLater(() -> lblDownloadStats.setText("0 MB / 0 MB"));
-
-            while(((bytesRead = is.read(buffer)) != -1) && !isInterrupted){
-                os.write(buffer, 0, bytesRead);
-                totalBytesRead += bytesRead;
-                downloaded_bytes = totalBytesRead;
-                Platform.runLater(() -> lblDownloadStats.setText(bytes2human(downloaded_bytes, final_bytes)));
-                //PROGRESSBAR
-            }
-            os.close();
-            util.disconnect();
-            return true;
-
-        }catch(Exception e){
-            return false;
-        }
-    }
-
-    private boolean createCIA(String rawDir, String ciaDir, String titleid, String region, String name, String type) throws Exception {
-        DebugLogger.log("Creating CIA... (TitleID: " + titleid + ")", Level.INFO);
-        String makecmd = " \"" + rawDir + "\" \"" + ciaDir + titleid +".cia\"";
-        String cdn_path = Tools.getMakeCDN();
-
-        ciaDir = ciaDir.substring(0,2) + ciaDir.substring(2).replace("/", "\\").replaceAll(":", "").replaceAll("\"","").replaceAll("\\?", "").replaceAll("|","").replaceAll("\\*","").replaceAll("|","").replaceAll("<","").replaceAll(">","").replaceAll("/","").replace(".","");
-
-        createDirectory(ciaDir);
-
-        if(PropertiesHandler.getProperties("titlename") != null)
-            if(PropertiesHandler.getProperties("titlename").equals("yes"))
-                if(name != null && region != null){
-                    name = name.replaceAll(":", "").replaceAll("\"","").replaceAll("\\?", "").replaceAll("/","").replaceAll("|","").replaceAll("\\*","").replaceAll("|","").replaceAll("<","").replaceAll(">","").replace(".","");
-                    makecmd = " \"" + rawDir + "\" \"" + ciaDir +  region + " - " + name + " (" + titleid + ")(" + type + ")"+ ".cia\"";
-                    titleid = region + " - " + name + " (" + titleid + ")(" + type + ")";
-                }
-
-        if(!DetectOS.isWindows()){
-            cdn_path = "/" + Tools.getMakeCDN();
-            Runtime.getRuntime().exec("chmod +x " + cdn_path);
-            makecmd = " " + rawDir + " " + ciaDir + titleid +".cia";
-            ciaDir = ciaDir.replace("\\", "/");
-
-            if(PropertiesHandler.getProperties("titlename") != null)
-                if(PropertiesHandler.getProperties("titlename").equals("yes"))
-                    if(name != null && region != null){
-                        name = name.replaceAll(":", "").replaceAll("\"","").replaceAll("\\?", "").replaceAll("/","").replaceAll("|","").replaceAll("\\*","").replaceAll("|","").replaceAll("<","").replaceAll(">","").replace(".","");
-                        makecmd = " " + rawDir + " " + ciaDir +  region + " - " + name + " (" + titleid + ")(" + type + ")"+ ".cia";
-                        titleid = region + " - " + name + " (" + titleid + ")(" + type + ")";
-                    }
-
-        }
-
-        DebugLogger.log("MakeCDN command: " + makecmd, Level.INFO);
-
-        Runtime.getRuntime().exec(cdn_path + makecmd);
-
-        Thread.sleep(100);
-        if(new File(ciaDir + titleid + ".cia").isFile()){
-            DebugLogger.log("CIA created!", Level.INFO);
-            return true;
-        }
-
-        DebugLogger.log("CIA not created...", Level.WARNING);
-        return false;
-
-    }
-
-    public void generateCIAFromRaw() throws Exception {
-        String Path = path + "/raw";
-        File file = new File(Path);
-        List<String> folders = new ArrayList<>();
-        List<Boolean> success = new ArrayList<>();
-        int counter = 0;
-
-        String[] directories = file.list(new FilenameFilter() {
-            @Override
-            public boolean accept(File current, String name) {
-                return new File(current, name).isDirectory();
-            }
-        });
-
-        try{
-            if(directories[0] == null)
-                return;
-        }catch(Exception e){
-            Platform.runLater(() ->{
-                Alert warning = new Alert(Alert.AlertType.ERROR);
-                Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-                stage.getIcons().add(new Image("/resources/gciaicon.png"));
-                warning.setTitle("Warning");
-                warning.setHeaderText("Rebuild raw content");
-                warning.setContentText("No raw content found. Did you select the right folder?");
-                warning.showAndWait();
-                Stage stage2 = (Stage) lblTitleCount.getScene().getWindow();
-                stage2.close();
-                    });
-            return;
-        }
-
-
-        for(String folder:directories){
-            file = new File(Path + "/" + folder);
-            String[] directories2 = file.list(new FilenameFilter() {
-                @Override
-                public boolean accept(File current, String name) {
-                    return new File(current, name).isDirectory();
-                }
-            });
-            folders.addAll(Arrays.asList(directories2));
-        }
-
-        //RebuildGUI
-
-        for(String fod:directories){
-            for(String folder:folders){
-                file = new File(Path + "/" + fod + "/" + folder);
-                if(file.exists()){
-                    String tmp_path = Path + "/" + fod + "/" + folder + "/";
-                    new File(tmp_path.replace("raw", "cia")).mkdirs();
-                    success.add(createCIA(Path + "/" + fod + "/" + folder, tmp_path.replace("raw", "cia"), folder, null, null,null));
-                    Platform.runLater(() -> lblTitleCount.setText("Completed "+success.size() + " of " + folders.size()));
-                    Platform.runLater(() -> progressDownload.setProgress((double)success.size()/(double)folders.size()));
-                }
-            }
-        }
-
-        for(boolean count:success){
-            if(count == false)
-                counter++;
-        }
-
-        int c = counter;
-        Platform.runLater(() ->{
-            Alert warning = new Alert(Alert.AlertType.INFORMATION);
-            Stage stage = (Stage)warning.getDialogPane().getScene().getWindow();
-            stage.getIcons().add(new Image("/resources/gciaicon.png"));
-            warning.setTitle("Done");
-            warning.setHeaderText("Done");
-            warning.setContentText("Succeded: " + (success.size()-c) + ("\nFailed: " + c));
-            warning.showAndWait();
-            Stage stage2 = (Stage) lblTitleCount.getScene().getWindow();
-            stage2.close();
-        });
-
-    }
-
-    public void run(){
-        try{
-            if(isDownload)
-                download();
-            else
-                generateCIAFromRaw();
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-}
\ No newline at end of file
+// INTERNAL ERROR //
\ No newline at end of file
Index: src/groovycia2/PropertiesHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/PropertiesHandler.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/PropertiesHandler.java	(revision )
@@ -1,114 +1,121 @@
-package groovycia2;
+/*     */ package groovycia2;
+/*     */ 
+/*     */ import java.io.PrintWriter;
+/*     */ import java.io.StringWriter;
+/*     */ import java.util.Properties;
+/*     */ import java.util.logging.Level;
+/*     */ 
+/*     */ public class PropertiesHandler
+/*     */ {
+/*  10 */   private static Properties p = new Properties();
+/*     */   private static String decodedPath;
+/*     */   
+/*     */   public static void createFile() {
+/*     */     try {
+/*  15 */       if (getPath() == null) {
+/*  16 */         new java.io.File(decodedPath).createNewFile();
+/*  17 */         DebugLogger.log("Properties file created!", Level.INFO);
+/*     */       }
+/*     */     } catch (java.io.IOException e) {
+/*  20 */       StringWriter errors = new StringWriter();
+/*  21 */       e.printStackTrace(new PrintWriter(errors));
+/*  22 */       DebugLogger.log(errors.toString(), Level.SEVERE);
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   public static String getTMInputPath() {
+/*  27 */     return getProperties("tmticketdb");
+/*     */   }
+/*     */   
+/*     */   public static String getTMOutputPath() {
+/*  31 */     return getProperties("tmoutputfolder");
+/*     */   }
+/*     */   
+/*     */   public static String getTDAInputPath() {
+/*  35 */     return getProperties("tdfile");
+/*     */   }
+/*     */   
+/*     */   public static String getTDOutputPath() {
+/*  39 */     return getProperties("tdfolder");
+/*     */   }
+/*     */   
+/*     */   public static String getTDTikPath() {
+/*  43 */     return getProperties("tdtikfolder");
+/*     */   }
+/*     */   
+/*     */   public static void setProperties(String data, String content) {
+/*     */     try {
+/*  48 */       data = data.replaceAll(":", "!");
+/*  49 */       p.setProperty(content, data);
+/*     */     } catch (Exception e) {
+/*  51 */       StringWriter errors = new StringWriter();
+/*  52 */       e.printStackTrace(new PrintWriter(errors));
+/*  53 */       DebugLogger.log(errors.toString(), Level.SEVERE);
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   public static String getProperties(String content) {
+/*     */     try {
+/*  59 */       if (getPath() != null) {
+/*  60 */         java.io.InputStream input = new java.io.FileInputStream(getPath());
+/*  61 */         p.load(input);
+/*  62 */         String data = p.getProperty(content);
+/*  63 */         if (data != null) {}
+/*  64 */         return data.replaceAll("!", ":");
+/*     */       }
+/*     */     }
+/*     */     catch (Exception e)
+/*     */     {
+/*  69 */       StringWriter errors = new StringWriter();
+/*  70 */       e.printStackTrace(new PrintWriter(errors));
+/*  71 */       DebugLogger.log(errors.toString(), Level.SEVERE);
+/*     */     }
+/*  73 */     return null;
+/*     */   }
+/*     */   
+/*     */   public static void saveProperties() {
+/*     */     try {
+/*  78 */       p.store(new java.io.FileOutputStream(getPath()), "Config File");
+/*     */     } catch (Exception e) {
+/*  80 */       StringWriter errors = new StringWriter();
+/*  81 */       e.printStackTrace(new PrintWriter(errors));
+/*  82 */       e.printStackTrace();
+/*  83 */       DebugLogger.log(errors.toString(), Level.SEVERE);
+/*     */     }
+/*     */   }
+/*     */   
+/*     */   private static String getPath() {
+/*     */     try {
+/*  89 */       String path = Main.class.getProtectionDomain().getCodeSource().getLocation().getPath();
+/*  90 */       path = path.substring(1, path.lastIndexOf("/")) + "/";
+/*  91 */       decodedPath = java.net.URLDecoder.decode(path, "UTF-8");
+/*     */       
+/*  93 */       decodedPath = decodedPath.substring(0, decodedPath.lastIndexOf("/")) + "/settings.properties";
+/*     */       
+/*  95 */       if (!DetectOS.isWindows()) {
+/*  96 */         decodedPath = "/" + decodedPath;
+/*     */       }
+/*  98 */       if (new java.io.File(decodedPath).exists()) {
+/*  99 */         if (DetectOS.returnOS().equals("Windows"))
+/* 100 */           return decodedPath;
+/* 101 */         if (DetectOS.returnOS().equals("Unix"))
+/* 102 */           return decodedPath;
+/* 103 */         if (DetectOS.returnOS().equals("Mac")) {
+/* 104 */           return decodedPath;
+/*     */         }
+/* 106 */         return null;
+/*     */       }
+/* 108 */       return null;
+/*     */     } catch (Exception e) {
+/* 110 */       StringWriter errors = new StringWriter();
+/* 111 */       e.printStackTrace(new PrintWriter(errors));
+/* 112 */       DebugLogger.log(errors.toString(), Level.SEVERE); }
+/* 113 */     return null;
+/*     */   }
+/*     */ }
 
-import java.io.*;
-import java.net.URLDecoder;
-import java.util.Properties;
-import java.util.logging.Level;
 
-public class PropertiesHandler {
-
-    private static Properties p = new Properties();
-    private static String decodedPath;
-
-    public static void createFile(){
-        try{
-            if(getPath() == null){
-                new File(decodedPath).createNewFile();
-                DebugLogger.log("Properties file created!", Level.INFO);
-            }
-        }catch (IOException e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-    public static String getTMInputPath(){
-        return getProperties("tmticketdb");
-    }
-
-    public static String getTMOutputPath(){
-        return getProperties("tmoutputfolder");
-    }
-
-    public static String getTDAInputPath(){
-        return getProperties("tdfile");
-    }
-
-    public static String getTDOutputPath(){
-        return getProperties("tdfolder");
-    }
-
-    public static String getTDTikPath(){
-        return getProperties("tdtikfolder");
-    }
-
-    public static void setProperties(String data, String content){
-        try{
-            data = data.replaceAll(":", "!");
-            p.setProperty(content, data);
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-    public static String getProperties(String content){
-        try{
-            if(getPath() != null){
-                InputStream input = new FileInputStream(getPath());
-                p.load(input);
-                String data = p.getProperty(content);
-                if(data != null){
-                    data = data.replaceAll("!", ":");
-                }
-                return data;
-            }
-        }catch(Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-        return null;
-    }
-
-    public static void saveProperties(){
-        try {
-            p.store(new FileOutputStream(getPath()), "Config File");
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            e.printStackTrace();
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-        }
-    }
-
-    private static String getPath(){
-
-        try{
-            String path = Main.class.getProtectionDomain().getCodeSource().getLocation().getPath().replace("GroovyFX.jar","");
-            decodedPath = URLDecoder.decode(path, "UTF-8");
-
-            decodedPath = decodedPath.substring(0, decodedPath.lastIndexOf("/")) + "/settings.properties";
-
-            if(new File(decodedPath).exists()){
-                if(DetectOS.returnOS().equals("Windows"))
-                    return decodedPath;
-                else if(DetectOS.returnOS().equals("Unix"))
-                    return decodedPath;
-                else if(DetectOS.returnOS().equals("Mac"))
-                    return decodedPath;
-                else
-                    return null;
-            }
-            return null;
-        }catch (Exception e){
-            StringWriter errors = new StringWriter();
-            e.printStackTrace(new PrintWriter(errors));
-            DebugLogger.log(errors.toString(), Level.SEVERE);
-            return null;
-        }
-    }
-
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\PropertiesHandler.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
Index: src/groovycia2/EncTitleKeysHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/groovycia2/EncTitleKeysHandler.java	(revision 85cb177cfa1d35d6abea0319c61326c4d3a45d93)
+++ src/groovycia2/EncTitleKeysHandler.java	(revision )
@@ -1,96 +1,101 @@
-package groovycia2;
+/*    */ package groovycia2;
+/*    */ 
+/*    */ import java.io.IOException;
+/*    */ import java.nio.file.Files;
+/*    */ import java.nio.file.Path;
+/*    */ import java.nio.file.Paths;
+/*    */ import java.util.ArrayList;
+/*    */ import java.util.Arrays;
+/*    */ import java.util.List;
+/*    */ import javafx.collections.FXCollections;
+/*    */ import javafx.collections.ObservableList;
+/*    */ 
+/*    */ 
+/*    */ public class EncTitleKeysHandler
+/*    */ {
+/* 16 */   private final int TICKETLEN = 32;
+/*    */   
+/*    */   private ObservableList<Ticket> titlelist;
+/*    */   private byte[] data;
+/*    */   private List<Integer> ticketOffsets;
+/*    */   private List<Integer> apptypeCount;
+/*    */   
+/*    */   public EncTitleKeysHandler()
+/*    */   {
+/* 25 */     this.ticketOffsets = new ArrayList();
+/* 26 */     this.titlelist = FXCollections.observableArrayList();
+/* 27 */     this.apptypeCount = Arrays.asList(new Integer[] { Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0) });
+/*    */   }
+/*    */   
+/*    */   public ObservableList<Ticket> getTitleList() {
+/* 31 */     return this.titlelist;
+/*    */   }
+/*    */   
+/*    */   public List<Integer> getApptypeCount() {
+/* 35 */     return this.apptypeCount;
+/*    */   }
+/*    */   
+/*    */   public void openFile(String path) throws IOException {
+/* 39 */     Path realPath = Paths.get(path, new String[0]);
+/* 40 */     this.data = Files.readAllBytes(realPath);
+/*    */   }
+/*    */   
+/*    */   public void addToTitleList() {
+/* 44 */     long datalen = this.data.length;
+/*    */     
+/* 46 */     for (int i = 16; i < datalen; i += 32) {
+/* 47 */       Ticket ticket = new Ticket();
+/* 48 */       ticket.setTitleID(ConvertingTools.bytesToHex(Arrays.copyOfRange(this.data, i + 8, i + 16)));
+/* 49 */       ticket.setTitleKey(ConvertingTools.bytesToHex(Arrays.copyOfRange(this.data, i + 16, i + 32)));
+/* 50 */       this.titlelist.add(ticket);
+/*    */     }
+/*    */   }
+/*    */   
+/*    */ 
+/*    */   public void sortTitles()
+/*    */     throws Exception
+/*    */   {
+/* 58 */     for (Ticket tiktik : this.titlelist) {
+/* 59 */       String titleid = tiktik.getTitleID();
+/* 60 */       String typecheck = titleid.substring(4, 8).toLowerCase();
+/*    */       
+/* 62 */       if (typecheck.equals("0000")) {
+/* 63 */         tiktik.setType(Ticket.Type.ESHOP);
+/* 64 */         this.apptypeCount.set(0, Integer.valueOf(((Integer)this.apptypeCount.get(0)).intValue() + 1));
+/* 65 */       } else if (typecheck.equals("0001")) {
+/* 66 */         tiktik.setType(Ticket.Type.DLP);
+/* 67 */         this.apptypeCount.set(1, Integer.valueOf(((Integer)this.apptypeCount.get(1)).intValue() + 1));
+/* 68 */       } else if (typecheck.equals("0002")) {
+/* 69 */         tiktik.setType(Ticket.Type.DEMO);
+/* 70 */         this.apptypeCount.set(2, Integer.valueOf(((Integer)this.apptypeCount.get(2)).intValue() + 1));
+/* 71 */       } else if (typecheck.equals("000e")) {
+/* 72 */         tiktik.setType(Ticket.Type.UPDATE);
+/* 73 */         this.apptypeCount.set(3, Integer.valueOf(((Integer)this.apptypeCount.get(3)).intValue() + 1));
+/* 74 */       } else if (typecheck.equals("008c")) {
+/* 75 */         tiktik.setType(Ticket.Type.DLC);
+/* 76 */         this.apptypeCount.set(4, Integer.valueOf(((Integer)this.apptypeCount.get(4)).intValue() + 1));
+/* 77 */       } else if (typecheck.equals("8004")) {
+/* 78 */         tiktik.setType(Ticket.Type.DSIWARE);
+/* 79 */         this.apptypeCount.set(5, Integer.valueOf(((Integer)this.apptypeCount.get(5)).intValue() + 1));
+/* 80 */       } else if ((Long.parseLong(typecheck, 16) & 0x10) == 16L) {
+/* 81 */         tiktik.setType(Ticket.Type.SYSTEM);
+/* 82 */         this.apptypeCount.set(8, Integer.valueOf(((Integer)this.apptypeCount.get(8)).intValue() + 1));
+/* 83 */       } else if (typecheck.equals("8005")) {
+/* 84 */         tiktik.setType(Ticket.Type.DSISYSAPP);
+/* 85 */         this.apptypeCount.set(6, Integer.valueOf(((Integer)this.apptypeCount.get(6)).intValue() + 1));
+/* 86 */       } else if (typecheck.equals("800f")) {
+/* 87 */         tiktik.setType(Ticket.Type.DSISYSDAT);
+/* 88 */         this.apptypeCount.set(7, Integer.valueOf(((Integer)this.apptypeCount.get(7)).intValue() + 1));
+/*    */       } else {
+/* 90 */         tiktik.setType(Ticket.Type.MYSTERY);
+/* 91 */         this.apptypeCount.set(9, Integer.valueOf(((Integer)this.apptypeCount.get(9)).intValue() + 1));
+/*    */       }
+/*    */     }
+/*    */   }
+/*    */ }
 
-import javafx.collections.FXCollections;
-import javafx.collections.ObservableList;
 
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-public class EncTitleKeysHandler {
-
-    private final int TICKETLEN = 32;
-
-    private ObservableList<Ticket> titlelist;
-    private byte[] data;
-
-    private List<Integer> ticketOffsets;
-    private List<Integer> apptypeCount;
-
-    public EncTitleKeysHandler(){
-        ticketOffsets = new ArrayList<>();
-        titlelist = FXCollections.observableArrayList();
-        apptypeCount = Arrays.asList(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);  // es-app, dlp, demo, upd-p, dlc, dsiw, dsisys, dsidat, sys, myst, any
-    }
-
-    public ObservableList<Ticket> getTitleList(){
-        return titlelist;
-    }
-
-    public List<Integer> getApptypeCount(){
-        return apptypeCount;
-    }
-
-    public void openFile(String path) throws IOException{
-        Path realPath = Paths.get(path);
-        data = Files.readAllBytes(realPath);
-    }
-
-    public void addToTitleList(){
-        long datalen = this.data.length;
-
-        for(int i = 16; i < datalen; i += TICKETLEN){
-            Ticket ticket = new Ticket();
-            ticket.setTitleID(ConvertingTools.bytesToHex(Arrays.copyOfRange(data,i+8 ,i+16)));
-            ticket.setTitleKey(ConvertingTools.bytesToHex(Arrays.copyOfRange(data, i+16, i+32)));
-            this.titlelist.add(ticket);
-        }
-    }
-
-    public void sortTitles() throws Exception{
-        String titleid;
-        String typecheck;
-
-        for(Ticket tiktik:titlelist){
-            titleid = tiktik.getTitleID();
-            typecheck = titleid.substring(4, 8).toLowerCase();
-
-            if(typecheck.equals("0000")){
-                tiktik.setType(Ticket.Type.ESHOP);
-                apptypeCount.set(0, apptypeCount.get(0)+1);
-            }else if(typecheck.equals("0001")){
-                tiktik.setType(Ticket.Type.DLP);
-                apptypeCount.set(1, apptypeCount.get(1)+1);
-            }else if(typecheck.equals("0002")){
-                tiktik.setType(Ticket.Type.DEMO);
-                apptypeCount.set(2, apptypeCount.get(2)+1);
-            }else if(typecheck.equals("000e")){
-                tiktik.setType(Ticket.Type.UPDATE);
-                apptypeCount.set(3, apptypeCount.get(3)+1);
-            }else if(typecheck.equals("008c")){
-                tiktik.setType(Ticket.Type.DLC);
-                apptypeCount.set(4, apptypeCount.get(4)+1);
-            }else if(typecheck.equals("8004")){
-                tiktik.setType(Ticket.Type.DSIWARE);
-                apptypeCount.set(5, apptypeCount.get(5)+1);
-            }else if(((Long.parseLong(typecheck, 16)) & 0x10) == 0x10){
-                tiktik.setType(Ticket.Type.SYSTEM);
-                apptypeCount.set(8, apptypeCount.get(8)+1);
-            }else if(typecheck.equals("8005")){
-                tiktik.setType(Ticket.Type.DSISYSAPP);
-                apptypeCount.set(6, apptypeCount.get(6)+1);
-            }else if(typecheck.equals("800f")){
-                tiktik.setType(Ticket.Type.DSISYSDAT);
-                apptypeCount.set(7, apptypeCount.get(7)+1);
-            }else{
-                tiktik.setType(Ticket.Type.MYSTERY);
-                apptypeCount.set(9, apptypeCount.get(9)+1);
-            }
-        }
-    }
-
-}
+/* Location:              C:\Users\lbpat\Desktop\CDN-FX(1).jar!\groovycia2\EncTitleKeysHandler.class
+ * Java compiler version: 8 (52.0)
+ * JD-Core Version:       0.7.1
+ */
\ No newline at end of file
